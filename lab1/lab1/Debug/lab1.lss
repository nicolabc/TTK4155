
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  00000e70  00000f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800258  00800258  0000105c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f8f  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bf2  00000000  00000000  00003247  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bf2  00000000  00000000  00003e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004bc  00000000  00000000  00004a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c2  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001683  00000000  00000000  000055aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  00006c2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e7       	ldi	r30, 0x70	; 112
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 35       	cpi	r26, 0x58	; 88
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a8 e5       	ldi	r26, 0x58	; 88
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 36       	cpi	r26, 0x6A	; 106
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 65 00 	call	0xca	; 0xca <main>
  a6:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
  ae:	30 98       	cbi	0x06, 0	; 6
  b0:	08 95       	ret

000000b2 <avr_init>:
  b2:	b8 98       	cbi	0x17, 0	; 23
  b4:	b9 98       	cbi	0x17, 1	; 23
  b6:	ba 98       	cbi	0x17, 2	; 23
  b8:	c2 9a       	sbi	0x18, 2	; 24
  ba:	08 95       	ret

000000bc <extMem_init>:
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	85 bf       	out	0x35, r24	; 53
  c2:	80 b7       	in	r24, 0x30	; 48
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	80 bf       	out	0x30, r24	; 48
  c8:	08 95       	ret

000000ca <main>:


int main(void)
{
	
	USART_Init(MYUBRR);
  ca:	8f e1       	ldi	r24, 0x1F	; 31
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 a6 02 	call	0x54c	; 0x54c <USART_Init>
	extMem_init(); 
  d2:	0e 94 5e 00 	call	0xbc	; 0xbc <extMem_init>
	avr_init();
  d6:	0e 94 59 00 	call	0xb2	; 0xb2 <avr_init>
	adc_init();
  da:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	oled_init();
  de:	0e 94 47 02 	call	0x48e	; 0x48e <oled_init>
	oled_clear_screen();
  e2:	0e 94 2e 02 	call	0x45c	; 0x45c <oled_clear_screen>
	menu_init();
  e6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <menu_init>
	//spi_init();
	mcp2515_init();
  ea:	0e 94 a6 00 	call	0x14c	; 0x14c <mcp2515_init>
	while(1){
		uint8_t data;

		data = mcp2515_read(MCP_TXB0CTRL);

		printf("Returnert verdi %02X\n", mcp2515_read_status()); //printer verdien vi leser fra registeret i hex
  ee:	c6 e0       	ldi	r28, 0x06	; 6
  f0:	d1 e0       	ldi	r29, 0x01	; 1

	//LESER A
	while(1){
		uint8_t data;

		data = mcp2515_read(MCP_TXB0CTRL);
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	0e 94 92 00 	call	0x124	; 0x124 <mcp2515_read>

		printf("Returnert verdi %02X\n", mcp2515_read_status()); //printer verdien vi leser fra registeret i hex
  f8:	0e 94 bc 00 	call	0x178	; 0x178 <mcp2515_read_status>
  fc:	1f 92       	push	r1
  fe:	8f 93       	push	r24
 100:	df 93       	push	r29
 102:	cf 93       	push	r28
 104:	0e 94 23 04 	call	0x846	; 0x846 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	8e e0       	ldi	r24, 0x0E	; 14
 10e:	91 50       	subi	r25, 0x01	; 1
 110:	20 40       	sbci	r18, 0x00	; 0
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x44>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x4e>
 118:	00 00       	nop
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	e7 cf       	rjmp	.-50     	; 0xf2 <main+0x28>

00000124 <mcp2515_read>:
#include "spi.h"

#define set_bit( reg, bit ) (reg |= (1 << bit))
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

uint8_t mcp2515_read(uint8_t address){
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, PB4); //Setter SS lav
 128:	c4 98       	cbi	0x18, 4	; 24

	uint8_t result;
	spi_MasterTransmit(MCP_READ);
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	0e 94 82 02 	call	0x504	; 0x504 <spi_MasterTransmit>
	spi_MasterTransmit(address);
 130:	8c 2f       	mov	r24, r28
 132:	0e 94 82 02 	call	0x504	; 0x504 <spi_MasterTransmit>
	result = spi_MasterRead(); //Leser hva som var i adressen/registeret vi aksesserte
 136:	0e 94 86 02 	call	0x50c	; 0x50c <spi_MasterRead>

	set_bit(PORTB, PB4); //Setter SS høy
 13a:	c4 9a       	sbi	0x18, 4	; 24
	
	return result;
}
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <mcp2515_reset>:

	set_bit(PORTB,PB4);
}

void mcp2515_reset(){
	clear_bit(PORTB,PB4); //Setter SS lav
 140:	c4 98       	cbi	0x18, 4	; 24
	spi_MasterTransmit(MCP_RESET);
 142:	80 ec       	ldi	r24, 0xC0	; 192
 144:	0e 94 82 02 	call	0x504	; 0x504 <spi_MasterTransmit>
	set_bit(PORTB,PB4); //Setter SS høy
 148:	c4 9a       	sbi	0x18, 4	; 24
 14a:	08 95       	ret

0000014c <mcp2515_init>:
}

uint8_t mcp2515_init(){
	uint8_t value;
	spi_init(); //Initialize SPI
 14c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_init>
	mcp2515_reset(); // Send reset-command
 150:	0e 94 a0 00 	call	0x140	; 0x140 <mcp2515_reset>
	
	//Self-test
	value = mcp2515_read(MCP_CANSTAT); 
 154:	8e e0       	ldi	r24, 0x0E	; 14
 156:	0e 94 92 00 	call	0x124	; 0x124 <mcp2515_read>
	if((value & MODE_MASK)  != MODE_CONFIG) {
 15a:	80 7e       	andi	r24, 0xE0	; 224
 15c:	80 38       	cpi	r24, 0x80	; 128
 15e:	31 f0       	breq	.+12     	; 0x16c <mcp2515_init+0x20>
		printf("MCP2515 is NOT in configuration	mode after reset!\n");
 160:	8c e1       	ldi	r24, 0x1C	; 28
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 37 04 	call	0x86e	; 0x86e <puts>
		return 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	08 95       	ret
	}
	// More initialization
	printf("MCP2515 IS in configuration mode after reset!\n");
 16c:	8e e4       	ldi	r24, 0x4E	; 78
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 37 04 	call	0x86e	; 0x86e <puts>
	return 0;
 174:	80 e0       	ldi	r24, 0x00	; 0
}
 176:	08 95       	ret

00000178 <mcp2515_read_status>:
	}
	
	set_bit(PORTB,PB4); //Setter SS høy
}

uint8_t mcp2515_read_status(){
 178:	cf 93       	push	r28
	clear_bit(PORTB,PB4); //Setter SS lav
 17a:	c4 98       	cbi	0x18, 4	; 24
	
	uint8_t statusRegister;
	uint8_t statusRegister2;

	spi_MasterTransmit(MCP_READ_STATUS);
 17c:	80 ea       	ldi	r24, 0xA0	; 160
 17e:	0e 94 82 02 	call	0x504	; 0x504 <spi_MasterTransmit>
	statusRegister = spi_MasterRead(); //disse to skal være like hverandre, se s. 69
 182:	0e 94 86 02 	call	0x50c	; 0x50c <spi_MasterRead>
 186:	c8 2f       	mov	r28, r24
	statusRegister2 = spi_MasterRead(); //disse to skal være like hverandre, se s. 69
 188:	0e 94 86 02 	call	0x50c	; 0x50c <spi_MasterRead>

	if(statusRegister != statusRegister2){
 18c:	c8 17       	cp	r28, r24
 18e:	51 f0       	breq	.+20     	; 0x1a4 <mcp2515_read_status+0x2c>
		printf("Status registers in mcp2515_read_status() not identical.");
 190:	8c e7       	ldi	r24, 0x7C	; 124
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	9f 93       	push	r25
 196:	8f 93       	push	r24
 198:	0e 94 23 04 	call	0x846	; 0x846 <printf>
		return 0;
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <mcp2515_read_status+0x30>
	}

	set_bit(PORTB,PB4); //Setter SS høy
 1a4:	c4 9a       	sbi	0x18, 4	; 24

	return statusRegister;
 1a6:	8c 2f       	mov	r24, r28
}
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <menu_init>:

node_t* currentSelection;
node_t* currentHead;
node_t* developers;

void menu_init(void){
 1ac:	2f 92       	push	r2
 1ae:	3f 92       	push	r3
 1b0:	4f 92       	push	r4
 1b2:	5f 92       	push	r5
 1b4:	6f 92       	push	r6
 1b6:	7f 92       	push	r7
 1b8:	8f 92       	push	r8
 1ba:	9f 92       	push	r9
 1bc:	af 92       	push	r10
 1be:	bf 92       	push	r11
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <menu_init+0x26>
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <menu_init+0x28>
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <menu_init+0x2a>
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	
	
	node_t* newgame = malloc(sizeof(node_t)); //For å allokere nok minne av størrelse node_t
 1da:	8a e0       	ldi	r24, 0x0A	; 10
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 1e2:	9e 83       	std	Y+6, r25	; 0x06
 1e4:	8d 83       	std	Y+5, r24	; 0x05
		node_t* easy = malloc(sizeof(node_t));
 1e6:	8a e0       	ldi	r24, 0x0A	; 10
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 1ee:	4c 01       	movw	r8, r24
		node_t* normal = malloc(sizeof(node_t));
 1f0:	8a e0       	ldi	r24, 0x0A	; 10
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 1f8:	5c 01       	movw	r10, r24
		node_t* hard = malloc(sizeof(node_t));
 1fa:	8a e0       	ldi	r24, 0x0A	; 10
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
	
	node_t* highscore = malloc(sizeof(node_t));
 206:	8a e0       	ldi	r24, 0x0A	; 10
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 20e:	6c 01       	movw	r12, r24
	node_t* options = malloc(sizeof(node_t));
 210:	8a e0       	ldi	r24, 0x0A	; 10
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 218:	8c 01       	movw	r16, r24
		node_t* sound = malloc(sizeof(node_t));
 21a:	8a e0       	ldi	r24, 0x0A	; 10
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 222:	7c 01       	movw	r14, r24
			node_t* sound_on = malloc(sizeof(node_t));
 224:	8a e0       	ldi	r24, 0x0A	; 10
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 22c:	2c 01       	movw	r4, r24
			node_t* sound_off = malloc(sizeof(node_t));
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 236:	9c 83       	std	Y+4, r25	; 0x04
 238:	8b 83       	std	Y+3, r24	; 0x03
		node_t* sensitivity = malloc(sizeof(node_t));
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 242:	3c 01       	movw	r6, r24
	
	node_t* credits = malloc(sizeof(node_t));
 244:	8a e0       	ldi	r24, 0x0A	; 10
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 24c:	1c 01       	movw	r2, r24
		developers = malloc(sizeof(node_t));
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 256:	9c 01       	movw	r18, r24
 258:	90 93 5b 02 	sts	0x025B, r25
 25c:	80 93 5a 02 	sts	0x025A, r24
	
	currentHead = malloc(sizeof(node_t));
	currentSelection = malloc(sizeof(node_t));
	
	
	currentHead = newgame;
 260:	8d 81       	ldd	r24, Y+5	; 0x05
 262:	9e 81       	ldd	r25, Y+6	; 0x06
 264:	90 93 5d 02 	sts	0x025D, r25
 268:	80 93 5c 02 	sts	0x025C, r24
	//currentSelection = DER PILEN DIN PEKER NÅ
	currentSelection = newgame;
 26c:	90 93 59 02 	sts	0x0259, r25
 270:	80 93 58 02 	sts	0x0258, r24
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 274:	85 eb       	ldi	r24, 0xB5	; 181
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	ad 81       	ldd	r26, Y+5	; 0x05
 27a:	be 81       	ldd	r27, Y+6	; 0x06
 27c:	11 96       	adiw	r26, 0x01	; 1
 27e:	9c 93       	st	X, r25
 280:	8e 93       	st	-X, r24
	myNode->previous = previous;
 282:	15 96       	adiw	r26, 0x05	; 5
 284:	1c 92       	st	X, r1
 286:	1e 92       	st	-X, r1
 288:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 28a:	13 96       	adiw	r26, 0x03	; 3
 28c:	dc 92       	st	X, r13
 28e:	ce 92       	st	-X, r12
 290:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 292:	17 96       	adiw	r26, 0x07	; 7
 294:	9c 92       	st	X, r9
 296:	8e 92       	st	-X, r8
 298:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 29a:	19 96       	adiw	r26, 0x09	; 9
 29c:	1c 92       	st	X, r1
 29e:	1e 92       	st	-X, r1
 2a0:	18 97       	sbiw	r26, 0x08	; 8
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 2a2:	8e eb       	ldi	r24, 0xBE	; 190
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	f4 01       	movw	r30, r8
 2a8:	91 83       	std	Z+1, r25	; 0x01
 2aa:	80 83       	st	Z, r24
	myNode->previous = previous;
 2ac:	15 82       	std	Z+5, r1	; 0x05
 2ae:	14 82       	std	Z+4, r1	; 0x04
	myNode->next = next;
 2b0:	b3 82       	std	Z+3, r11	; 0x03
 2b2:	a2 82       	std	Z+2, r10	; 0x02
	myNode->child = child;
 2b4:	17 82       	std	Z+7, r1	; 0x07
 2b6:	16 82       	std	Z+6, r1	; 0x06
	myNode->parent = parent;
 2b8:	b1 87       	std	Z+9, r27	; 0x09
 2ba:	a0 87       	std	Z+8, r26	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 2bc:	83 ec       	ldi	r24, 0xC3	; 195
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	d5 01       	movw	r26, r10
 2c2:	11 96       	adiw	r26, 0x01	; 1
 2c4:	9c 93       	st	X, r25
 2c6:	8e 93       	st	-X, r24
	myNode->previous = previous;
 2c8:	15 96       	adiw	r26, 0x05	; 5
 2ca:	9c 92       	st	X, r9
 2cc:	8e 92       	st	-X, r8
 2ce:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 2d0:	e9 81       	ldd	r30, Y+1	; 0x01
 2d2:	fa 81       	ldd	r31, Y+2	; 0x02
 2d4:	13 96       	adiw	r26, 0x03	; 3
 2d6:	fc 93       	st	X, r31
 2d8:	ee 93       	st	-X, r30
 2da:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 2dc:	17 96       	adiw	r26, 0x07	; 7
 2de:	1c 92       	st	X, r1
 2e0:	1e 92       	st	-X, r1
 2e2:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 2e4:	8d 81       	ldd	r24, Y+5	; 0x05
 2e6:	9e 81       	ldd	r25, Y+6	; 0x06
 2e8:	19 96       	adiw	r26, 0x09	; 9
 2ea:	9c 93       	st	X, r25
 2ec:	8e 93       	st	-X, r24
 2ee:	18 97       	sbiw	r26, 0x08	; 8
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 2f0:	8a ec       	ldi	r24, 0xCA	; 202
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	91 83       	std	Z+1, r25	; 0x01
 2f6:	80 83       	st	Z, r24
	myNode->previous = previous;
 2f8:	b5 82       	std	Z+5, r11	; 0x05
 2fa:	a4 82       	std	Z+4, r10	; 0x04
	myNode->next = next;
 2fc:	13 82       	std	Z+3, r1	; 0x03
 2fe:	12 82       	std	Z+2, r1	; 0x02
	myNode->child = child;
 300:	17 82       	std	Z+7, r1	; 0x07
 302:	16 82       	std	Z+6, r1	; 0x06
	myNode->parent = parent;
 304:	ad 81       	ldd	r26, Y+5	; 0x05
 306:	be 81       	ldd	r27, Y+6	; 0x06
 308:	b1 87       	std	Z+9, r27	; 0x09
 30a:	a0 87       	std	Z+8, r26	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 30c:	8f ec       	ldi	r24, 0xCF	; 207
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	f6 01       	movw	r30, r12
 312:	91 83       	std	Z+1, r25	; 0x01
 314:	80 83       	st	Z, r24
	myNode->previous = previous;
 316:	b5 83       	std	Z+5, r27	; 0x05
 318:	a4 83       	std	Z+4, r26	; 0x04
	myNode->next = next;
 31a:	13 83       	std	Z+3, r17	; 0x03
 31c:	02 83       	std	Z+2, r16	; 0x02
	myNode->child = child;
 31e:	17 82       	std	Z+7, r1	; 0x07
 320:	16 82       	std	Z+6, r1	; 0x06
	myNode->parent = parent;
 322:	11 86       	std	Z+9, r1	; 0x09
 324:	10 86       	std	Z+8, r1	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 326:	89 ed       	ldi	r24, 0xD9	; 217
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	d8 01       	movw	r26, r16
 32c:	11 96       	adiw	r26, 0x01	; 1
 32e:	9c 93       	st	X, r25
 330:	8e 93       	st	-X, r24
	myNode->previous = previous;
 332:	15 96       	adiw	r26, 0x05	; 5
 334:	dc 92       	st	X, r13
 336:	ce 92       	st	-X, r12
 338:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 33a:	13 96       	adiw	r26, 0x03	; 3
 33c:	3c 92       	st	X, r3
 33e:	2e 92       	st	-X, r2
 340:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 342:	17 96       	adiw	r26, 0x07	; 7
 344:	7c 92       	st	X, r7
 346:	6e 92       	st	-X, r6
 348:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 34a:	19 96       	adiw	r26, 0x09	; 9
 34c:	1c 92       	st	X, r1
 34e:	1e 92       	st	-X, r1
 350:	18 97       	sbiw	r26, 0x08	; 8
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 352:	81 ee       	ldi	r24, 0xE1	; 225
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	f3 01       	movw	r30, r6
 358:	91 83       	std	Z+1, r25	; 0x01
 35a:	80 83       	st	Z, r24
	myNode->previous = previous;
 35c:	15 82       	std	Z+5, r1	; 0x05
 35e:	14 82       	std	Z+4, r1	; 0x04
	myNode->next = next;
 360:	f3 82       	std	Z+3, r15	; 0x03
 362:	e2 82       	std	Z+2, r14	; 0x02
	myNode->child = child;
 364:	17 82       	std	Z+7, r1	; 0x07
 366:	16 82       	std	Z+6, r1	; 0x06
	myNode->parent = parent;
 368:	11 87       	std	Z+9, r17	; 0x09
 36a:	00 87       	std	Z+8, r16	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 36c:	8d ee       	ldi	r24, 0xED	; 237
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	d7 01       	movw	r26, r14
 372:	11 96       	adiw	r26, 0x01	; 1
 374:	9c 93       	st	X, r25
 376:	8e 93       	st	-X, r24
	myNode->previous = previous;
 378:	15 96       	adiw	r26, 0x05	; 5
 37a:	7c 92       	st	X, r7
 37c:	6e 92       	st	-X, r6
 37e:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 380:	13 96       	adiw	r26, 0x03	; 3
 382:	1c 92       	st	X, r1
 384:	1e 92       	st	-X, r1
 386:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 388:	17 96       	adiw	r26, 0x07	; 7
 38a:	5c 92       	st	X, r5
 38c:	4e 92       	st	-X, r4
 38e:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 390:	19 96       	adiw	r26, 0x09	; 9
 392:	1c 93       	st	X, r17
 394:	0e 93       	st	-X, r16
 396:	18 97       	sbiw	r26, 0x08	; 8
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 398:	83 ef       	ldi	r24, 0xF3	; 243
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	f2 01       	movw	r30, r4
 39e:	91 83       	std	Z+1, r25	; 0x01
 3a0:	80 83       	st	Z, r24
	myNode->previous = previous;
 3a2:	15 82       	std	Z+5, r1	; 0x05
 3a4:	14 82       	std	Z+4, r1	; 0x04
	myNode->next = next;
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	9c 81       	ldd	r25, Y+4	; 0x04
 3aa:	93 83       	std	Z+3, r25	; 0x03
 3ac:	82 83       	std	Z+2, r24	; 0x02
	myNode->child = child;
 3ae:	17 82       	std	Z+7, r1	; 0x07
 3b0:	16 82       	std	Z+6, r1	; 0x06
	myNode->parent = parent;
 3b2:	f1 86       	std	Z+9, r15	; 0x09
 3b4:	e0 86       	std	Z+8, r14	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 3b6:	8c ef       	ldi	r24, 0xFC	; 252
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	ab 81       	ldd	r26, Y+3	; 0x03
 3bc:	bc 81       	ldd	r27, Y+4	; 0x04
 3be:	11 96       	adiw	r26, 0x01	; 1
 3c0:	9c 93       	st	X, r25
 3c2:	8e 93       	st	-X, r24
	myNode->previous = previous;
 3c4:	15 96       	adiw	r26, 0x05	; 5
 3c6:	5c 92       	st	X, r5
 3c8:	4e 92       	st	-X, r4
 3ca:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 3cc:	13 96       	adiw	r26, 0x03	; 3
 3ce:	1c 92       	st	X, r1
 3d0:	1e 92       	st	-X, r1
 3d2:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 3d4:	17 96       	adiw	r26, 0x07	; 7
 3d6:	1c 92       	st	X, r1
 3d8:	1e 92       	st	-X, r1
 3da:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 3dc:	19 96       	adiw	r26, 0x09	; 9
 3de:	fc 92       	st	X, r15
 3e0:	ee 92       	st	-X, r14
 3e2:	18 97       	sbiw	r26, 0x08	; 8
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 3e4:	86 e0       	ldi	r24, 0x06	; 6
 3e6:	92 e0       	ldi	r25, 0x02	; 2
 3e8:	f1 01       	movw	r30, r2
 3ea:	91 83       	std	Z+1, r25	; 0x01
 3ec:	80 83       	st	Z, r24
	myNode->previous = previous;
 3ee:	15 83       	std	Z+5, r17	; 0x05
 3f0:	04 83       	std	Z+4, r16	; 0x04
	myNode->next = next;
 3f2:	13 82       	std	Z+3, r1	; 0x03
 3f4:	12 82       	std	Z+2, r1	; 0x02
	myNode->child = child;
 3f6:	37 83       	std	Z+7, r19	; 0x07
 3f8:	26 83       	std	Z+6, r18	; 0x06
	myNode->parent = parent;
 3fa:	11 86       	std	Z+9, r1	; 0x09
 3fc:	10 86       	std	Z+8, r1	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 3fe:	8e e0       	ldi	r24, 0x0E	; 14
 400:	92 e0       	ldi	r25, 0x02	; 2
 402:	d9 01       	movw	r26, r18
 404:	11 96       	adiw	r26, 0x01	; 1
 406:	9c 93       	st	X, r25
 408:	8e 93       	st	-X, r24
	myNode->previous = previous;
 40a:	15 96       	adiw	r26, 0x05	; 5
 40c:	1c 92       	st	X, r1
 40e:	1e 92       	st	-X, r1
 410:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 412:	13 96       	adiw	r26, 0x03	; 3
 414:	1c 92       	st	X, r1
 416:	1e 92       	st	-X, r1
 418:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 41a:	17 96       	adiw	r26, 0x07	; 7
 41c:	1c 92       	st	X, r1
 41e:	1e 92       	st	-X, r1
 420:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 422:	19 96       	adiw	r26, 0x09	; 9
 424:	3c 92       	st	X, r3
 426:	2e 92       	st	-X, r2
 428:	18 97       	sbiw	r26, 0x08	; 8
		
	
	menu_defineMenuEntries(credits,"Credits",NULL,options, developers, NULL);
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}
 42a:	26 96       	adiw	r28, 0x06	; 6
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	de bf       	out	0x3e, r29	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	cd bf       	out	0x3d, r28	; 61
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	df 90       	pop	r13
 444:	cf 90       	pop	r12
 446:	bf 90       	pop	r11
 448:	af 90       	pop	r10
 44a:	9f 90       	pop	r9
 44c:	8f 90       	pop	r8
 44e:	7f 90       	pop	r7
 450:	6f 90       	pop	r6
 452:	5f 90       	pop	r5
 454:	4f 90       	pop	r4
 456:	3f 90       	pop	r3
 458:	2f 90       	pop	r2
 45a:	08 95       	ret

0000045c <oled_clear_screen>:
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	10 e0       	ldi	r17, 0x00	; 0
 464:	d0 e0       	ldi	r29, 0x00	; 0
 466:	81 2f       	mov	r24, r17
 468:	0e 94 98 02 	call	0x530	; 0x530 <sram_goto_page>
 46c:	cd 2f       	mov	r28, r29
 46e:	8c 2f       	mov	r24, r28
 470:	0e 94 9b 02 	call	0x536	; 0x536 <sram_goto_column>
 474:	8d 2f       	mov	r24, r29
 476:	0e 94 8b 02 	call	0x516	; 0x516 <sram_write_data>
 47a:	cf 5f       	subi	r28, 0xFF	; 255
 47c:	c0 38       	cpi	r28, 0x80	; 128
 47e:	b9 f7       	brne	.-18     	; 0x46e <oled_clear_screen+0x12>
 480:	1f 5f       	subi	r17, 0xFF	; 255
 482:	18 30       	cpi	r17, 0x08	; 8
 484:	81 f7       	brne	.-32     	; 0x466 <oled_clear_screen+0xa>
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	08 95       	ret

0000048e <oled_init>:
 48e:	e0 e0       	ldi	r30, 0x00	; 0
 490:	f0 e1       	ldi	r31, 0x10	; 16
 492:	8e ea       	ldi	r24, 0xAE	; 174
 494:	80 83       	st	Z, r24
 496:	81 ea       	ldi	r24, 0xA1	; 161
 498:	80 83       	st	Z, r24
 49a:	8a ed       	ldi	r24, 0xDA	; 218
 49c:	80 83       	st	Z, r24
 49e:	82 e1       	ldi	r24, 0x12	; 18
 4a0:	80 83       	st	Z, r24
 4a2:	88 ec       	ldi	r24, 0xC8	; 200
 4a4:	80 83       	st	Z, r24
 4a6:	88 ea       	ldi	r24, 0xA8	; 168
 4a8:	80 83       	st	Z, r24
 4aa:	8f e3       	ldi	r24, 0x3F	; 63
 4ac:	80 83       	st	Z, r24
 4ae:	85 ed       	ldi	r24, 0xD5	; 213
 4b0:	80 83       	st	Z, r24
 4b2:	80 e8       	ldi	r24, 0x80	; 128
 4b4:	80 83       	st	Z, r24
 4b6:	81 e8       	ldi	r24, 0x81	; 129
 4b8:	80 83       	st	Z, r24
 4ba:	80 e5       	ldi	r24, 0x50	; 80
 4bc:	80 83       	st	Z, r24
 4be:	89 ed       	ldi	r24, 0xD9	; 217
 4c0:	80 83       	st	Z, r24
 4c2:	81 e2       	ldi	r24, 0x21	; 33
 4c4:	80 83       	st	Z, r24
 4c6:	80 e2       	ldi	r24, 0x20	; 32
 4c8:	80 83       	st	Z, r24
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	80 83       	st	Z, r24
 4ce:	8b ed       	ldi	r24, 0xDB	; 219
 4d0:	80 83       	st	Z, r24
 4d2:	80 e3       	ldi	r24, 0x30	; 48
 4d4:	80 83       	st	Z, r24
 4d6:	8d ea       	ldi	r24, 0xAD	; 173
 4d8:	80 83       	st	Z, r24
 4da:	10 82       	st	Z, r1
 4dc:	84 ea       	ldi	r24, 0xA4	; 164
 4de:	80 83       	st	Z, r24
 4e0:	86 ea       	ldi	r24, 0xA6	; 166
 4e2:	80 83       	st	Z, r24
 4e4:	8f ea       	ldi	r24, 0xAF	; 175
 4e6:	80 83       	st	Z, r24
 4e8:	10 92 5e 02 	sts	0x025E, r1
 4ec:	10 92 5f 02 	sts	0x025F, r1
 4f0:	08 95       	ret

000004f2 <spi_init>:
 #define set_bit( reg, bit ) (reg |= (1 << bit))
 #define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void spi_init(void){
    /* Set MOSI and SCK output, all others input */
    DDRB |= (1<<DDB5)|(1<<DDB7);
 4f2:	87 b3       	in	r24, 0x17	; 23
 4f4:	80 6a       	ori	r24, 0xA0	; 160
 4f6:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << DDB6);
 4f8:	be 98       	cbi	0x17, 6	; 23
    /* Enable SPI, Master, set clock rate fck/2 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X);
 4fa:	81 e5       	ldi	r24, 0x51	; 81
 4fc:	8d b9       	out	0x0d, r24	; 13
	
	set_bit(DDRB,DDB4); //Setter PB4 til write/output
 4fe:	bc 9a       	sbi	0x17, 4	; 23
	set_bit(PORTB, PB4);
 500:	c4 9a       	sbi	0x18, 4	; 24
 502:	08 95       	ret

00000504 <spi_MasterTransmit>:

//Med denne må vi sette SS lav/høy før/etter mastertransmit starter/slutter
void spi_MasterTransmit(char cData) { //keepLow holds the SS* signal low so the transmission continues
	
	/* Start transmission */
	SPDR = cData;
 504:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete. Interrupt flag in SPSR is set (SPIF). */
	while(!(SPSR & (1<<SPIF)));
 506:	77 9b       	sbis	0x0e, 7	; 14
 508:	fe cf       	rjmp	.-4      	; 0x506 <spi_MasterTransmit+0x2>
	
	
}
 50a:	08 95       	ret

0000050c <spi_MasterRead>:

//Trenger ikke denne, fordi MasterTransmitAndReceive gjør det samme
uint8_t spi_MasterRead(){
	//Setter SS lav utenfor funksjonen, altså setter vi SS lav inni mcp2515_read

	spi_MasterTransmit(0x00);
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 82 02 	call	0x504	; 0x504 <spi_MasterTransmit>
	
	//Setter SS høy utenfor funksjonen, altså setter vi SS høy igjen inni mcp2515_read

	return SPDR;
 512:	8f b1       	in	r24, 0x0f	; 15
	
}
 514:	08 95       	ret

00000516 <sram_write_data>:
	printf("SRAM test completed with \n%4d errors in write phase and \n %4d errors in retrieval phase \n\n", write_errors, retrieval_errors);
}

void sram_write_data(uint8_t data){
    volatile char *ext_sram = (char *) (0x1800);
    ext_sram[128*PAGE+COL] = data;
 516:	90 91 5e 02 	lds	r25, 0x025E
 51a:	e0 91 5f 02 	lds	r30, 0x025F
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	20 e8       	ldi	r18, 0x80	; 128
 522:	92 9f       	mul	r25, r18
 524:	e0 0d       	add	r30, r0
 526:	f1 1d       	adc	r31, r1
 528:	11 24       	eor	r1, r1
 52a:	f8 5e       	subi	r31, 0xE8	; 232
 52c:	80 83       	st	Z, r24
 52e:	08 95       	ret

00000530 <sram_goto_page>:
}

void sram_goto_page(uint8_t newPage){
	PAGE = newPage;
 530:	80 93 5e 02 	sts	0x025E, r24
 534:	08 95       	ret

00000536 <sram_goto_column>:
}

void sram_goto_column(uint8_t newColumn){
	COL = newColumn;
 536:	80 93 5f 02 	sts	0x025F, r24
 53a:	08 95       	ret

0000053c <USART_Transmit>:
 53c:	5d 9b       	sbis	0x0b, 5	; 11
 53e:	fe cf       	rjmp	.-4      	; 0x53c <USART_Transmit>
 540:	8c b9       	out	0x0c, r24	; 12
 542:	08 95       	ret

00000544 <USART_Receive>:
 544:	5f 9b       	sbis	0x0b, 7	; 11
 546:	fe cf       	rjmp	.-4      	; 0x544 <USART_Receive>
 548:	8c b1       	in	r24, 0x0c	; 12
 54a:	08 95       	ret

0000054c <USART_Init>:
 54c:	90 bd       	out	0x20, r25	; 32
 54e:	89 b9       	out	0x09, r24	; 9
 550:	88 e1       	ldi	r24, 0x18	; 24
 552:	8a b9       	out	0x0a, r24	; 10
 554:	62 ea       	ldi	r22, 0xA2	; 162
 556:	72 e0       	ldi	r23, 0x02	; 2
 558:	8e e9       	ldi	r24, 0x9E	; 158
 55a:	92 e0       	ldi	r25, 0x02	; 2
 55c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <fdevopen>
 560:	08 95       	ret

00000562 <malloc>:
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	82 30       	cpi	r24, 0x02	; 2
 568:	91 05       	cpc	r25, r1
 56a:	10 f4       	brcc	.+4      	; 0x570 <malloc+0xe>
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	e0 91 62 02 	lds	r30, 0x0262
 574:	f0 91 63 02 	lds	r31, 0x0263
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	a0 e0       	ldi	r26, 0x00	; 0
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	30 97       	sbiw	r30, 0x00	; 0
 582:	39 f1       	breq	.+78     	; 0x5d2 <malloc+0x70>
 584:	40 81       	ld	r20, Z
 586:	51 81       	ldd	r21, Z+1	; 0x01
 588:	48 17       	cp	r20, r24
 58a:	59 07       	cpc	r21, r25
 58c:	b8 f0       	brcs	.+46     	; 0x5bc <malloc+0x5a>
 58e:	48 17       	cp	r20, r24
 590:	59 07       	cpc	r21, r25
 592:	71 f4       	brne	.+28     	; 0x5b0 <malloc+0x4e>
 594:	82 81       	ldd	r24, Z+2	; 0x02
 596:	93 81       	ldd	r25, Z+3	; 0x03
 598:	10 97       	sbiw	r26, 0x00	; 0
 59a:	29 f0       	breq	.+10     	; 0x5a6 <malloc+0x44>
 59c:	13 96       	adiw	r26, 0x03	; 3
 59e:	9c 93       	st	X, r25
 5a0:	8e 93       	st	-X, r24
 5a2:	12 97       	sbiw	r26, 0x02	; 2
 5a4:	2c c0       	rjmp	.+88     	; 0x5fe <malloc+0x9c>
 5a6:	90 93 63 02 	sts	0x0263, r25
 5aa:	80 93 62 02 	sts	0x0262, r24
 5ae:	27 c0       	rjmp	.+78     	; 0x5fe <malloc+0x9c>
 5b0:	21 15       	cp	r18, r1
 5b2:	31 05       	cpc	r19, r1
 5b4:	31 f0       	breq	.+12     	; 0x5c2 <malloc+0x60>
 5b6:	42 17       	cp	r20, r18
 5b8:	53 07       	cpc	r21, r19
 5ba:	18 f0       	brcs	.+6      	; 0x5c2 <malloc+0x60>
 5bc:	a9 01       	movw	r20, r18
 5be:	db 01       	movw	r26, r22
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <malloc+0x62>
 5c2:	ef 01       	movw	r28, r30
 5c4:	9a 01       	movw	r18, r20
 5c6:	bd 01       	movw	r22, r26
 5c8:	df 01       	movw	r26, r30
 5ca:	02 80       	ldd	r0, Z+2	; 0x02
 5cc:	f3 81       	ldd	r31, Z+3	; 0x03
 5ce:	e0 2d       	mov	r30, r0
 5d0:	d7 cf       	rjmp	.-82     	; 0x580 <malloc+0x1e>
 5d2:	21 15       	cp	r18, r1
 5d4:	31 05       	cpc	r19, r1
 5d6:	f9 f0       	breq	.+62     	; 0x616 <malloc+0xb4>
 5d8:	28 1b       	sub	r18, r24
 5da:	39 0b       	sbc	r19, r25
 5dc:	24 30       	cpi	r18, 0x04	; 4
 5de:	31 05       	cpc	r19, r1
 5e0:	80 f4       	brcc	.+32     	; 0x602 <malloc+0xa0>
 5e2:	8a 81       	ldd	r24, Y+2	; 0x02
 5e4:	9b 81       	ldd	r25, Y+3	; 0x03
 5e6:	61 15       	cp	r22, r1
 5e8:	71 05       	cpc	r23, r1
 5ea:	21 f0       	breq	.+8      	; 0x5f4 <malloc+0x92>
 5ec:	fb 01       	movw	r30, r22
 5ee:	93 83       	std	Z+3, r25	; 0x03
 5f0:	82 83       	std	Z+2, r24	; 0x02
 5f2:	04 c0       	rjmp	.+8      	; 0x5fc <malloc+0x9a>
 5f4:	90 93 63 02 	sts	0x0263, r25
 5f8:	80 93 62 02 	sts	0x0262, r24
 5fc:	fe 01       	movw	r30, r28
 5fe:	32 96       	adiw	r30, 0x02	; 2
 600:	44 c0       	rjmp	.+136    	; 0x68a <malloc+0x128>
 602:	fe 01       	movw	r30, r28
 604:	e2 0f       	add	r30, r18
 606:	f3 1f       	adc	r31, r19
 608:	81 93       	st	Z+, r24
 60a:	91 93       	st	Z+, r25
 60c:	22 50       	subi	r18, 0x02	; 2
 60e:	31 09       	sbc	r19, r1
 610:	39 83       	std	Y+1, r19	; 0x01
 612:	28 83       	st	Y, r18
 614:	3a c0       	rjmp	.+116    	; 0x68a <malloc+0x128>
 616:	20 91 60 02 	lds	r18, 0x0260
 61a:	30 91 61 02 	lds	r19, 0x0261
 61e:	23 2b       	or	r18, r19
 620:	41 f4       	brne	.+16     	; 0x632 <malloc+0xd0>
 622:	20 91 02 01 	lds	r18, 0x0102
 626:	30 91 03 01 	lds	r19, 0x0103
 62a:	30 93 61 02 	sts	0x0261, r19
 62e:	20 93 60 02 	sts	0x0260, r18
 632:	20 91 00 01 	lds	r18, 0x0100
 636:	30 91 01 01 	lds	r19, 0x0101
 63a:	21 15       	cp	r18, r1
 63c:	31 05       	cpc	r19, r1
 63e:	41 f4       	brne	.+16     	; 0x650 <malloc+0xee>
 640:	2d b7       	in	r18, 0x3d	; 61
 642:	3e b7       	in	r19, 0x3e	; 62
 644:	40 91 04 01 	lds	r20, 0x0104
 648:	50 91 05 01 	lds	r21, 0x0105
 64c:	24 1b       	sub	r18, r20
 64e:	35 0b       	sbc	r19, r21
 650:	e0 91 60 02 	lds	r30, 0x0260
 654:	f0 91 61 02 	lds	r31, 0x0261
 658:	e2 17       	cp	r30, r18
 65a:	f3 07       	cpc	r31, r19
 65c:	a0 f4       	brcc	.+40     	; 0x686 <malloc+0x124>
 65e:	2e 1b       	sub	r18, r30
 660:	3f 0b       	sbc	r19, r31
 662:	28 17       	cp	r18, r24
 664:	39 07       	cpc	r19, r25
 666:	78 f0       	brcs	.+30     	; 0x686 <malloc+0x124>
 668:	ac 01       	movw	r20, r24
 66a:	4e 5f       	subi	r20, 0xFE	; 254
 66c:	5f 4f       	sbci	r21, 0xFF	; 255
 66e:	24 17       	cp	r18, r20
 670:	35 07       	cpc	r19, r21
 672:	48 f0       	brcs	.+18     	; 0x686 <malloc+0x124>
 674:	4e 0f       	add	r20, r30
 676:	5f 1f       	adc	r21, r31
 678:	50 93 61 02 	sts	0x0261, r21
 67c:	40 93 60 02 	sts	0x0260, r20
 680:	81 93       	st	Z+, r24
 682:	91 93       	st	Z+, r25
 684:	02 c0       	rjmp	.+4      	; 0x68a <malloc+0x128>
 686:	e0 e0       	ldi	r30, 0x00	; 0
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	cf 01       	movw	r24, r30
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	08 95       	ret

00000692 <free>:
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	00 97       	sbiw	r24, 0x00	; 0
 698:	09 f4       	brne	.+2      	; 0x69c <free+0xa>
 69a:	87 c0       	rjmp	.+270    	; 0x7aa <free+0x118>
 69c:	fc 01       	movw	r30, r24
 69e:	32 97       	sbiw	r30, 0x02	; 2
 6a0:	13 82       	std	Z+3, r1	; 0x03
 6a2:	12 82       	std	Z+2, r1	; 0x02
 6a4:	c0 91 62 02 	lds	r28, 0x0262
 6a8:	d0 91 63 02 	lds	r29, 0x0263
 6ac:	20 97       	sbiw	r28, 0x00	; 0
 6ae:	81 f4       	brne	.+32     	; 0x6d0 <free+0x3e>
 6b0:	20 81       	ld	r18, Z
 6b2:	31 81       	ldd	r19, Z+1	; 0x01
 6b4:	28 0f       	add	r18, r24
 6b6:	39 1f       	adc	r19, r25
 6b8:	80 91 60 02 	lds	r24, 0x0260
 6bc:	90 91 61 02 	lds	r25, 0x0261
 6c0:	82 17       	cp	r24, r18
 6c2:	93 07       	cpc	r25, r19
 6c4:	79 f5       	brne	.+94     	; 0x724 <free+0x92>
 6c6:	f0 93 61 02 	sts	0x0261, r31
 6ca:	e0 93 60 02 	sts	0x0260, r30
 6ce:	6d c0       	rjmp	.+218    	; 0x7aa <free+0x118>
 6d0:	de 01       	movw	r26, r28
 6d2:	20 e0       	ldi	r18, 0x00	; 0
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	ae 17       	cp	r26, r30
 6d8:	bf 07       	cpc	r27, r31
 6da:	50 f4       	brcc	.+20     	; 0x6f0 <free+0x5e>
 6dc:	12 96       	adiw	r26, 0x02	; 2
 6de:	4d 91       	ld	r20, X+
 6e0:	5c 91       	ld	r21, X
 6e2:	13 97       	sbiw	r26, 0x03	; 3
 6e4:	9d 01       	movw	r18, r26
 6e6:	41 15       	cp	r20, r1
 6e8:	51 05       	cpc	r21, r1
 6ea:	09 f1       	breq	.+66     	; 0x72e <free+0x9c>
 6ec:	da 01       	movw	r26, r20
 6ee:	f3 cf       	rjmp	.-26     	; 0x6d6 <free+0x44>
 6f0:	b3 83       	std	Z+3, r27	; 0x03
 6f2:	a2 83       	std	Z+2, r26	; 0x02
 6f4:	40 81       	ld	r20, Z
 6f6:	51 81       	ldd	r21, Z+1	; 0x01
 6f8:	84 0f       	add	r24, r20
 6fa:	95 1f       	adc	r25, r21
 6fc:	8a 17       	cp	r24, r26
 6fe:	9b 07       	cpc	r25, r27
 700:	71 f4       	brne	.+28     	; 0x71e <free+0x8c>
 702:	8d 91       	ld	r24, X+
 704:	9c 91       	ld	r25, X
 706:	11 97       	sbiw	r26, 0x01	; 1
 708:	84 0f       	add	r24, r20
 70a:	95 1f       	adc	r25, r21
 70c:	02 96       	adiw	r24, 0x02	; 2
 70e:	91 83       	std	Z+1, r25	; 0x01
 710:	80 83       	st	Z, r24
 712:	12 96       	adiw	r26, 0x02	; 2
 714:	8d 91       	ld	r24, X+
 716:	9c 91       	ld	r25, X
 718:	13 97       	sbiw	r26, 0x03	; 3
 71a:	93 83       	std	Z+3, r25	; 0x03
 71c:	82 83       	std	Z+2, r24	; 0x02
 71e:	21 15       	cp	r18, r1
 720:	31 05       	cpc	r19, r1
 722:	29 f4       	brne	.+10     	; 0x72e <free+0x9c>
 724:	f0 93 63 02 	sts	0x0263, r31
 728:	e0 93 62 02 	sts	0x0262, r30
 72c:	3e c0       	rjmp	.+124    	; 0x7aa <free+0x118>
 72e:	d9 01       	movw	r26, r18
 730:	13 96       	adiw	r26, 0x03	; 3
 732:	fc 93       	st	X, r31
 734:	ee 93       	st	-X, r30
 736:	12 97       	sbiw	r26, 0x02	; 2
 738:	4d 91       	ld	r20, X+
 73a:	5d 91       	ld	r21, X+
 73c:	a4 0f       	add	r26, r20
 73e:	b5 1f       	adc	r27, r21
 740:	ea 17       	cp	r30, r26
 742:	fb 07       	cpc	r31, r27
 744:	79 f4       	brne	.+30     	; 0x764 <free+0xd2>
 746:	80 81       	ld	r24, Z
 748:	91 81       	ldd	r25, Z+1	; 0x01
 74a:	84 0f       	add	r24, r20
 74c:	95 1f       	adc	r25, r21
 74e:	02 96       	adiw	r24, 0x02	; 2
 750:	d9 01       	movw	r26, r18
 752:	11 96       	adiw	r26, 0x01	; 1
 754:	9c 93       	st	X, r25
 756:	8e 93       	st	-X, r24
 758:	82 81       	ldd	r24, Z+2	; 0x02
 75a:	93 81       	ldd	r25, Z+3	; 0x03
 75c:	13 96       	adiw	r26, 0x03	; 3
 75e:	9c 93       	st	X, r25
 760:	8e 93       	st	-X, r24
 762:	12 97       	sbiw	r26, 0x02	; 2
 764:	e0 e0       	ldi	r30, 0x00	; 0
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	8a 81       	ldd	r24, Y+2	; 0x02
 76a:	9b 81       	ldd	r25, Y+3	; 0x03
 76c:	00 97       	sbiw	r24, 0x00	; 0
 76e:	19 f0       	breq	.+6      	; 0x776 <free+0xe4>
 770:	fe 01       	movw	r30, r28
 772:	ec 01       	movw	r28, r24
 774:	f9 cf       	rjmp	.-14     	; 0x768 <free+0xd6>
 776:	ce 01       	movw	r24, r28
 778:	02 96       	adiw	r24, 0x02	; 2
 77a:	28 81       	ld	r18, Y
 77c:	39 81       	ldd	r19, Y+1	; 0x01
 77e:	82 0f       	add	r24, r18
 780:	93 1f       	adc	r25, r19
 782:	20 91 60 02 	lds	r18, 0x0260
 786:	30 91 61 02 	lds	r19, 0x0261
 78a:	28 17       	cp	r18, r24
 78c:	39 07       	cpc	r19, r25
 78e:	69 f4       	brne	.+26     	; 0x7aa <free+0x118>
 790:	30 97       	sbiw	r30, 0x00	; 0
 792:	29 f4       	brne	.+10     	; 0x79e <free+0x10c>
 794:	10 92 63 02 	sts	0x0263, r1
 798:	10 92 62 02 	sts	0x0262, r1
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <free+0x110>
 79e:	13 82       	std	Z+3, r1	; 0x03
 7a0:	12 82       	std	Z+2, r1	; 0x02
 7a2:	d0 93 61 02 	sts	0x0261, r29
 7a6:	c0 93 60 02 	sts	0x0260, r28
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	08 95       	ret

000007b0 <fdevopen>:
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	ec 01       	movw	r28, r24
 7ba:	8b 01       	movw	r16, r22
 7bc:	00 97       	sbiw	r24, 0x00	; 0
 7be:	31 f4       	brne	.+12     	; 0x7cc <fdevopen+0x1c>
 7c0:	61 15       	cp	r22, r1
 7c2:	71 05       	cpc	r23, r1
 7c4:	19 f4       	brne	.+6      	; 0x7cc <fdevopen+0x1c>
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	38 c0       	rjmp	.+112    	; 0x83c <fdevopen+0x8c>
 7cc:	6e e0       	ldi	r22, 0x0E	; 14
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 36 06 	call	0xc6c	; 0xc6c <calloc>
 7d8:	fc 01       	movw	r30, r24
 7da:	00 97       	sbiw	r24, 0x00	; 0
 7dc:	a1 f3       	breq	.-24     	; 0x7c6 <fdevopen+0x16>
 7de:	80 e8       	ldi	r24, 0x80	; 128
 7e0:	83 83       	std	Z+3, r24	; 0x03
 7e2:	01 15       	cp	r16, r1
 7e4:	11 05       	cpc	r17, r1
 7e6:	71 f0       	breq	.+28     	; 0x804 <fdevopen+0x54>
 7e8:	13 87       	std	Z+11, r17	; 0x0b
 7ea:	02 87       	std	Z+10, r16	; 0x0a
 7ec:	81 e8       	ldi	r24, 0x81	; 129
 7ee:	83 83       	std	Z+3, r24	; 0x03
 7f0:	80 91 64 02 	lds	r24, 0x0264
 7f4:	90 91 65 02 	lds	r25, 0x0265
 7f8:	89 2b       	or	r24, r25
 7fa:	21 f4       	brne	.+8      	; 0x804 <fdevopen+0x54>
 7fc:	f0 93 65 02 	sts	0x0265, r31
 800:	e0 93 64 02 	sts	0x0264, r30
 804:	20 97       	sbiw	r28, 0x00	; 0
 806:	c9 f0       	breq	.+50     	; 0x83a <fdevopen+0x8a>
 808:	d1 87       	std	Z+9, r29	; 0x09
 80a:	c0 87       	std	Z+8, r28	; 0x08
 80c:	83 81       	ldd	r24, Z+3	; 0x03
 80e:	82 60       	ori	r24, 0x02	; 2
 810:	83 83       	std	Z+3, r24	; 0x03
 812:	80 91 66 02 	lds	r24, 0x0266
 816:	90 91 67 02 	lds	r25, 0x0267
 81a:	89 2b       	or	r24, r25
 81c:	71 f4       	brne	.+28     	; 0x83a <fdevopen+0x8a>
 81e:	f0 93 67 02 	sts	0x0267, r31
 822:	e0 93 66 02 	sts	0x0266, r30
 826:	80 91 68 02 	lds	r24, 0x0268
 82a:	90 91 69 02 	lds	r25, 0x0269
 82e:	89 2b       	or	r24, r25
 830:	21 f4       	brne	.+8      	; 0x83a <fdevopen+0x8a>
 832:	f0 93 69 02 	sts	0x0269, r31
 836:	e0 93 68 02 	sts	0x0268, r30
 83a:	cf 01       	movw	r24, r30
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	08 95       	ret

00000846 <printf>:
 846:	a0 e0       	ldi	r26, 0x00	; 0
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	e9 e2       	ldi	r30, 0x29	; 41
 84c:	f4 e0       	ldi	r31, 0x04	; 4
 84e:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__prologue_saves__+0x20>
 852:	fe 01       	movw	r30, r28
 854:	35 96       	adiw	r30, 0x05	; 5
 856:	61 91       	ld	r22, Z+
 858:	71 91       	ld	r23, Z+
 85a:	af 01       	movw	r20, r30
 85c:	80 91 66 02 	lds	r24, 0x0266
 860:	90 91 67 02 	lds	r25, 0x0267
 864:	0e 94 64 04 	call	0x8c8	; 0x8c8 <vfprintf>
 868:	e2 e0       	ldi	r30, 0x02	; 2
 86a:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__epilogue_restores__+0x20>

0000086e <puts>:
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	e0 91 66 02 	lds	r30, 0x0266
 87a:	f0 91 67 02 	lds	r31, 0x0267
 87e:	23 81       	ldd	r18, Z+3	; 0x03
 880:	21 ff       	sbrs	r18, 1
 882:	1b c0       	rjmp	.+54     	; 0x8ba <puts+0x4c>
 884:	ec 01       	movw	r28, r24
 886:	00 e0       	ldi	r16, 0x00	; 0
 888:	10 e0       	ldi	r17, 0x00	; 0
 88a:	89 91       	ld	r24, Y+
 88c:	60 91 66 02 	lds	r22, 0x0266
 890:	70 91 67 02 	lds	r23, 0x0267
 894:	db 01       	movw	r26, r22
 896:	18 96       	adiw	r26, 0x08	; 8
 898:	ed 91       	ld	r30, X+
 89a:	fc 91       	ld	r31, X
 89c:	19 97       	sbiw	r26, 0x09	; 9
 89e:	88 23       	and	r24, r24
 8a0:	31 f0       	breq	.+12     	; 0x8ae <puts+0x40>
 8a2:	09 95       	icall
 8a4:	89 2b       	or	r24, r25
 8a6:	89 f3       	breq	.-30     	; 0x88a <puts+0x1c>
 8a8:	0f ef       	ldi	r16, 0xFF	; 255
 8aa:	1f ef       	ldi	r17, 0xFF	; 255
 8ac:	ee cf       	rjmp	.-36     	; 0x88a <puts+0x1c>
 8ae:	8a e0       	ldi	r24, 0x0A	; 10
 8b0:	09 95       	icall
 8b2:	89 2b       	or	r24, r25
 8b4:	11 f4       	brne	.+4      	; 0x8ba <puts+0x4c>
 8b6:	c8 01       	movw	r24, r16
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <puts+0x50>
 8ba:	8f ef       	ldi	r24, 0xFF	; 255
 8bc:	9f ef       	ldi	r25, 0xFF	; 255
 8be:	df 91       	pop	r29
 8c0:	cf 91       	pop	r28
 8c2:	1f 91       	pop	r17
 8c4:	0f 91       	pop	r16
 8c6:	08 95       	ret

000008c8 <vfprintf>:
 8c8:	ac e0       	ldi	r26, 0x0C	; 12
 8ca:	b0 e0       	ldi	r27, 0x00	; 0
 8cc:	ea e6       	ldi	r30, 0x6A	; 106
 8ce:	f4 e0       	ldi	r31, 0x04	; 4
 8d0:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__prologue_saves__>
 8d4:	7c 01       	movw	r14, r24
 8d6:	6b 01       	movw	r12, r22
 8d8:	8a 01       	movw	r16, r20
 8da:	fc 01       	movw	r30, r24
 8dc:	17 82       	std	Z+7, r1	; 0x07
 8de:	16 82       	std	Z+6, r1	; 0x06
 8e0:	83 81       	ldd	r24, Z+3	; 0x03
 8e2:	81 ff       	sbrs	r24, 1
 8e4:	bd c1       	rjmp	.+890    	; 0xc60 <vfprintf+0x398>
 8e6:	ce 01       	movw	r24, r28
 8e8:	01 96       	adiw	r24, 0x01	; 1
 8ea:	4c 01       	movw	r8, r24
 8ec:	f7 01       	movw	r30, r14
 8ee:	93 81       	ldd	r25, Z+3	; 0x03
 8f0:	f6 01       	movw	r30, r12
 8f2:	93 fd       	sbrc	r25, 3
 8f4:	85 91       	lpm	r24, Z+
 8f6:	93 ff       	sbrs	r25, 3
 8f8:	81 91       	ld	r24, Z+
 8fa:	6f 01       	movw	r12, r30
 8fc:	88 23       	and	r24, r24
 8fe:	09 f4       	brne	.+2      	; 0x902 <vfprintf+0x3a>
 900:	ab c1       	rjmp	.+854    	; 0xc58 <vfprintf+0x390>
 902:	85 32       	cpi	r24, 0x25	; 37
 904:	39 f4       	brne	.+14     	; 0x914 <vfprintf+0x4c>
 906:	93 fd       	sbrc	r25, 3
 908:	85 91       	lpm	r24, Z+
 90a:	93 ff       	sbrs	r25, 3
 90c:	81 91       	ld	r24, Z+
 90e:	6f 01       	movw	r12, r30
 910:	85 32       	cpi	r24, 0x25	; 37
 912:	29 f4       	brne	.+10     	; 0x91e <vfprintf+0x56>
 914:	b7 01       	movw	r22, r14
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 91c:	e7 cf       	rjmp	.-50     	; 0x8ec <vfprintf+0x24>
 91e:	51 2c       	mov	r5, r1
 920:	31 2c       	mov	r3, r1
 922:	20 e0       	ldi	r18, 0x00	; 0
 924:	20 32       	cpi	r18, 0x20	; 32
 926:	a0 f4       	brcc	.+40     	; 0x950 <vfprintf+0x88>
 928:	8b 32       	cpi	r24, 0x2B	; 43
 92a:	69 f0       	breq	.+26     	; 0x946 <vfprintf+0x7e>
 92c:	30 f4       	brcc	.+12     	; 0x93a <vfprintf+0x72>
 92e:	80 32       	cpi	r24, 0x20	; 32
 930:	59 f0       	breq	.+22     	; 0x948 <vfprintf+0x80>
 932:	83 32       	cpi	r24, 0x23	; 35
 934:	69 f4       	brne	.+26     	; 0x950 <vfprintf+0x88>
 936:	20 61       	ori	r18, 0x10	; 16
 938:	2c c0       	rjmp	.+88     	; 0x992 <vfprintf+0xca>
 93a:	8d 32       	cpi	r24, 0x2D	; 45
 93c:	39 f0       	breq	.+14     	; 0x94c <vfprintf+0x84>
 93e:	80 33       	cpi	r24, 0x30	; 48
 940:	39 f4       	brne	.+14     	; 0x950 <vfprintf+0x88>
 942:	21 60       	ori	r18, 0x01	; 1
 944:	26 c0       	rjmp	.+76     	; 0x992 <vfprintf+0xca>
 946:	22 60       	ori	r18, 0x02	; 2
 948:	24 60       	ori	r18, 0x04	; 4
 94a:	23 c0       	rjmp	.+70     	; 0x992 <vfprintf+0xca>
 94c:	28 60       	ori	r18, 0x08	; 8
 94e:	21 c0       	rjmp	.+66     	; 0x992 <vfprintf+0xca>
 950:	27 fd       	sbrc	r18, 7
 952:	27 c0       	rjmp	.+78     	; 0x9a2 <vfprintf+0xda>
 954:	30 ed       	ldi	r19, 0xD0	; 208
 956:	38 0f       	add	r19, r24
 958:	3a 30       	cpi	r19, 0x0A	; 10
 95a:	78 f4       	brcc	.+30     	; 0x97a <vfprintf+0xb2>
 95c:	26 ff       	sbrs	r18, 6
 95e:	06 c0       	rjmp	.+12     	; 0x96c <vfprintf+0xa4>
 960:	fa e0       	ldi	r31, 0x0A	; 10
 962:	5f 9e       	mul	r5, r31
 964:	30 0d       	add	r19, r0
 966:	11 24       	eor	r1, r1
 968:	53 2e       	mov	r5, r19
 96a:	13 c0       	rjmp	.+38     	; 0x992 <vfprintf+0xca>
 96c:	8a e0       	ldi	r24, 0x0A	; 10
 96e:	38 9e       	mul	r3, r24
 970:	30 0d       	add	r19, r0
 972:	11 24       	eor	r1, r1
 974:	33 2e       	mov	r3, r19
 976:	20 62       	ori	r18, 0x20	; 32
 978:	0c c0       	rjmp	.+24     	; 0x992 <vfprintf+0xca>
 97a:	8e 32       	cpi	r24, 0x2E	; 46
 97c:	21 f4       	brne	.+8      	; 0x986 <vfprintf+0xbe>
 97e:	26 fd       	sbrc	r18, 6
 980:	6b c1       	rjmp	.+726    	; 0xc58 <vfprintf+0x390>
 982:	20 64       	ori	r18, 0x40	; 64
 984:	06 c0       	rjmp	.+12     	; 0x992 <vfprintf+0xca>
 986:	8c 36       	cpi	r24, 0x6C	; 108
 988:	11 f4       	brne	.+4      	; 0x98e <vfprintf+0xc6>
 98a:	20 68       	ori	r18, 0x80	; 128
 98c:	02 c0       	rjmp	.+4      	; 0x992 <vfprintf+0xca>
 98e:	88 36       	cpi	r24, 0x68	; 104
 990:	41 f4       	brne	.+16     	; 0x9a2 <vfprintf+0xda>
 992:	f6 01       	movw	r30, r12
 994:	93 fd       	sbrc	r25, 3
 996:	85 91       	lpm	r24, Z+
 998:	93 ff       	sbrs	r25, 3
 99a:	81 91       	ld	r24, Z+
 99c:	6f 01       	movw	r12, r30
 99e:	81 11       	cpse	r24, r1
 9a0:	c1 cf       	rjmp	.-126    	; 0x924 <vfprintf+0x5c>
 9a2:	98 2f       	mov	r25, r24
 9a4:	9f 7d       	andi	r25, 0xDF	; 223
 9a6:	95 54       	subi	r25, 0x45	; 69
 9a8:	93 30       	cpi	r25, 0x03	; 3
 9aa:	28 f4       	brcc	.+10     	; 0x9b6 <vfprintf+0xee>
 9ac:	0c 5f       	subi	r16, 0xFC	; 252
 9ae:	1f 4f       	sbci	r17, 0xFF	; 255
 9b0:	ff e3       	ldi	r31, 0x3F	; 63
 9b2:	f9 83       	std	Y+1, r31	; 0x01
 9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <vfprintf+0x108>
 9b6:	83 36       	cpi	r24, 0x63	; 99
 9b8:	31 f0       	breq	.+12     	; 0x9c6 <vfprintf+0xfe>
 9ba:	83 37       	cpi	r24, 0x73	; 115
 9bc:	71 f0       	breq	.+28     	; 0x9da <vfprintf+0x112>
 9be:	83 35       	cpi	r24, 0x53	; 83
 9c0:	09 f0       	breq	.+2      	; 0x9c4 <vfprintf+0xfc>
 9c2:	5b c0       	rjmp	.+182    	; 0xa7a <vfprintf+0x1b2>
 9c4:	22 c0       	rjmp	.+68     	; 0xa0a <vfprintf+0x142>
 9c6:	f8 01       	movw	r30, r16
 9c8:	80 81       	ld	r24, Z
 9ca:	89 83       	std	Y+1, r24	; 0x01
 9cc:	0e 5f       	subi	r16, 0xFE	; 254
 9ce:	1f 4f       	sbci	r17, 0xFF	; 255
 9d0:	44 24       	eor	r4, r4
 9d2:	43 94       	inc	r4
 9d4:	51 2c       	mov	r5, r1
 9d6:	54 01       	movw	r10, r8
 9d8:	15 c0       	rjmp	.+42     	; 0xa04 <vfprintf+0x13c>
 9da:	38 01       	movw	r6, r16
 9dc:	f2 e0       	ldi	r31, 0x02	; 2
 9de:	6f 0e       	add	r6, r31
 9e0:	71 1c       	adc	r7, r1
 9e2:	f8 01       	movw	r30, r16
 9e4:	a0 80       	ld	r10, Z
 9e6:	b1 80       	ldd	r11, Z+1	; 0x01
 9e8:	26 ff       	sbrs	r18, 6
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <vfprintf+0x12a>
 9ec:	65 2d       	mov	r22, r5
 9ee:	70 e0       	ldi	r23, 0x00	; 0
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <vfprintf+0x12e>
 9f2:	6f ef       	ldi	r22, 0xFF	; 255
 9f4:	7f ef       	ldi	r23, 0xFF	; 255
 9f6:	c5 01       	movw	r24, r10
 9f8:	2c 87       	std	Y+12, r18	; 0x0c
 9fa:	0e 94 64 06 	call	0xcc8	; 0xcc8 <strnlen>
 9fe:	2c 01       	movw	r4, r24
 a00:	83 01       	movw	r16, r6
 a02:	2c 85       	ldd	r18, Y+12	; 0x0c
 a04:	2f 77       	andi	r18, 0x7F	; 127
 a06:	22 2e       	mov	r2, r18
 a08:	17 c0       	rjmp	.+46     	; 0xa38 <vfprintf+0x170>
 a0a:	38 01       	movw	r6, r16
 a0c:	f2 e0       	ldi	r31, 0x02	; 2
 a0e:	6f 0e       	add	r6, r31
 a10:	71 1c       	adc	r7, r1
 a12:	f8 01       	movw	r30, r16
 a14:	a0 80       	ld	r10, Z
 a16:	b1 80       	ldd	r11, Z+1	; 0x01
 a18:	26 ff       	sbrs	r18, 6
 a1a:	03 c0       	rjmp	.+6      	; 0xa22 <vfprintf+0x15a>
 a1c:	65 2d       	mov	r22, r5
 a1e:	70 e0       	ldi	r23, 0x00	; 0
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <vfprintf+0x15e>
 a22:	6f ef       	ldi	r22, 0xFF	; 255
 a24:	7f ef       	ldi	r23, 0xFF	; 255
 a26:	c5 01       	movw	r24, r10
 a28:	2c 87       	std	Y+12, r18	; 0x0c
 a2a:	0e 94 52 06 	call	0xca4	; 0xca4 <strnlen_P>
 a2e:	2c 01       	movw	r4, r24
 a30:	2c 85       	ldd	r18, Y+12	; 0x0c
 a32:	20 68       	ori	r18, 0x80	; 128
 a34:	22 2e       	mov	r2, r18
 a36:	83 01       	movw	r16, r6
 a38:	23 fc       	sbrc	r2, 3
 a3a:	1b c0       	rjmp	.+54     	; 0xa72 <vfprintf+0x1aa>
 a3c:	83 2d       	mov	r24, r3
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	48 16       	cp	r4, r24
 a42:	59 06       	cpc	r5, r25
 a44:	b0 f4       	brcc	.+44     	; 0xa72 <vfprintf+0x1aa>
 a46:	b7 01       	movw	r22, r14
 a48:	80 e2       	ldi	r24, 0x20	; 32
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 a50:	3a 94       	dec	r3
 a52:	f4 cf       	rjmp	.-24     	; 0xa3c <vfprintf+0x174>
 a54:	f5 01       	movw	r30, r10
 a56:	27 fc       	sbrc	r2, 7
 a58:	85 91       	lpm	r24, Z+
 a5a:	27 fe       	sbrs	r2, 7
 a5c:	81 91       	ld	r24, Z+
 a5e:	5f 01       	movw	r10, r30
 a60:	b7 01       	movw	r22, r14
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 a68:	31 10       	cpse	r3, r1
 a6a:	3a 94       	dec	r3
 a6c:	f1 e0       	ldi	r31, 0x01	; 1
 a6e:	4f 1a       	sub	r4, r31
 a70:	51 08       	sbc	r5, r1
 a72:	41 14       	cp	r4, r1
 a74:	51 04       	cpc	r5, r1
 a76:	71 f7       	brne	.-36     	; 0xa54 <vfprintf+0x18c>
 a78:	e5 c0       	rjmp	.+458    	; 0xc44 <vfprintf+0x37c>
 a7a:	84 36       	cpi	r24, 0x64	; 100
 a7c:	11 f0       	breq	.+4      	; 0xa82 <vfprintf+0x1ba>
 a7e:	89 36       	cpi	r24, 0x69	; 105
 a80:	39 f5       	brne	.+78     	; 0xad0 <vfprintf+0x208>
 a82:	f8 01       	movw	r30, r16
 a84:	27 ff       	sbrs	r18, 7
 a86:	07 c0       	rjmp	.+14     	; 0xa96 <vfprintf+0x1ce>
 a88:	60 81       	ld	r22, Z
 a8a:	71 81       	ldd	r23, Z+1	; 0x01
 a8c:	82 81       	ldd	r24, Z+2	; 0x02
 a8e:	93 81       	ldd	r25, Z+3	; 0x03
 a90:	0c 5f       	subi	r16, 0xFC	; 252
 a92:	1f 4f       	sbci	r17, 0xFF	; 255
 a94:	08 c0       	rjmp	.+16     	; 0xaa6 <vfprintf+0x1de>
 a96:	60 81       	ld	r22, Z
 a98:	71 81       	ldd	r23, Z+1	; 0x01
 a9a:	88 27       	eor	r24, r24
 a9c:	77 fd       	sbrc	r23, 7
 a9e:	80 95       	com	r24
 aa0:	98 2f       	mov	r25, r24
 aa2:	0e 5f       	subi	r16, 0xFE	; 254
 aa4:	1f 4f       	sbci	r17, 0xFF	; 255
 aa6:	2f 76       	andi	r18, 0x6F	; 111
 aa8:	b2 2e       	mov	r11, r18
 aaa:	97 ff       	sbrs	r25, 7
 aac:	09 c0       	rjmp	.+18     	; 0xac0 <vfprintf+0x1f8>
 aae:	90 95       	com	r25
 ab0:	80 95       	com	r24
 ab2:	70 95       	com	r23
 ab4:	61 95       	neg	r22
 ab6:	7f 4f       	sbci	r23, 0xFF	; 255
 ab8:	8f 4f       	sbci	r24, 0xFF	; 255
 aba:	9f 4f       	sbci	r25, 0xFF	; 255
 abc:	20 68       	ori	r18, 0x80	; 128
 abe:	b2 2e       	mov	r11, r18
 ac0:	2a e0       	ldi	r18, 0x0A	; 10
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	a4 01       	movw	r20, r8
 ac6:	0e 94 a1 06 	call	0xd42	; 0xd42 <__ultoa_invert>
 aca:	a8 2e       	mov	r10, r24
 acc:	a8 18       	sub	r10, r8
 ace:	44 c0       	rjmp	.+136    	; 0xb58 <vfprintf+0x290>
 ad0:	85 37       	cpi	r24, 0x75	; 117
 ad2:	29 f4       	brne	.+10     	; 0xade <vfprintf+0x216>
 ad4:	2f 7e       	andi	r18, 0xEF	; 239
 ad6:	b2 2e       	mov	r11, r18
 ad8:	2a e0       	ldi	r18, 0x0A	; 10
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	25 c0       	rjmp	.+74     	; 0xb28 <vfprintf+0x260>
 ade:	f2 2f       	mov	r31, r18
 ae0:	f9 7f       	andi	r31, 0xF9	; 249
 ae2:	bf 2e       	mov	r11, r31
 ae4:	8f 36       	cpi	r24, 0x6F	; 111
 ae6:	c1 f0       	breq	.+48     	; 0xb18 <vfprintf+0x250>
 ae8:	18 f4       	brcc	.+6      	; 0xaf0 <vfprintf+0x228>
 aea:	88 35       	cpi	r24, 0x58	; 88
 aec:	79 f0       	breq	.+30     	; 0xb0c <vfprintf+0x244>
 aee:	b4 c0       	rjmp	.+360    	; 0xc58 <vfprintf+0x390>
 af0:	80 37       	cpi	r24, 0x70	; 112
 af2:	19 f0       	breq	.+6      	; 0xafa <vfprintf+0x232>
 af4:	88 37       	cpi	r24, 0x78	; 120
 af6:	21 f0       	breq	.+8      	; 0xb00 <vfprintf+0x238>
 af8:	af c0       	rjmp	.+350    	; 0xc58 <vfprintf+0x390>
 afa:	2f 2f       	mov	r18, r31
 afc:	20 61       	ori	r18, 0x10	; 16
 afe:	b2 2e       	mov	r11, r18
 b00:	b4 fe       	sbrs	r11, 4
 b02:	0d c0       	rjmp	.+26     	; 0xb1e <vfprintf+0x256>
 b04:	8b 2d       	mov	r24, r11
 b06:	84 60       	ori	r24, 0x04	; 4
 b08:	b8 2e       	mov	r11, r24
 b0a:	09 c0       	rjmp	.+18     	; 0xb1e <vfprintf+0x256>
 b0c:	24 ff       	sbrs	r18, 4
 b0e:	0a c0       	rjmp	.+20     	; 0xb24 <vfprintf+0x25c>
 b10:	9f 2f       	mov	r25, r31
 b12:	96 60       	ori	r25, 0x06	; 6
 b14:	b9 2e       	mov	r11, r25
 b16:	06 c0       	rjmp	.+12     	; 0xb24 <vfprintf+0x25c>
 b18:	28 e0       	ldi	r18, 0x08	; 8
 b1a:	30 e0       	ldi	r19, 0x00	; 0
 b1c:	05 c0       	rjmp	.+10     	; 0xb28 <vfprintf+0x260>
 b1e:	20 e1       	ldi	r18, 0x10	; 16
 b20:	30 e0       	ldi	r19, 0x00	; 0
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <vfprintf+0x260>
 b24:	20 e1       	ldi	r18, 0x10	; 16
 b26:	32 e0       	ldi	r19, 0x02	; 2
 b28:	f8 01       	movw	r30, r16
 b2a:	b7 fe       	sbrs	r11, 7
 b2c:	07 c0       	rjmp	.+14     	; 0xb3c <vfprintf+0x274>
 b2e:	60 81       	ld	r22, Z
 b30:	71 81       	ldd	r23, Z+1	; 0x01
 b32:	82 81       	ldd	r24, Z+2	; 0x02
 b34:	93 81       	ldd	r25, Z+3	; 0x03
 b36:	0c 5f       	subi	r16, 0xFC	; 252
 b38:	1f 4f       	sbci	r17, 0xFF	; 255
 b3a:	06 c0       	rjmp	.+12     	; 0xb48 <vfprintf+0x280>
 b3c:	60 81       	ld	r22, Z
 b3e:	71 81       	ldd	r23, Z+1	; 0x01
 b40:	80 e0       	ldi	r24, 0x00	; 0
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	0e 5f       	subi	r16, 0xFE	; 254
 b46:	1f 4f       	sbci	r17, 0xFF	; 255
 b48:	a4 01       	movw	r20, r8
 b4a:	0e 94 a1 06 	call	0xd42	; 0xd42 <__ultoa_invert>
 b4e:	a8 2e       	mov	r10, r24
 b50:	a8 18       	sub	r10, r8
 b52:	fb 2d       	mov	r31, r11
 b54:	ff 77       	andi	r31, 0x7F	; 127
 b56:	bf 2e       	mov	r11, r31
 b58:	b6 fe       	sbrs	r11, 6
 b5a:	0b c0       	rjmp	.+22     	; 0xb72 <vfprintf+0x2aa>
 b5c:	2b 2d       	mov	r18, r11
 b5e:	2e 7f       	andi	r18, 0xFE	; 254
 b60:	a5 14       	cp	r10, r5
 b62:	50 f4       	brcc	.+20     	; 0xb78 <vfprintf+0x2b0>
 b64:	b4 fe       	sbrs	r11, 4
 b66:	0a c0       	rjmp	.+20     	; 0xb7c <vfprintf+0x2b4>
 b68:	b2 fc       	sbrc	r11, 2
 b6a:	08 c0       	rjmp	.+16     	; 0xb7c <vfprintf+0x2b4>
 b6c:	2b 2d       	mov	r18, r11
 b6e:	2e 7e       	andi	r18, 0xEE	; 238
 b70:	05 c0       	rjmp	.+10     	; 0xb7c <vfprintf+0x2b4>
 b72:	7a 2c       	mov	r7, r10
 b74:	2b 2d       	mov	r18, r11
 b76:	03 c0       	rjmp	.+6      	; 0xb7e <vfprintf+0x2b6>
 b78:	7a 2c       	mov	r7, r10
 b7a:	01 c0       	rjmp	.+2      	; 0xb7e <vfprintf+0x2b6>
 b7c:	75 2c       	mov	r7, r5
 b7e:	24 ff       	sbrs	r18, 4
 b80:	0d c0       	rjmp	.+26     	; 0xb9c <vfprintf+0x2d4>
 b82:	fe 01       	movw	r30, r28
 b84:	ea 0d       	add	r30, r10
 b86:	f1 1d       	adc	r31, r1
 b88:	80 81       	ld	r24, Z
 b8a:	80 33       	cpi	r24, 0x30	; 48
 b8c:	11 f4       	brne	.+4      	; 0xb92 <vfprintf+0x2ca>
 b8e:	29 7e       	andi	r18, 0xE9	; 233
 b90:	09 c0       	rjmp	.+18     	; 0xba4 <vfprintf+0x2dc>
 b92:	22 ff       	sbrs	r18, 2
 b94:	06 c0       	rjmp	.+12     	; 0xba2 <vfprintf+0x2da>
 b96:	73 94       	inc	r7
 b98:	73 94       	inc	r7
 b9a:	04 c0       	rjmp	.+8      	; 0xba4 <vfprintf+0x2dc>
 b9c:	82 2f       	mov	r24, r18
 b9e:	86 78       	andi	r24, 0x86	; 134
 ba0:	09 f0       	breq	.+2      	; 0xba4 <vfprintf+0x2dc>
 ba2:	73 94       	inc	r7
 ba4:	23 fd       	sbrc	r18, 3
 ba6:	13 c0       	rjmp	.+38     	; 0xbce <vfprintf+0x306>
 ba8:	20 ff       	sbrs	r18, 0
 baa:	06 c0       	rjmp	.+12     	; 0xbb8 <vfprintf+0x2f0>
 bac:	5a 2c       	mov	r5, r10
 bae:	73 14       	cp	r7, r3
 bb0:	18 f4       	brcc	.+6      	; 0xbb8 <vfprintf+0x2f0>
 bb2:	53 0c       	add	r5, r3
 bb4:	57 18       	sub	r5, r7
 bb6:	73 2c       	mov	r7, r3
 bb8:	73 14       	cp	r7, r3
 bba:	68 f4       	brcc	.+26     	; 0xbd6 <vfprintf+0x30e>
 bbc:	b7 01       	movw	r22, r14
 bbe:	80 e2       	ldi	r24, 0x20	; 32
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	2c 87       	std	Y+12, r18	; 0x0c
 bc4:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 bc8:	73 94       	inc	r7
 bca:	2c 85       	ldd	r18, Y+12	; 0x0c
 bcc:	f5 cf       	rjmp	.-22     	; 0xbb8 <vfprintf+0x2f0>
 bce:	73 14       	cp	r7, r3
 bd0:	10 f4       	brcc	.+4      	; 0xbd6 <vfprintf+0x30e>
 bd2:	37 18       	sub	r3, r7
 bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <vfprintf+0x310>
 bd6:	31 2c       	mov	r3, r1
 bd8:	24 ff       	sbrs	r18, 4
 bda:	12 c0       	rjmp	.+36     	; 0xc00 <vfprintf+0x338>
 bdc:	b7 01       	movw	r22, r14
 bde:	80 e3       	ldi	r24, 0x30	; 48
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	2c 87       	std	Y+12, r18	; 0x0c
 be4:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 be8:	2c 85       	ldd	r18, Y+12	; 0x0c
 bea:	22 ff       	sbrs	r18, 2
 bec:	17 c0       	rjmp	.+46     	; 0xc1c <vfprintf+0x354>
 bee:	21 ff       	sbrs	r18, 1
 bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <vfprintf+0x330>
 bf2:	88 e5       	ldi	r24, 0x58	; 88
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <vfprintf+0x334>
 bf8:	88 e7       	ldi	r24, 0x78	; 120
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	b7 01       	movw	r22, r14
 bfe:	0c c0       	rjmp	.+24     	; 0xc18 <vfprintf+0x350>
 c00:	82 2f       	mov	r24, r18
 c02:	86 78       	andi	r24, 0x86	; 134
 c04:	59 f0       	breq	.+22     	; 0xc1c <vfprintf+0x354>
 c06:	21 fd       	sbrc	r18, 1
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <vfprintf+0x346>
 c0a:	80 e2       	ldi	r24, 0x20	; 32
 c0c:	01 c0       	rjmp	.+2      	; 0xc10 <vfprintf+0x348>
 c0e:	8b e2       	ldi	r24, 0x2B	; 43
 c10:	27 fd       	sbrc	r18, 7
 c12:	8d e2       	ldi	r24, 0x2D	; 45
 c14:	b7 01       	movw	r22, r14
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c1c:	a5 14       	cp	r10, r5
 c1e:	38 f4       	brcc	.+14     	; 0xc2e <vfprintf+0x366>
 c20:	b7 01       	movw	r22, r14
 c22:	80 e3       	ldi	r24, 0x30	; 48
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c2a:	5a 94       	dec	r5
 c2c:	f7 cf       	rjmp	.-18     	; 0xc1c <vfprintf+0x354>
 c2e:	aa 94       	dec	r10
 c30:	f4 01       	movw	r30, r8
 c32:	ea 0d       	add	r30, r10
 c34:	f1 1d       	adc	r31, r1
 c36:	80 81       	ld	r24, Z
 c38:	b7 01       	movw	r22, r14
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c40:	a1 10       	cpse	r10, r1
 c42:	f5 cf       	rjmp	.-22     	; 0xc2e <vfprintf+0x366>
 c44:	33 20       	and	r3, r3
 c46:	09 f4       	brne	.+2      	; 0xc4a <vfprintf+0x382>
 c48:	51 ce       	rjmp	.-862    	; 0x8ec <vfprintf+0x24>
 c4a:	b7 01       	movw	r22, r14
 c4c:	80 e2       	ldi	r24, 0x20	; 32
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c54:	3a 94       	dec	r3
 c56:	f6 cf       	rjmp	.-20     	; 0xc44 <vfprintf+0x37c>
 c58:	f7 01       	movw	r30, r14
 c5a:	86 81       	ldd	r24, Z+6	; 0x06
 c5c:	97 81       	ldd	r25, Z+7	; 0x07
 c5e:	02 c0       	rjmp	.+4      	; 0xc64 <vfprintf+0x39c>
 c60:	8f ef       	ldi	r24, 0xFF	; 255
 c62:	9f ef       	ldi	r25, 0xFF	; 255
 c64:	2c 96       	adiw	r28, 0x0c	; 12
 c66:	e2 e1       	ldi	r30, 0x12	; 18
 c68:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__epilogue_restores__>

00000c6c <calloc>:
 c6c:	0f 93       	push	r16
 c6e:	1f 93       	push	r17
 c70:	cf 93       	push	r28
 c72:	df 93       	push	r29
 c74:	86 9f       	mul	r24, r22
 c76:	80 01       	movw	r16, r0
 c78:	87 9f       	mul	r24, r23
 c7a:	10 0d       	add	r17, r0
 c7c:	96 9f       	mul	r25, r22
 c7e:	10 0d       	add	r17, r0
 c80:	11 24       	eor	r1, r1
 c82:	c8 01       	movw	r24, r16
 c84:	0e 94 b1 02 	call	0x562	; 0x562 <malloc>
 c88:	ec 01       	movw	r28, r24
 c8a:	00 97       	sbiw	r24, 0x00	; 0
 c8c:	29 f0       	breq	.+10     	; 0xc98 <calloc+0x2c>
 c8e:	a8 01       	movw	r20, r16
 c90:	60 e0       	ldi	r22, 0x00	; 0
 c92:	70 e0       	ldi	r23, 0x00	; 0
 c94:	0e 94 5d 06 	call	0xcba	; 0xcba <memset>
 c98:	ce 01       	movw	r24, r28
 c9a:	df 91       	pop	r29
 c9c:	cf 91       	pop	r28
 c9e:	1f 91       	pop	r17
 ca0:	0f 91       	pop	r16
 ca2:	08 95       	ret

00000ca4 <strnlen_P>:
 ca4:	fc 01       	movw	r30, r24
 ca6:	05 90       	lpm	r0, Z+
 ca8:	61 50       	subi	r22, 0x01	; 1
 caa:	70 40       	sbci	r23, 0x00	; 0
 cac:	01 10       	cpse	r0, r1
 cae:	d8 f7       	brcc	.-10     	; 0xca6 <strnlen_P+0x2>
 cb0:	80 95       	com	r24
 cb2:	90 95       	com	r25
 cb4:	8e 0f       	add	r24, r30
 cb6:	9f 1f       	adc	r25, r31
 cb8:	08 95       	ret

00000cba <memset>:
 cba:	dc 01       	movw	r26, r24
 cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <memset+0x6>
 cbe:	6d 93       	st	X+, r22
 cc0:	41 50       	subi	r20, 0x01	; 1
 cc2:	50 40       	sbci	r21, 0x00	; 0
 cc4:	e0 f7       	brcc	.-8      	; 0xcbe <memset+0x4>
 cc6:	08 95       	ret

00000cc8 <strnlen>:
 cc8:	fc 01       	movw	r30, r24
 cca:	61 50       	subi	r22, 0x01	; 1
 ccc:	70 40       	sbci	r23, 0x00	; 0
 cce:	01 90       	ld	r0, Z+
 cd0:	01 10       	cpse	r0, r1
 cd2:	d8 f7       	brcc	.-10     	; 0xcca <strnlen+0x2>
 cd4:	80 95       	com	r24
 cd6:	90 95       	com	r25
 cd8:	8e 0f       	add	r24, r30
 cda:	9f 1f       	adc	r25, r31
 cdc:	08 95       	ret

00000cde <fputc>:
 cde:	0f 93       	push	r16
 ce0:	1f 93       	push	r17
 ce2:	cf 93       	push	r28
 ce4:	df 93       	push	r29
 ce6:	18 2f       	mov	r17, r24
 ce8:	09 2f       	mov	r16, r25
 cea:	eb 01       	movw	r28, r22
 cec:	8b 81       	ldd	r24, Y+3	; 0x03
 cee:	81 fd       	sbrc	r24, 1
 cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <fputc+0x1a>
 cf2:	8f ef       	ldi	r24, 0xFF	; 255
 cf4:	9f ef       	ldi	r25, 0xFF	; 255
 cf6:	20 c0       	rjmp	.+64     	; 0xd38 <fputc+0x5a>
 cf8:	82 ff       	sbrs	r24, 2
 cfa:	10 c0       	rjmp	.+32     	; 0xd1c <fputc+0x3e>
 cfc:	4e 81       	ldd	r20, Y+6	; 0x06
 cfe:	5f 81       	ldd	r21, Y+7	; 0x07
 d00:	2c 81       	ldd	r18, Y+4	; 0x04
 d02:	3d 81       	ldd	r19, Y+5	; 0x05
 d04:	42 17       	cp	r20, r18
 d06:	53 07       	cpc	r21, r19
 d08:	7c f4       	brge	.+30     	; 0xd28 <fputc+0x4a>
 d0a:	e8 81       	ld	r30, Y
 d0c:	f9 81       	ldd	r31, Y+1	; 0x01
 d0e:	9f 01       	movw	r18, r30
 d10:	2f 5f       	subi	r18, 0xFF	; 255
 d12:	3f 4f       	sbci	r19, 0xFF	; 255
 d14:	39 83       	std	Y+1, r19	; 0x01
 d16:	28 83       	st	Y, r18
 d18:	10 83       	st	Z, r17
 d1a:	06 c0       	rjmp	.+12     	; 0xd28 <fputc+0x4a>
 d1c:	e8 85       	ldd	r30, Y+8	; 0x08
 d1e:	f9 85       	ldd	r31, Y+9	; 0x09
 d20:	81 2f       	mov	r24, r17
 d22:	09 95       	icall
 d24:	89 2b       	or	r24, r25
 d26:	29 f7       	brne	.-54     	; 0xcf2 <fputc+0x14>
 d28:	2e 81       	ldd	r18, Y+6	; 0x06
 d2a:	3f 81       	ldd	r19, Y+7	; 0x07
 d2c:	2f 5f       	subi	r18, 0xFF	; 255
 d2e:	3f 4f       	sbci	r19, 0xFF	; 255
 d30:	3f 83       	std	Y+7, r19	; 0x07
 d32:	2e 83       	std	Y+6, r18	; 0x06
 d34:	81 2f       	mov	r24, r17
 d36:	90 2f       	mov	r25, r16
 d38:	df 91       	pop	r29
 d3a:	cf 91       	pop	r28
 d3c:	1f 91       	pop	r17
 d3e:	0f 91       	pop	r16
 d40:	08 95       	ret

00000d42 <__ultoa_invert>:
 d42:	fa 01       	movw	r30, r20
 d44:	aa 27       	eor	r26, r26
 d46:	28 30       	cpi	r18, 0x08	; 8
 d48:	51 f1       	breq	.+84     	; 0xd9e <__ultoa_invert+0x5c>
 d4a:	20 31       	cpi	r18, 0x10	; 16
 d4c:	81 f1       	breq	.+96     	; 0xdae <__ultoa_invert+0x6c>
 d4e:	e8 94       	clt
 d50:	6f 93       	push	r22
 d52:	6e 7f       	andi	r22, 0xFE	; 254
 d54:	6e 5f       	subi	r22, 0xFE	; 254
 d56:	7f 4f       	sbci	r23, 0xFF	; 255
 d58:	8f 4f       	sbci	r24, 0xFF	; 255
 d5a:	9f 4f       	sbci	r25, 0xFF	; 255
 d5c:	af 4f       	sbci	r26, 0xFF	; 255
 d5e:	b1 e0       	ldi	r27, 0x01	; 1
 d60:	3e d0       	rcall	.+124    	; 0xdde <__ultoa_invert+0x9c>
 d62:	b4 e0       	ldi	r27, 0x04	; 4
 d64:	3c d0       	rcall	.+120    	; 0xdde <__ultoa_invert+0x9c>
 d66:	67 0f       	add	r22, r23
 d68:	78 1f       	adc	r23, r24
 d6a:	89 1f       	adc	r24, r25
 d6c:	9a 1f       	adc	r25, r26
 d6e:	a1 1d       	adc	r26, r1
 d70:	68 0f       	add	r22, r24
 d72:	79 1f       	adc	r23, r25
 d74:	8a 1f       	adc	r24, r26
 d76:	91 1d       	adc	r25, r1
 d78:	a1 1d       	adc	r26, r1
 d7a:	6a 0f       	add	r22, r26
 d7c:	71 1d       	adc	r23, r1
 d7e:	81 1d       	adc	r24, r1
 d80:	91 1d       	adc	r25, r1
 d82:	a1 1d       	adc	r26, r1
 d84:	20 d0       	rcall	.+64     	; 0xdc6 <__ultoa_invert+0x84>
 d86:	09 f4       	brne	.+2      	; 0xd8a <__ultoa_invert+0x48>
 d88:	68 94       	set
 d8a:	3f 91       	pop	r19
 d8c:	2a e0       	ldi	r18, 0x0A	; 10
 d8e:	26 9f       	mul	r18, r22
 d90:	11 24       	eor	r1, r1
 d92:	30 19       	sub	r19, r0
 d94:	30 5d       	subi	r19, 0xD0	; 208
 d96:	31 93       	st	Z+, r19
 d98:	de f6       	brtc	.-74     	; 0xd50 <__ultoa_invert+0xe>
 d9a:	cf 01       	movw	r24, r30
 d9c:	08 95       	ret
 d9e:	46 2f       	mov	r20, r22
 da0:	47 70       	andi	r20, 0x07	; 7
 da2:	40 5d       	subi	r20, 0xD0	; 208
 da4:	41 93       	st	Z+, r20
 da6:	b3 e0       	ldi	r27, 0x03	; 3
 da8:	0f d0       	rcall	.+30     	; 0xdc8 <__ultoa_invert+0x86>
 daa:	c9 f7       	brne	.-14     	; 0xd9e <__ultoa_invert+0x5c>
 dac:	f6 cf       	rjmp	.-20     	; 0xd9a <__ultoa_invert+0x58>
 dae:	46 2f       	mov	r20, r22
 db0:	4f 70       	andi	r20, 0x0F	; 15
 db2:	40 5d       	subi	r20, 0xD0	; 208
 db4:	4a 33       	cpi	r20, 0x3A	; 58
 db6:	18 f0       	brcs	.+6      	; 0xdbe <__ultoa_invert+0x7c>
 db8:	49 5d       	subi	r20, 0xD9	; 217
 dba:	31 fd       	sbrc	r19, 1
 dbc:	40 52       	subi	r20, 0x20	; 32
 dbe:	41 93       	st	Z+, r20
 dc0:	02 d0       	rcall	.+4      	; 0xdc6 <__ultoa_invert+0x84>
 dc2:	a9 f7       	brne	.-22     	; 0xdae <__ultoa_invert+0x6c>
 dc4:	ea cf       	rjmp	.-44     	; 0xd9a <__ultoa_invert+0x58>
 dc6:	b4 e0       	ldi	r27, 0x04	; 4
 dc8:	a6 95       	lsr	r26
 dca:	97 95       	ror	r25
 dcc:	87 95       	ror	r24
 dce:	77 95       	ror	r23
 dd0:	67 95       	ror	r22
 dd2:	ba 95       	dec	r27
 dd4:	c9 f7       	brne	.-14     	; 0xdc8 <__ultoa_invert+0x86>
 dd6:	00 97       	sbiw	r24, 0x00	; 0
 dd8:	61 05       	cpc	r22, r1
 dda:	71 05       	cpc	r23, r1
 ddc:	08 95       	ret
 dde:	9b 01       	movw	r18, r22
 de0:	ac 01       	movw	r20, r24
 de2:	0a 2e       	mov	r0, r26
 de4:	06 94       	lsr	r0
 de6:	57 95       	ror	r21
 de8:	47 95       	ror	r20
 dea:	37 95       	ror	r19
 dec:	27 95       	ror	r18
 dee:	ba 95       	dec	r27
 df0:	c9 f7       	brne	.-14     	; 0xde4 <__ultoa_invert+0xa2>
 df2:	62 0f       	add	r22, r18
 df4:	73 1f       	adc	r23, r19
 df6:	84 1f       	adc	r24, r20
 df8:	95 1f       	adc	r25, r21
 dfa:	a0 1d       	adc	r26, r0
 dfc:	08 95       	ret

00000dfe <__prologue_saves__>:
 dfe:	2f 92       	push	r2
 e00:	3f 92       	push	r3
 e02:	4f 92       	push	r4
 e04:	5f 92       	push	r5
 e06:	6f 92       	push	r6
 e08:	7f 92       	push	r7
 e0a:	8f 92       	push	r8
 e0c:	9f 92       	push	r9
 e0e:	af 92       	push	r10
 e10:	bf 92       	push	r11
 e12:	cf 92       	push	r12
 e14:	df 92       	push	r13
 e16:	ef 92       	push	r14
 e18:	ff 92       	push	r15
 e1a:	0f 93       	push	r16
 e1c:	1f 93       	push	r17
 e1e:	cf 93       	push	r28
 e20:	df 93       	push	r29
 e22:	cd b7       	in	r28, 0x3d	; 61
 e24:	de b7       	in	r29, 0x3e	; 62
 e26:	ca 1b       	sub	r28, r26
 e28:	db 0b       	sbc	r29, r27
 e2a:	0f b6       	in	r0, 0x3f	; 63
 e2c:	f8 94       	cli
 e2e:	de bf       	out	0x3e, r29	; 62
 e30:	0f be       	out	0x3f, r0	; 63
 e32:	cd bf       	out	0x3d, r28	; 61
 e34:	09 94       	ijmp

00000e36 <__epilogue_restores__>:
 e36:	2a 88       	ldd	r2, Y+18	; 0x12
 e38:	39 88       	ldd	r3, Y+17	; 0x11
 e3a:	48 88       	ldd	r4, Y+16	; 0x10
 e3c:	5f 84       	ldd	r5, Y+15	; 0x0f
 e3e:	6e 84       	ldd	r6, Y+14	; 0x0e
 e40:	7d 84       	ldd	r7, Y+13	; 0x0d
 e42:	8c 84       	ldd	r8, Y+12	; 0x0c
 e44:	9b 84       	ldd	r9, Y+11	; 0x0b
 e46:	aa 84       	ldd	r10, Y+10	; 0x0a
 e48:	b9 84       	ldd	r11, Y+9	; 0x09
 e4a:	c8 84       	ldd	r12, Y+8	; 0x08
 e4c:	df 80       	ldd	r13, Y+7	; 0x07
 e4e:	ee 80       	ldd	r14, Y+6	; 0x06
 e50:	fd 80       	ldd	r15, Y+5	; 0x05
 e52:	0c 81       	ldd	r16, Y+4	; 0x04
 e54:	1b 81       	ldd	r17, Y+3	; 0x03
 e56:	aa 81       	ldd	r26, Y+2	; 0x02
 e58:	b9 81       	ldd	r27, Y+1	; 0x01
 e5a:	ce 0f       	add	r28, r30
 e5c:	d1 1d       	adc	r29, r1
 e5e:	0f b6       	in	r0, 0x3f	; 63
 e60:	f8 94       	cli
 e62:	de bf       	out	0x3e, r29	; 62
 e64:	0f be       	out	0x3f, r0	; 63
 e66:	cd bf       	out	0x3d, r28	; 61
 e68:	ed 01       	movw	r28, r26
 e6a:	08 95       	ret

00000e6c <_exit>:
 e6c:	f8 94       	cli

00000e6e <__stop_program>:
 e6e:	ff cf       	rjmp	.-2      	; 0xe6e <__stop_program>
