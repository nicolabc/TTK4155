
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  00000e64  00000ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800258  00800258  00001050  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f17  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bee  00000000  00000000  000031bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000be2  00000000  00000000  00003da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000049c  00000000  00000000  0000498c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000069f  00000000  00000000  00004e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015d6  00000000  00000000  000054c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00006a9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e6       	ldi	r30, 0x64	; 100
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 35       	cpi	r26, 0x58	; 88
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a8 e5       	ldi	r26, 0x58	; 88
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 36       	cpi	r26, 0x6A	; 106
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 65 00 	call	0xca	; 0xca <main>
  a6:	0c 94 30 07 	jmp	0xe60	; 0xe60 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
  ae:	30 98       	cbi	0x06, 0	; 6
  b0:	08 95       	ret

000000b2 <avr_init>:
  b2:	b8 98       	cbi	0x17, 0	; 23
  b4:	b9 98       	cbi	0x17, 1	; 23
  b6:	ba 98       	cbi	0x17, 2	; 23
  b8:	c2 9a       	sbi	0x18, 2	; 24
  ba:	08 95       	ret

000000bc <extMem_init>:
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	85 bf       	out	0x35, r24	; 53
  c2:	80 b7       	in	r24, 0x30	; 48
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	80 bf       	out	0x30, r24	; 48
  c8:	08 95       	ret

000000ca <main>:


int main(void)
{
	
	USART_Init(MYUBRR);
  ca:	8f e1       	ldi	r24, 0x1F	; 31
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 a0 02 	call	0x540	; 0x540 <USART_Init>
	extMem_init(); 
  d2:	0e 94 5e 00 	call	0xbc	; 0xbc <extMem_init>
	avr_init();
  d6:	0e 94 59 00 	call	0xb2	; 0xb2 <avr_init>
	adc_init();
  da:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	oled_init();
  de:	0e 94 41 02 	call	0x482	; 0x482 <oled_init>
	oled_clear_screen();
  e2:	0e 94 28 02 	call	0x450	; 0x450 <oled_clear_screen>
	menu_init();
  e6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <menu_init>
	//spi_init();
	mcp2515_init();
  ea:	0e 94 ba 00 	call	0x174	; 0x174 <mcp2515_init>
		
	
		data = mcp2515_read(MCP_TXB0SIDH);
	

		printf("Returnert verdi %02X\n", data); //printer verdien vi leser fra registeret i hex
  ee:	c6 e0       	ldi	r28, 0x06	; 6
  f0:	d1 e0       	ldi	r29, 0x01	; 1
	while(1){
		uint8_t data;

		

		mcp2515_write(MCP_TXB0SIDH, 0x40);
  f2:	60 e4       	ldi	r22, 0x40	; 64
  f4:	81 e3       	ldi	r24, 0x31	; 49
  f6:	0e 94 a2 00 	call	0x144	; 0x144 <mcp2515_write>
		
	
		data = mcp2515_read(MCP_TXB0SIDH);
  fa:	81 e3       	ldi	r24, 0x31	; 49
  fc:	0e 94 94 00 	call	0x128	; 0x128 <mcp2515_read>
	

		printf("Returnert verdi %02X\n", data); //printer verdien vi leser fra registeret i hex
 100:	1f 92       	push	r1
 102:	8f 93       	push	r24
 104:	df 93       	push	r29
 106:	cf 93       	push	r28
 108:	0e 94 1d 04 	call	0x83a	; 0x83a <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	9f ef       	ldi	r25, 0xFF	; 255
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	8e e0       	ldi	r24, 0x0E	; 14
 112:	91 50       	subi	r25, 0x01	; 1
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x48>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x52>
 11c:	00 00       	nop
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	e5 cf       	rjmp	.-54     	; 0xf2 <main+0x28>

00000128 <mcp2515_read>:
#include "spi.h"

#define set_bit( reg, bit ) (reg |= (1 << bit))
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

uint8_t mcp2515_read(uint8_t address){
 128:	cf 93       	push	r28
 12a:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, PB4); //Setter SS lav
 12c:	c4 98       	cbi	0x18, 4	; 24

	uint8_t result;
	spi_MasterTransmit(MCP_READ);
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spi_MasterTransmit>
	spi_MasterTransmit(address);
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spi_MasterTransmit>
	result = spi_MasterRead(); //Leser hva som var i adressen/registeret vi aksesserte
 13a:	0e 94 80 02 	call	0x500	; 0x500 <spi_MasterRead>

	set_bit(PORTB, PB4); //Setter SS høy
 13e:	c4 9a       	sbi	0x18, 4	; 24
	
	return result;
}
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data){
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	d8 2f       	mov	r29, r24
 14a:	c6 2f       	mov	r28, r22
	clear_bit(PORTB,PB4); //Setter SS lav
 14c:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(MCP_WRITE); //Velger instruction
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spi_MasterTransmit>
	
	spi_MasterTransmit(address); //Velger adresse, f.eks. 0b00110001
 154:	8d 2f       	mov	r24, r29
 156:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spi_MasterTransmit>
	
	spi_MasterTransmit(data); //Velger data som sendes
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spi_MasterTransmit>

	set_bit(PORTB,PB4);
 160:	c4 9a       	sbi	0x18, 4	; 24
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <mcp2515_reset>:

void mcp2515_reset(){
	clear_bit(PORTB,PB4); //Setter SS lav
 168:	c4 98       	cbi	0x18, 4	; 24
	spi_MasterTransmit(MCP_RESET);
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spi_MasterTransmit>
	set_bit(PORTB,PB4); //Setter SS høy
 170:	c4 9a       	sbi	0x18, 4	; 24
 172:	08 95       	ret

00000174 <mcp2515_init>:
}

uint8_t mcp2515_init(){
	uint8_t value;
	spi_init(); //Initialize SPI
 174:	0e 94 73 02 	call	0x4e6	; 0x4e6 <spi_init>
	mcp2515_reset(); // Send reset-command
 178:	0e 94 b4 00 	call	0x168	; 0x168 <mcp2515_reset>
	
	//Self-test
	value = mcp2515_read(MCP_CANSTAT); 
 17c:	8e e0       	ldi	r24, 0x0E	; 14
 17e:	0e 94 94 00 	call	0x128	; 0x128 <mcp2515_read>
	if((value & MODE_MASK)  != MODE_CONFIG) {
 182:	80 7e       	andi	r24, 0xE0	; 224
 184:	80 38       	cpi	r24, 0x80	; 128
 186:	31 f0       	breq	.+12     	; 0x194 <mcp2515_init+0x20>
		printf("MCP2515 is NOT in configuration	mode after reset!\n");
 188:	8c e1       	ldi	r24, 0x1C	; 28
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 31 04 	call	0x862	; 0x862 <puts>
		return 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	08 95       	ret
	}
	// More initialization
	printf("MCP2515 IS in configuration mode after reset!\n");
 194:	8e e4       	ldi	r24, 0x4E	; 78
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 31 04 	call	0x862	; 0x862 <puts>
	return 0;
 19c:	80 e0       	ldi	r24, 0x00	; 0
}
 19e:	08 95       	ret

000001a0 <menu_init>:

node_t* currentSelection;
node_t* currentHead;
node_t* developers;

void menu_init(void){
 1a0:	2f 92       	push	r2
 1a2:	3f 92       	push	r3
 1a4:	4f 92       	push	r4
 1a6:	5f 92       	push	r5
 1a8:	6f 92       	push	r6
 1aa:	7f 92       	push	r7
 1ac:	8f 92       	push	r8
 1ae:	9f 92       	push	r9
 1b0:	af 92       	push	r10
 1b2:	bf 92       	push	r11
 1b4:	cf 92       	push	r12
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <menu_init+0x26>
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <menu_init+0x28>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <menu_init+0x2a>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
	
	
	node_t* newgame = malloc(sizeof(node_t)); //For å allokere nok minne av størrelse node_t
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 1d6:	9e 83       	std	Y+6, r25	; 0x06
 1d8:	8d 83       	std	Y+5, r24	; 0x05
		node_t* easy = malloc(sizeof(node_t));
 1da:	8a e0       	ldi	r24, 0x0A	; 10
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 1e2:	4c 01       	movw	r8, r24
		node_t* normal = malloc(sizeof(node_t));
 1e4:	8a e0       	ldi	r24, 0x0A	; 10
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 1ec:	5c 01       	movw	r10, r24
		node_t* hard = malloc(sizeof(node_t));
 1ee:	8a e0       	ldi	r24, 0x0A	; 10
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	89 83       	std	Y+1, r24	; 0x01
	
	node_t* highscore = malloc(sizeof(node_t));
 1fa:	8a e0       	ldi	r24, 0x0A	; 10
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 202:	6c 01       	movw	r12, r24
	node_t* options = malloc(sizeof(node_t));
 204:	8a e0       	ldi	r24, 0x0A	; 10
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 20c:	8c 01       	movw	r16, r24
		node_t* sound = malloc(sizeof(node_t));
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 216:	7c 01       	movw	r14, r24
			node_t* sound_on = malloc(sizeof(node_t));
 218:	8a e0       	ldi	r24, 0x0A	; 10
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 220:	2c 01       	movw	r4, r24
			node_t* sound_off = malloc(sizeof(node_t));
 222:	8a e0       	ldi	r24, 0x0A	; 10
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 22a:	9c 83       	std	Y+4, r25	; 0x04
 22c:	8b 83       	std	Y+3, r24	; 0x03
		node_t* sensitivity = malloc(sizeof(node_t));
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 236:	3c 01       	movw	r6, r24
	
	node_t* credits = malloc(sizeof(node_t));
 238:	8a e0       	ldi	r24, 0x0A	; 10
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 240:	1c 01       	movw	r2, r24
		developers = malloc(sizeof(node_t));
 242:	8a e0       	ldi	r24, 0x0A	; 10
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 24a:	9c 01       	movw	r18, r24
 24c:	90 93 5b 02 	sts	0x025B, r25
 250:	80 93 5a 02 	sts	0x025A, r24
	
	currentHead = malloc(sizeof(node_t));
	currentSelection = malloc(sizeof(node_t));
	
	
	currentHead = newgame;
 254:	8d 81       	ldd	r24, Y+5	; 0x05
 256:	9e 81       	ldd	r25, Y+6	; 0x06
 258:	90 93 5d 02 	sts	0x025D, r25
 25c:	80 93 5c 02 	sts	0x025C, r24
	//currentSelection = DER PILEN DIN PEKER NÅ
	currentSelection = newgame;
 260:	90 93 59 02 	sts	0x0259, r25
 264:	80 93 58 02 	sts	0x0258, r24
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 268:	85 eb       	ldi	r24, 0xB5	; 181
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	ad 81       	ldd	r26, Y+5	; 0x05
 26e:	be 81       	ldd	r27, Y+6	; 0x06
 270:	11 96       	adiw	r26, 0x01	; 1
 272:	9c 93       	st	X, r25
 274:	8e 93       	st	-X, r24
	myNode->previous = previous;
 276:	15 96       	adiw	r26, 0x05	; 5
 278:	1c 92       	st	X, r1
 27a:	1e 92       	st	-X, r1
 27c:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 27e:	13 96       	adiw	r26, 0x03	; 3
 280:	dc 92       	st	X, r13
 282:	ce 92       	st	-X, r12
 284:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 286:	17 96       	adiw	r26, 0x07	; 7
 288:	9c 92       	st	X, r9
 28a:	8e 92       	st	-X, r8
 28c:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 28e:	19 96       	adiw	r26, 0x09	; 9
 290:	1c 92       	st	X, r1
 292:	1e 92       	st	-X, r1
 294:	18 97       	sbiw	r26, 0x08	; 8
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 296:	8e eb       	ldi	r24, 0xBE	; 190
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	f4 01       	movw	r30, r8
 29c:	91 83       	std	Z+1, r25	; 0x01
 29e:	80 83       	st	Z, r24
	myNode->previous = previous;
 2a0:	15 82       	std	Z+5, r1	; 0x05
 2a2:	14 82       	std	Z+4, r1	; 0x04
	myNode->next = next;
 2a4:	b3 82       	std	Z+3, r11	; 0x03
 2a6:	a2 82       	std	Z+2, r10	; 0x02
	myNode->child = child;
 2a8:	17 82       	std	Z+7, r1	; 0x07
 2aa:	16 82       	std	Z+6, r1	; 0x06
	myNode->parent = parent;
 2ac:	b1 87       	std	Z+9, r27	; 0x09
 2ae:	a0 87       	std	Z+8, r26	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 2b0:	83 ec       	ldi	r24, 0xC3	; 195
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	d5 01       	movw	r26, r10
 2b6:	11 96       	adiw	r26, 0x01	; 1
 2b8:	9c 93       	st	X, r25
 2ba:	8e 93       	st	-X, r24
	myNode->previous = previous;
 2bc:	15 96       	adiw	r26, 0x05	; 5
 2be:	9c 92       	st	X, r9
 2c0:	8e 92       	st	-X, r8
 2c2:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 2c4:	e9 81       	ldd	r30, Y+1	; 0x01
 2c6:	fa 81       	ldd	r31, Y+2	; 0x02
 2c8:	13 96       	adiw	r26, 0x03	; 3
 2ca:	fc 93       	st	X, r31
 2cc:	ee 93       	st	-X, r30
 2ce:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 2d0:	17 96       	adiw	r26, 0x07	; 7
 2d2:	1c 92       	st	X, r1
 2d4:	1e 92       	st	-X, r1
 2d6:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 2d8:	8d 81       	ldd	r24, Y+5	; 0x05
 2da:	9e 81       	ldd	r25, Y+6	; 0x06
 2dc:	19 96       	adiw	r26, 0x09	; 9
 2de:	9c 93       	st	X, r25
 2e0:	8e 93       	st	-X, r24
 2e2:	18 97       	sbiw	r26, 0x08	; 8
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 2e4:	8a ec       	ldi	r24, 0xCA	; 202
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	91 83       	std	Z+1, r25	; 0x01
 2ea:	80 83       	st	Z, r24
	myNode->previous = previous;
 2ec:	b5 82       	std	Z+5, r11	; 0x05
 2ee:	a4 82       	std	Z+4, r10	; 0x04
	myNode->next = next;
 2f0:	13 82       	std	Z+3, r1	; 0x03
 2f2:	12 82       	std	Z+2, r1	; 0x02
	myNode->child = child;
 2f4:	17 82       	std	Z+7, r1	; 0x07
 2f6:	16 82       	std	Z+6, r1	; 0x06
	myNode->parent = parent;
 2f8:	ad 81       	ldd	r26, Y+5	; 0x05
 2fa:	be 81       	ldd	r27, Y+6	; 0x06
 2fc:	b1 87       	std	Z+9, r27	; 0x09
 2fe:	a0 87       	std	Z+8, r26	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 300:	8f ec       	ldi	r24, 0xCF	; 207
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	f6 01       	movw	r30, r12
 306:	91 83       	std	Z+1, r25	; 0x01
 308:	80 83       	st	Z, r24
	myNode->previous = previous;
 30a:	b5 83       	std	Z+5, r27	; 0x05
 30c:	a4 83       	std	Z+4, r26	; 0x04
	myNode->next = next;
 30e:	13 83       	std	Z+3, r17	; 0x03
 310:	02 83       	std	Z+2, r16	; 0x02
	myNode->child = child;
 312:	17 82       	std	Z+7, r1	; 0x07
 314:	16 82       	std	Z+6, r1	; 0x06
	myNode->parent = parent;
 316:	11 86       	std	Z+9, r1	; 0x09
 318:	10 86       	std	Z+8, r1	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 31a:	89 ed       	ldi	r24, 0xD9	; 217
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	d8 01       	movw	r26, r16
 320:	11 96       	adiw	r26, 0x01	; 1
 322:	9c 93       	st	X, r25
 324:	8e 93       	st	-X, r24
	myNode->previous = previous;
 326:	15 96       	adiw	r26, 0x05	; 5
 328:	dc 92       	st	X, r13
 32a:	ce 92       	st	-X, r12
 32c:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 32e:	13 96       	adiw	r26, 0x03	; 3
 330:	3c 92       	st	X, r3
 332:	2e 92       	st	-X, r2
 334:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 336:	17 96       	adiw	r26, 0x07	; 7
 338:	7c 92       	st	X, r7
 33a:	6e 92       	st	-X, r6
 33c:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 33e:	19 96       	adiw	r26, 0x09	; 9
 340:	1c 92       	st	X, r1
 342:	1e 92       	st	-X, r1
 344:	18 97       	sbiw	r26, 0x08	; 8
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 346:	81 ee       	ldi	r24, 0xE1	; 225
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	f3 01       	movw	r30, r6
 34c:	91 83       	std	Z+1, r25	; 0x01
 34e:	80 83       	st	Z, r24
	myNode->previous = previous;
 350:	15 82       	std	Z+5, r1	; 0x05
 352:	14 82       	std	Z+4, r1	; 0x04
	myNode->next = next;
 354:	f3 82       	std	Z+3, r15	; 0x03
 356:	e2 82       	std	Z+2, r14	; 0x02
	myNode->child = child;
 358:	17 82       	std	Z+7, r1	; 0x07
 35a:	16 82       	std	Z+6, r1	; 0x06
	myNode->parent = parent;
 35c:	11 87       	std	Z+9, r17	; 0x09
 35e:	00 87       	std	Z+8, r16	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 360:	8d ee       	ldi	r24, 0xED	; 237
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	d7 01       	movw	r26, r14
 366:	11 96       	adiw	r26, 0x01	; 1
 368:	9c 93       	st	X, r25
 36a:	8e 93       	st	-X, r24
	myNode->previous = previous;
 36c:	15 96       	adiw	r26, 0x05	; 5
 36e:	7c 92       	st	X, r7
 370:	6e 92       	st	-X, r6
 372:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 374:	13 96       	adiw	r26, 0x03	; 3
 376:	1c 92       	st	X, r1
 378:	1e 92       	st	-X, r1
 37a:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 37c:	17 96       	adiw	r26, 0x07	; 7
 37e:	5c 92       	st	X, r5
 380:	4e 92       	st	-X, r4
 382:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 384:	19 96       	adiw	r26, 0x09	; 9
 386:	1c 93       	st	X, r17
 388:	0e 93       	st	-X, r16
 38a:	18 97       	sbiw	r26, 0x08	; 8
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 38c:	83 ef       	ldi	r24, 0xF3	; 243
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	f2 01       	movw	r30, r4
 392:	91 83       	std	Z+1, r25	; 0x01
 394:	80 83       	st	Z, r24
	myNode->previous = previous;
 396:	15 82       	std	Z+5, r1	; 0x05
 398:	14 82       	std	Z+4, r1	; 0x04
	myNode->next = next;
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	9c 81       	ldd	r25, Y+4	; 0x04
 39e:	93 83       	std	Z+3, r25	; 0x03
 3a0:	82 83       	std	Z+2, r24	; 0x02
	myNode->child = child;
 3a2:	17 82       	std	Z+7, r1	; 0x07
 3a4:	16 82       	std	Z+6, r1	; 0x06
	myNode->parent = parent;
 3a6:	f1 86       	std	Z+9, r15	; 0x09
 3a8:	e0 86       	std	Z+8, r14	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 3aa:	8c ef       	ldi	r24, 0xFC	; 252
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	ab 81       	ldd	r26, Y+3	; 0x03
 3b0:	bc 81       	ldd	r27, Y+4	; 0x04
 3b2:	11 96       	adiw	r26, 0x01	; 1
 3b4:	9c 93       	st	X, r25
 3b6:	8e 93       	st	-X, r24
	myNode->previous = previous;
 3b8:	15 96       	adiw	r26, 0x05	; 5
 3ba:	5c 92       	st	X, r5
 3bc:	4e 92       	st	-X, r4
 3be:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 3c0:	13 96       	adiw	r26, 0x03	; 3
 3c2:	1c 92       	st	X, r1
 3c4:	1e 92       	st	-X, r1
 3c6:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 3c8:	17 96       	adiw	r26, 0x07	; 7
 3ca:	1c 92       	st	X, r1
 3cc:	1e 92       	st	-X, r1
 3ce:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 3d0:	19 96       	adiw	r26, 0x09	; 9
 3d2:	fc 92       	st	X, r15
 3d4:	ee 92       	st	-X, r14
 3d6:	18 97       	sbiw	r26, 0x08	; 8
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 3d8:	86 e0       	ldi	r24, 0x06	; 6
 3da:	92 e0       	ldi	r25, 0x02	; 2
 3dc:	f1 01       	movw	r30, r2
 3de:	91 83       	std	Z+1, r25	; 0x01
 3e0:	80 83       	st	Z, r24
	myNode->previous = previous;
 3e2:	15 83       	std	Z+5, r17	; 0x05
 3e4:	04 83       	std	Z+4, r16	; 0x04
	myNode->next = next;
 3e6:	13 82       	std	Z+3, r1	; 0x03
 3e8:	12 82       	std	Z+2, r1	; 0x02
	myNode->child = child;
 3ea:	37 83       	std	Z+7, r19	; 0x07
 3ec:	26 83       	std	Z+6, r18	; 0x06
	myNode->parent = parent;
 3ee:	11 86       	std	Z+9, r1	; 0x09
 3f0:	10 86       	std	Z+8, r1	; 0x08
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}

void menu_defineMenuEntries(node_t* myNode, char* nodeName, node_t* next, node_t* previous, node_t* child, node_t* parent){
	myNode->name = nodeName;
 3f2:	8e e0       	ldi	r24, 0x0E	; 14
 3f4:	92 e0       	ldi	r25, 0x02	; 2
 3f6:	d9 01       	movw	r26, r18
 3f8:	11 96       	adiw	r26, 0x01	; 1
 3fa:	9c 93       	st	X, r25
 3fc:	8e 93       	st	-X, r24
	myNode->previous = previous;
 3fe:	15 96       	adiw	r26, 0x05	; 5
 400:	1c 92       	st	X, r1
 402:	1e 92       	st	-X, r1
 404:	14 97       	sbiw	r26, 0x04	; 4
	myNode->next = next;
 406:	13 96       	adiw	r26, 0x03	; 3
 408:	1c 92       	st	X, r1
 40a:	1e 92       	st	-X, r1
 40c:	12 97       	sbiw	r26, 0x02	; 2
	myNode->child = child;
 40e:	17 96       	adiw	r26, 0x07	; 7
 410:	1c 92       	st	X, r1
 412:	1e 92       	st	-X, r1
 414:	16 97       	sbiw	r26, 0x06	; 6
	myNode->parent = parent;
 416:	19 96       	adiw	r26, 0x09	; 9
 418:	3c 92       	st	X, r3
 41a:	2e 92       	st	-X, r2
 41c:	18 97       	sbiw	r26, 0x08	; 8
		
	
	menu_defineMenuEntries(credits,"Credits",NULL,options, developers, NULL);
		menu_defineMenuEntries(developers,"Daniel Tavakoli          Nicolas Carbone          Byggern Autumn 2017",NULL,NULL,NULL,credits);
		
}
 41e:	26 96       	adiw	r28, 0x06	; 6
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	f8 94       	cli
 424:	de bf       	out	0x3e, r29	; 62
 426:	0f be       	out	0x3f, r0	; 63
 428:	cd bf       	out	0x3d, r28	; 61
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	cf 90       	pop	r12
 43a:	bf 90       	pop	r11
 43c:	af 90       	pop	r10
 43e:	9f 90       	pop	r9
 440:	8f 90       	pop	r8
 442:	7f 90       	pop	r7
 444:	6f 90       	pop	r6
 446:	5f 90       	pop	r5
 448:	4f 90       	pop	r4
 44a:	3f 90       	pop	r3
 44c:	2f 90       	pop	r2
 44e:	08 95       	ret

00000450 <oled_clear_screen>:
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	10 e0       	ldi	r17, 0x00	; 0
 458:	d0 e0       	ldi	r29, 0x00	; 0
 45a:	81 2f       	mov	r24, r17
 45c:	0e 94 92 02 	call	0x524	; 0x524 <sram_goto_page>
 460:	cd 2f       	mov	r28, r29
 462:	8c 2f       	mov	r24, r28
 464:	0e 94 95 02 	call	0x52a	; 0x52a <sram_goto_column>
 468:	8d 2f       	mov	r24, r29
 46a:	0e 94 85 02 	call	0x50a	; 0x50a <sram_write_data>
 46e:	cf 5f       	subi	r28, 0xFF	; 255
 470:	c0 38       	cpi	r28, 0x80	; 128
 472:	b9 f7       	brne	.-18     	; 0x462 <oled_clear_screen+0x12>
 474:	1f 5f       	subi	r17, 0xFF	; 255
 476:	18 30       	cpi	r17, 0x08	; 8
 478:	81 f7       	brne	.-32     	; 0x45a <oled_clear_screen+0xa>
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	08 95       	ret

00000482 <oled_init>:
 482:	e0 e0       	ldi	r30, 0x00	; 0
 484:	f0 e1       	ldi	r31, 0x10	; 16
 486:	8e ea       	ldi	r24, 0xAE	; 174
 488:	80 83       	st	Z, r24
 48a:	81 ea       	ldi	r24, 0xA1	; 161
 48c:	80 83       	st	Z, r24
 48e:	8a ed       	ldi	r24, 0xDA	; 218
 490:	80 83       	st	Z, r24
 492:	82 e1       	ldi	r24, 0x12	; 18
 494:	80 83       	st	Z, r24
 496:	88 ec       	ldi	r24, 0xC8	; 200
 498:	80 83       	st	Z, r24
 49a:	88 ea       	ldi	r24, 0xA8	; 168
 49c:	80 83       	st	Z, r24
 49e:	8f e3       	ldi	r24, 0x3F	; 63
 4a0:	80 83       	st	Z, r24
 4a2:	85 ed       	ldi	r24, 0xD5	; 213
 4a4:	80 83       	st	Z, r24
 4a6:	80 e8       	ldi	r24, 0x80	; 128
 4a8:	80 83       	st	Z, r24
 4aa:	81 e8       	ldi	r24, 0x81	; 129
 4ac:	80 83       	st	Z, r24
 4ae:	80 e5       	ldi	r24, 0x50	; 80
 4b0:	80 83       	st	Z, r24
 4b2:	89 ed       	ldi	r24, 0xD9	; 217
 4b4:	80 83       	st	Z, r24
 4b6:	81 e2       	ldi	r24, 0x21	; 33
 4b8:	80 83       	st	Z, r24
 4ba:	80 e2       	ldi	r24, 0x20	; 32
 4bc:	80 83       	st	Z, r24
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	80 83       	st	Z, r24
 4c2:	8b ed       	ldi	r24, 0xDB	; 219
 4c4:	80 83       	st	Z, r24
 4c6:	80 e3       	ldi	r24, 0x30	; 48
 4c8:	80 83       	st	Z, r24
 4ca:	8d ea       	ldi	r24, 0xAD	; 173
 4cc:	80 83       	st	Z, r24
 4ce:	10 82       	st	Z, r1
 4d0:	84 ea       	ldi	r24, 0xA4	; 164
 4d2:	80 83       	st	Z, r24
 4d4:	86 ea       	ldi	r24, 0xA6	; 166
 4d6:	80 83       	st	Z, r24
 4d8:	8f ea       	ldi	r24, 0xAF	; 175
 4da:	80 83       	st	Z, r24
 4dc:	10 92 5e 02 	sts	0x025E, r1
 4e0:	10 92 5f 02 	sts	0x025F, r1
 4e4:	08 95       	ret

000004e6 <spi_init>:
 #define set_bit( reg, bit ) (reg |= (1 << bit))
 #define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void spi_init(void){
    /* Set MOSI and SCK output, all others input */
    DDRB |= (1<<DDB5)|(1<<DDB7);
 4e6:	87 b3       	in	r24, 0x17	; 23
 4e8:	80 6a       	ori	r24, 0xA0	; 160
 4ea:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << DDB6);
 4ec:	be 98       	cbi	0x17, 6	; 23
    /* Enable SPI, Master, set clock rate fck/2 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X);
 4ee:	81 e5       	ldi	r24, 0x51	; 81
 4f0:	8d b9       	out	0x0d, r24	; 13
	
	set_bit(DDRB,DDB4); //Setter PB4 til write/output
 4f2:	bc 9a       	sbi	0x17, 4	; 23
	set_bit(PORTB, PB4);
 4f4:	c4 9a       	sbi	0x18, 4	; 24
 4f6:	08 95       	ret

000004f8 <spi_MasterTransmit>:

//Med denne må vi sette SS lav/høy før/etter mastertransmit starter/slutter
void spi_MasterTransmit(char cData) { //keepLow holds the SS* signal low so the transmission continues
	
	/* Start transmission */
	SPDR = cData;
 4f8:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete. Interrupt flag in SPSR is set (SPIF). */
	while(!(SPSR & (1<<SPIF)));
 4fa:	77 9b       	sbis	0x0e, 7	; 14
 4fc:	fe cf       	rjmp	.-4      	; 0x4fa <spi_MasterTransmit+0x2>
	
	
}
 4fe:	08 95       	ret

00000500 <spi_MasterRead>:

//Trenger ikke denne, fordi MasterTransmitAndReceive gjør det samme
uint8_t spi_MasterRead(){
	//Setter SS lav utenfor funksjonen, altså setter vi SS lav inni mcp2515_read

	spi_MasterTransmit(0x00);
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spi_MasterTransmit>
	
	//Setter SS høy utenfor funksjonen, altså setter vi SS høy igjen inni mcp2515_read

	return SPDR;
 506:	8f b1       	in	r24, 0x0f	; 15
	
}
 508:	08 95       	ret

0000050a <sram_write_data>:
	printf("SRAM test completed with \n%4d errors in write phase and \n %4d errors in retrieval phase \n\n", write_errors, retrieval_errors);
}

void sram_write_data(uint8_t data){
    volatile char *ext_sram = (char *) (0x1800);
    ext_sram[128*PAGE+COL] = data;
 50a:	90 91 5e 02 	lds	r25, 0x025E
 50e:	e0 91 5f 02 	lds	r30, 0x025F
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	20 e8       	ldi	r18, 0x80	; 128
 516:	92 9f       	mul	r25, r18
 518:	e0 0d       	add	r30, r0
 51a:	f1 1d       	adc	r31, r1
 51c:	11 24       	eor	r1, r1
 51e:	f8 5e       	subi	r31, 0xE8	; 232
 520:	80 83       	st	Z, r24
 522:	08 95       	ret

00000524 <sram_goto_page>:
}

void sram_goto_page(uint8_t newPage){
	PAGE = newPage;
 524:	80 93 5e 02 	sts	0x025E, r24
 528:	08 95       	ret

0000052a <sram_goto_column>:
}

void sram_goto_column(uint8_t newColumn){
	COL = newColumn;
 52a:	80 93 5f 02 	sts	0x025F, r24
 52e:	08 95       	ret

00000530 <USART_Transmit>:
 530:	5d 9b       	sbis	0x0b, 5	; 11
 532:	fe cf       	rjmp	.-4      	; 0x530 <USART_Transmit>
 534:	8c b9       	out	0x0c, r24	; 12
 536:	08 95       	ret

00000538 <USART_Receive>:
 538:	5f 9b       	sbis	0x0b, 7	; 11
 53a:	fe cf       	rjmp	.-4      	; 0x538 <USART_Receive>
 53c:	8c b1       	in	r24, 0x0c	; 12
 53e:	08 95       	ret

00000540 <USART_Init>:
 540:	90 bd       	out	0x20, r25	; 32
 542:	89 b9       	out	0x09, r24	; 9
 544:	88 e1       	ldi	r24, 0x18	; 24
 546:	8a b9       	out	0x0a, r24	; 10
 548:	6c e9       	ldi	r22, 0x9C	; 156
 54a:	72 e0       	ldi	r23, 0x02	; 2
 54c:	88 e9       	ldi	r24, 0x98	; 152
 54e:	92 e0       	ldi	r25, 0x02	; 2
 550:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fdevopen>
 554:	08 95       	ret

00000556 <malloc>:
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	82 30       	cpi	r24, 0x02	; 2
 55c:	91 05       	cpc	r25, r1
 55e:	10 f4       	brcc	.+4      	; 0x564 <malloc+0xe>
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	e0 91 62 02 	lds	r30, 0x0262
 568:	f0 91 63 02 	lds	r31, 0x0263
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	a0 e0       	ldi	r26, 0x00	; 0
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	30 97       	sbiw	r30, 0x00	; 0
 576:	39 f1       	breq	.+78     	; 0x5c6 <malloc+0x70>
 578:	40 81       	ld	r20, Z
 57a:	51 81       	ldd	r21, Z+1	; 0x01
 57c:	48 17       	cp	r20, r24
 57e:	59 07       	cpc	r21, r25
 580:	b8 f0       	brcs	.+46     	; 0x5b0 <malloc+0x5a>
 582:	48 17       	cp	r20, r24
 584:	59 07       	cpc	r21, r25
 586:	71 f4       	brne	.+28     	; 0x5a4 <malloc+0x4e>
 588:	82 81       	ldd	r24, Z+2	; 0x02
 58a:	93 81       	ldd	r25, Z+3	; 0x03
 58c:	10 97       	sbiw	r26, 0x00	; 0
 58e:	29 f0       	breq	.+10     	; 0x59a <malloc+0x44>
 590:	13 96       	adiw	r26, 0x03	; 3
 592:	9c 93       	st	X, r25
 594:	8e 93       	st	-X, r24
 596:	12 97       	sbiw	r26, 0x02	; 2
 598:	2c c0       	rjmp	.+88     	; 0x5f2 <malloc+0x9c>
 59a:	90 93 63 02 	sts	0x0263, r25
 59e:	80 93 62 02 	sts	0x0262, r24
 5a2:	27 c0       	rjmp	.+78     	; 0x5f2 <malloc+0x9c>
 5a4:	21 15       	cp	r18, r1
 5a6:	31 05       	cpc	r19, r1
 5a8:	31 f0       	breq	.+12     	; 0x5b6 <malloc+0x60>
 5aa:	42 17       	cp	r20, r18
 5ac:	53 07       	cpc	r21, r19
 5ae:	18 f0       	brcs	.+6      	; 0x5b6 <malloc+0x60>
 5b0:	a9 01       	movw	r20, r18
 5b2:	db 01       	movw	r26, r22
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <malloc+0x62>
 5b6:	ef 01       	movw	r28, r30
 5b8:	9a 01       	movw	r18, r20
 5ba:	bd 01       	movw	r22, r26
 5bc:	df 01       	movw	r26, r30
 5be:	02 80       	ldd	r0, Z+2	; 0x02
 5c0:	f3 81       	ldd	r31, Z+3	; 0x03
 5c2:	e0 2d       	mov	r30, r0
 5c4:	d7 cf       	rjmp	.-82     	; 0x574 <malloc+0x1e>
 5c6:	21 15       	cp	r18, r1
 5c8:	31 05       	cpc	r19, r1
 5ca:	f9 f0       	breq	.+62     	; 0x60a <malloc+0xb4>
 5cc:	28 1b       	sub	r18, r24
 5ce:	39 0b       	sbc	r19, r25
 5d0:	24 30       	cpi	r18, 0x04	; 4
 5d2:	31 05       	cpc	r19, r1
 5d4:	80 f4       	brcc	.+32     	; 0x5f6 <malloc+0xa0>
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	9b 81       	ldd	r25, Y+3	; 0x03
 5da:	61 15       	cp	r22, r1
 5dc:	71 05       	cpc	r23, r1
 5de:	21 f0       	breq	.+8      	; 0x5e8 <malloc+0x92>
 5e0:	fb 01       	movw	r30, r22
 5e2:	93 83       	std	Z+3, r25	; 0x03
 5e4:	82 83       	std	Z+2, r24	; 0x02
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <malloc+0x9a>
 5e8:	90 93 63 02 	sts	0x0263, r25
 5ec:	80 93 62 02 	sts	0x0262, r24
 5f0:	fe 01       	movw	r30, r28
 5f2:	32 96       	adiw	r30, 0x02	; 2
 5f4:	44 c0       	rjmp	.+136    	; 0x67e <malloc+0x128>
 5f6:	fe 01       	movw	r30, r28
 5f8:	e2 0f       	add	r30, r18
 5fa:	f3 1f       	adc	r31, r19
 5fc:	81 93       	st	Z+, r24
 5fe:	91 93       	st	Z+, r25
 600:	22 50       	subi	r18, 0x02	; 2
 602:	31 09       	sbc	r19, r1
 604:	39 83       	std	Y+1, r19	; 0x01
 606:	28 83       	st	Y, r18
 608:	3a c0       	rjmp	.+116    	; 0x67e <malloc+0x128>
 60a:	20 91 60 02 	lds	r18, 0x0260
 60e:	30 91 61 02 	lds	r19, 0x0261
 612:	23 2b       	or	r18, r19
 614:	41 f4       	brne	.+16     	; 0x626 <malloc+0xd0>
 616:	20 91 02 01 	lds	r18, 0x0102
 61a:	30 91 03 01 	lds	r19, 0x0103
 61e:	30 93 61 02 	sts	0x0261, r19
 622:	20 93 60 02 	sts	0x0260, r18
 626:	20 91 00 01 	lds	r18, 0x0100
 62a:	30 91 01 01 	lds	r19, 0x0101
 62e:	21 15       	cp	r18, r1
 630:	31 05       	cpc	r19, r1
 632:	41 f4       	brne	.+16     	; 0x644 <malloc+0xee>
 634:	2d b7       	in	r18, 0x3d	; 61
 636:	3e b7       	in	r19, 0x3e	; 62
 638:	40 91 04 01 	lds	r20, 0x0104
 63c:	50 91 05 01 	lds	r21, 0x0105
 640:	24 1b       	sub	r18, r20
 642:	35 0b       	sbc	r19, r21
 644:	e0 91 60 02 	lds	r30, 0x0260
 648:	f0 91 61 02 	lds	r31, 0x0261
 64c:	e2 17       	cp	r30, r18
 64e:	f3 07       	cpc	r31, r19
 650:	a0 f4       	brcc	.+40     	; 0x67a <malloc+0x124>
 652:	2e 1b       	sub	r18, r30
 654:	3f 0b       	sbc	r19, r31
 656:	28 17       	cp	r18, r24
 658:	39 07       	cpc	r19, r25
 65a:	78 f0       	brcs	.+30     	; 0x67a <malloc+0x124>
 65c:	ac 01       	movw	r20, r24
 65e:	4e 5f       	subi	r20, 0xFE	; 254
 660:	5f 4f       	sbci	r21, 0xFF	; 255
 662:	24 17       	cp	r18, r20
 664:	35 07       	cpc	r19, r21
 666:	48 f0       	brcs	.+18     	; 0x67a <malloc+0x124>
 668:	4e 0f       	add	r20, r30
 66a:	5f 1f       	adc	r21, r31
 66c:	50 93 61 02 	sts	0x0261, r21
 670:	40 93 60 02 	sts	0x0260, r20
 674:	81 93       	st	Z+, r24
 676:	91 93       	st	Z+, r25
 678:	02 c0       	rjmp	.+4      	; 0x67e <malloc+0x128>
 67a:	e0 e0       	ldi	r30, 0x00	; 0
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	cf 01       	movw	r24, r30
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	08 95       	ret

00000686 <free>:
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	00 97       	sbiw	r24, 0x00	; 0
 68c:	09 f4       	brne	.+2      	; 0x690 <free+0xa>
 68e:	87 c0       	rjmp	.+270    	; 0x79e <free+0x118>
 690:	fc 01       	movw	r30, r24
 692:	32 97       	sbiw	r30, 0x02	; 2
 694:	13 82       	std	Z+3, r1	; 0x03
 696:	12 82       	std	Z+2, r1	; 0x02
 698:	c0 91 62 02 	lds	r28, 0x0262
 69c:	d0 91 63 02 	lds	r29, 0x0263
 6a0:	20 97       	sbiw	r28, 0x00	; 0
 6a2:	81 f4       	brne	.+32     	; 0x6c4 <free+0x3e>
 6a4:	20 81       	ld	r18, Z
 6a6:	31 81       	ldd	r19, Z+1	; 0x01
 6a8:	28 0f       	add	r18, r24
 6aa:	39 1f       	adc	r19, r25
 6ac:	80 91 60 02 	lds	r24, 0x0260
 6b0:	90 91 61 02 	lds	r25, 0x0261
 6b4:	82 17       	cp	r24, r18
 6b6:	93 07       	cpc	r25, r19
 6b8:	79 f5       	brne	.+94     	; 0x718 <free+0x92>
 6ba:	f0 93 61 02 	sts	0x0261, r31
 6be:	e0 93 60 02 	sts	0x0260, r30
 6c2:	6d c0       	rjmp	.+218    	; 0x79e <free+0x118>
 6c4:	de 01       	movw	r26, r28
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	ae 17       	cp	r26, r30
 6cc:	bf 07       	cpc	r27, r31
 6ce:	50 f4       	brcc	.+20     	; 0x6e4 <free+0x5e>
 6d0:	12 96       	adiw	r26, 0x02	; 2
 6d2:	4d 91       	ld	r20, X+
 6d4:	5c 91       	ld	r21, X
 6d6:	13 97       	sbiw	r26, 0x03	; 3
 6d8:	9d 01       	movw	r18, r26
 6da:	41 15       	cp	r20, r1
 6dc:	51 05       	cpc	r21, r1
 6de:	09 f1       	breq	.+66     	; 0x722 <free+0x9c>
 6e0:	da 01       	movw	r26, r20
 6e2:	f3 cf       	rjmp	.-26     	; 0x6ca <free+0x44>
 6e4:	b3 83       	std	Z+3, r27	; 0x03
 6e6:	a2 83       	std	Z+2, r26	; 0x02
 6e8:	40 81       	ld	r20, Z
 6ea:	51 81       	ldd	r21, Z+1	; 0x01
 6ec:	84 0f       	add	r24, r20
 6ee:	95 1f       	adc	r25, r21
 6f0:	8a 17       	cp	r24, r26
 6f2:	9b 07       	cpc	r25, r27
 6f4:	71 f4       	brne	.+28     	; 0x712 <free+0x8c>
 6f6:	8d 91       	ld	r24, X+
 6f8:	9c 91       	ld	r25, X
 6fa:	11 97       	sbiw	r26, 0x01	; 1
 6fc:	84 0f       	add	r24, r20
 6fe:	95 1f       	adc	r25, r21
 700:	02 96       	adiw	r24, 0x02	; 2
 702:	91 83       	std	Z+1, r25	; 0x01
 704:	80 83       	st	Z, r24
 706:	12 96       	adiw	r26, 0x02	; 2
 708:	8d 91       	ld	r24, X+
 70a:	9c 91       	ld	r25, X
 70c:	13 97       	sbiw	r26, 0x03	; 3
 70e:	93 83       	std	Z+3, r25	; 0x03
 710:	82 83       	std	Z+2, r24	; 0x02
 712:	21 15       	cp	r18, r1
 714:	31 05       	cpc	r19, r1
 716:	29 f4       	brne	.+10     	; 0x722 <free+0x9c>
 718:	f0 93 63 02 	sts	0x0263, r31
 71c:	e0 93 62 02 	sts	0x0262, r30
 720:	3e c0       	rjmp	.+124    	; 0x79e <free+0x118>
 722:	d9 01       	movw	r26, r18
 724:	13 96       	adiw	r26, 0x03	; 3
 726:	fc 93       	st	X, r31
 728:	ee 93       	st	-X, r30
 72a:	12 97       	sbiw	r26, 0x02	; 2
 72c:	4d 91       	ld	r20, X+
 72e:	5d 91       	ld	r21, X+
 730:	a4 0f       	add	r26, r20
 732:	b5 1f       	adc	r27, r21
 734:	ea 17       	cp	r30, r26
 736:	fb 07       	cpc	r31, r27
 738:	79 f4       	brne	.+30     	; 0x758 <free+0xd2>
 73a:	80 81       	ld	r24, Z
 73c:	91 81       	ldd	r25, Z+1	; 0x01
 73e:	84 0f       	add	r24, r20
 740:	95 1f       	adc	r25, r21
 742:	02 96       	adiw	r24, 0x02	; 2
 744:	d9 01       	movw	r26, r18
 746:	11 96       	adiw	r26, 0x01	; 1
 748:	9c 93       	st	X, r25
 74a:	8e 93       	st	-X, r24
 74c:	82 81       	ldd	r24, Z+2	; 0x02
 74e:	93 81       	ldd	r25, Z+3	; 0x03
 750:	13 96       	adiw	r26, 0x03	; 3
 752:	9c 93       	st	X, r25
 754:	8e 93       	st	-X, r24
 756:	12 97       	sbiw	r26, 0x02	; 2
 758:	e0 e0       	ldi	r30, 0x00	; 0
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	9b 81       	ldd	r25, Y+3	; 0x03
 760:	00 97       	sbiw	r24, 0x00	; 0
 762:	19 f0       	breq	.+6      	; 0x76a <free+0xe4>
 764:	fe 01       	movw	r30, r28
 766:	ec 01       	movw	r28, r24
 768:	f9 cf       	rjmp	.-14     	; 0x75c <free+0xd6>
 76a:	ce 01       	movw	r24, r28
 76c:	02 96       	adiw	r24, 0x02	; 2
 76e:	28 81       	ld	r18, Y
 770:	39 81       	ldd	r19, Y+1	; 0x01
 772:	82 0f       	add	r24, r18
 774:	93 1f       	adc	r25, r19
 776:	20 91 60 02 	lds	r18, 0x0260
 77a:	30 91 61 02 	lds	r19, 0x0261
 77e:	28 17       	cp	r18, r24
 780:	39 07       	cpc	r19, r25
 782:	69 f4       	brne	.+26     	; 0x79e <free+0x118>
 784:	30 97       	sbiw	r30, 0x00	; 0
 786:	29 f4       	brne	.+10     	; 0x792 <free+0x10c>
 788:	10 92 63 02 	sts	0x0263, r1
 78c:	10 92 62 02 	sts	0x0262, r1
 790:	02 c0       	rjmp	.+4      	; 0x796 <free+0x110>
 792:	13 82       	std	Z+3, r1	; 0x03
 794:	12 82       	std	Z+2, r1	; 0x02
 796:	d0 93 61 02 	sts	0x0261, r29
 79a:	c0 93 60 02 	sts	0x0260, r28
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	08 95       	ret

000007a4 <fdevopen>:
 7a4:	0f 93       	push	r16
 7a6:	1f 93       	push	r17
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	ec 01       	movw	r28, r24
 7ae:	8b 01       	movw	r16, r22
 7b0:	00 97       	sbiw	r24, 0x00	; 0
 7b2:	31 f4       	brne	.+12     	; 0x7c0 <fdevopen+0x1c>
 7b4:	61 15       	cp	r22, r1
 7b6:	71 05       	cpc	r23, r1
 7b8:	19 f4       	brne	.+6      	; 0x7c0 <fdevopen+0x1c>
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	38 c0       	rjmp	.+112    	; 0x830 <fdevopen+0x8c>
 7c0:	6e e0       	ldi	r22, 0x0E	; 14
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 30 06 	call	0xc60	; 0xc60 <calloc>
 7cc:	fc 01       	movw	r30, r24
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	a1 f3       	breq	.-24     	; 0x7ba <fdevopen+0x16>
 7d2:	80 e8       	ldi	r24, 0x80	; 128
 7d4:	83 83       	std	Z+3, r24	; 0x03
 7d6:	01 15       	cp	r16, r1
 7d8:	11 05       	cpc	r17, r1
 7da:	71 f0       	breq	.+28     	; 0x7f8 <fdevopen+0x54>
 7dc:	13 87       	std	Z+11, r17	; 0x0b
 7de:	02 87       	std	Z+10, r16	; 0x0a
 7e0:	81 e8       	ldi	r24, 0x81	; 129
 7e2:	83 83       	std	Z+3, r24	; 0x03
 7e4:	80 91 64 02 	lds	r24, 0x0264
 7e8:	90 91 65 02 	lds	r25, 0x0265
 7ec:	89 2b       	or	r24, r25
 7ee:	21 f4       	brne	.+8      	; 0x7f8 <fdevopen+0x54>
 7f0:	f0 93 65 02 	sts	0x0265, r31
 7f4:	e0 93 64 02 	sts	0x0264, r30
 7f8:	20 97       	sbiw	r28, 0x00	; 0
 7fa:	c9 f0       	breq	.+50     	; 0x82e <fdevopen+0x8a>
 7fc:	d1 87       	std	Z+9, r29	; 0x09
 7fe:	c0 87       	std	Z+8, r28	; 0x08
 800:	83 81       	ldd	r24, Z+3	; 0x03
 802:	82 60       	ori	r24, 0x02	; 2
 804:	83 83       	std	Z+3, r24	; 0x03
 806:	80 91 66 02 	lds	r24, 0x0266
 80a:	90 91 67 02 	lds	r25, 0x0267
 80e:	89 2b       	or	r24, r25
 810:	71 f4       	brne	.+28     	; 0x82e <fdevopen+0x8a>
 812:	f0 93 67 02 	sts	0x0267, r31
 816:	e0 93 66 02 	sts	0x0266, r30
 81a:	80 91 68 02 	lds	r24, 0x0268
 81e:	90 91 69 02 	lds	r25, 0x0269
 822:	89 2b       	or	r24, r25
 824:	21 f4       	brne	.+8      	; 0x82e <fdevopen+0x8a>
 826:	f0 93 69 02 	sts	0x0269, r31
 82a:	e0 93 68 02 	sts	0x0268, r30
 82e:	cf 01       	movw	r24, r30
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	0f 91       	pop	r16
 838:	08 95       	ret

0000083a <printf>:
 83a:	a0 e0       	ldi	r26, 0x00	; 0
 83c:	b0 e0       	ldi	r27, 0x00	; 0
 83e:	e3 e2       	ldi	r30, 0x23	; 35
 840:	f4 e0       	ldi	r31, 0x04	; 4
 842:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__prologue_saves__+0x20>
 846:	fe 01       	movw	r30, r28
 848:	35 96       	adiw	r30, 0x05	; 5
 84a:	61 91       	ld	r22, Z+
 84c:	71 91       	ld	r23, Z+
 84e:	af 01       	movw	r20, r30
 850:	80 91 66 02 	lds	r24, 0x0266
 854:	90 91 67 02 	lds	r25, 0x0267
 858:	0e 94 5e 04 	call	0x8bc	; 0x8bc <vfprintf>
 85c:	e2 e0       	ldi	r30, 0x02	; 2
 85e:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__epilogue_restores__+0x20>

00000862 <puts>:
 862:	0f 93       	push	r16
 864:	1f 93       	push	r17
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	e0 91 66 02 	lds	r30, 0x0266
 86e:	f0 91 67 02 	lds	r31, 0x0267
 872:	23 81       	ldd	r18, Z+3	; 0x03
 874:	21 ff       	sbrs	r18, 1
 876:	1b c0       	rjmp	.+54     	; 0x8ae <puts+0x4c>
 878:	ec 01       	movw	r28, r24
 87a:	00 e0       	ldi	r16, 0x00	; 0
 87c:	10 e0       	ldi	r17, 0x00	; 0
 87e:	89 91       	ld	r24, Y+
 880:	60 91 66 02 	lds	r22, 0x0266
 884:	70 91 67 02 	lds	r23, 0x0267
 888:	db 01       	movw	r26, r22
 88a:	18 96       	adiw	r26, 0x08	; 8
 88c:	ed 91       	ld	r30, X+
 88e:	fc 91       	ld	r31, X
 890:	19 97       	sbiw	r26, 0x09	; 9
 892:	88 23       	and	r24, r24
 894:	31 f0       	breq	.+12     	; 0x8a2 <puts+0x40>
 896:	09 95       	icall
 898:	89 2b       	or	r24, r25
 89a:	89 f3       	breq	.-30     	; 0x87e <puts+0x1c>
 89c:	0f ef       	ldi	r16, 0xFF	; 255
 89e:	1f ef       	ldi	r17, 0xFF	; 255
 8a0:	ee cf       	rjmp	.-36     	; 0x87e <puts+0x1c>
 8a2:	8a e0       	ldi	r24, 0x0A	; 10
 8a4:	09 95       	icall
 8a6:	89 2b       	or	r24, r25
 8a8:	11 f4       	brne	.+4      	; 0x8ae <puts+0x4c>
 8aa:	c8 01       	movw	r24, r16
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <puts+0x50>
 8ae:	8f ef       	ldi	r24, 0xFF	; 255
 8b0:	9f ef       	ldi	r25, 0xFF	; 255
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	1f 91       	pop	r17
 8b8:	0f 91       	pop	r16
 8ba:	08 95       	ret

000008bc <vfprintf>:
 8bc:	ac e0       	ldi	r26, 0x0C	; 12
 8be:	b0 e0       	ldi	r27, 0x00	; 0
 8c0:	e4 e6       	ldi	r30, 0x64	; 100
 8c2:	f4 e0       	ldi	r31, 0x04	; 4
 8c4:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__prologue_saves__>
 8c8:	7c 01       	movw	r14, r24
 8ca:	6b 01       	movw	r12, r22
 8cc:	8a 01       	movw	r16, r20
 8ce:	fc 01       	movw	r30, r24
 8d0:	17 82       	std	Z+7, r1	; 0x07
 8d2:	16 82       	std	Z+6, r1	; 0x06
 8d4:	83 81       	ldd	r24, Z+3	; 0x03
 8d6:	81 ff       	sbrs	r24, 1
 8d8:	bd c1       	rjmp	.+890    	; 0xc54 <vfprintf+0x398>
 8da:	ce 01       	movw	r24, r28
 8dc:	01 96       	adiw	r24, 0x01	; 1
 8de:	4c 01       	movw	r8, r24
 8e0:	f7 01       	movw	r30, r14
 8e2:	93 81       	ldd	r25, Z+3	; 0x03
 8e4:	f6 01       	movw	r30, r12
 8e6:	93 fd       	sbrc	r25, 3
 8e8:	85 91       	lpm	r24, Z+
 8ea:	93 ff       	sbrs	r25, 3
 8ec:	81 91       	ld	r24, Z+
 8ee:	6f 01       	movw	r12, r30
 8f0:	88 23       	and	r24, r24
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <vfprintf+0x3a>
 8f4:	ab c1       	rjmp	.+854    	; 0xc4c <vfprintf+0x390>
 8f6:	85 32       	cpi	r24, 0x25	; 37
 8f8:	39 f4       	brne	.+14     	; 0x908 <vfprintf+0x4c>
 8fa:	93 fd       	sbrc	r25, 3
 8fc:	85 91       	lpm	r24, Z+
 8fe:	93 ff       	sbrs	r25, 3
 900:	81 91       	ld	r24, Z+
 902:	6f 01       	movw	r12, r30
 904:	85 32       	cpi	r24, 0x25	; 37
 906:	29 f4       	brne	.+10     	; 0x912 <vfprintf+0x56>
 908:	b7 01       	movw	r22, r14
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 910:	e7 cf       	rjmp	.-50     	; 0x8e0 <vfprintf+0x24>
 912:	51 2c       	mov	r5, r1
 914:	31 2c       	mov	r3, r1
 916:	20 e0       	ldi	r18, 0x00	; 0
 918:	20 32       	cpi	r18, 0x20	; 32
 91a:	a0 f4       	brcc	.+40     	; 0x944 <vfprintf+0x88>
 91c:	8b 32       	cpi	r24, 0x2B	; 43
 91e:	69 f0       	breq	.+26     	; 0x93a <vfprintf+0x7e>
 920:	30 f4       	brcc	.+12     	; 0x92e <vfprintf+0x72>
 922:	80 32       	cpi	r24, 0x20	; 32
 924:	59 f0       	breq	.+22     	; 0x93c <vfprintf+0x80>
 926:	83 32       	cpi	r24, 0x23	; 35
 928:	69 f4       	brne	.+26     	; 0x944 <vfprintf+0x88>
 92a:	20 61       	ori	r18, 0x10	; 16
 92c:	2c c0       	rjmp	.+88     	; 0x986 <vfprintf+0xca>
 92e:	8d 32       	cpi	r24, 0x2D	; 45
 930:	39 f0       	breq	.+14     	; 0x940 <vfprintf+0x84>
 932:	80 33       	cpi	r24, 0x30	; 48
 934:	39 f4       	brne	.+14     	; 0x944 <vfprintf+0x88>
 936:	21 60       	ori	r18, 0x01	; 1
 938:	26 c0       	rjmp	.+76     	; 0x986 <vfprintf+0xca>
 93a:	22 60       	ori	r18, 0x02	; 2
 93c:	24 60       	ori	r18, 0x04	; 4
 93e:	23 c0       	rjmp	.+70     	; 0x986 <vfprintf+0xca>
 940:	28 60       	ori	r18, 0x08	; 8
 942:	21 c0       	rjmp	.+66     	; 0x986 <vfprintf+0xca>
 944:	27 fd       	sbrc	r18, 7
 946:	27 c0       	rjmp	.+78     	; 0x996 <vfprintf+0xda>
 948:	30 ed       	ldi	r19, 0xD0	; 208
 94a:	38 0f       	add	r19, r24
 94c:	3a 30       	cpi	r19, 0x0A	; 10
 94e:	78 f4       	brcc	.+30     	; 0x96e <vfprintf+0xb2>
 950:	26 ff       	sbrs	r18, 6
 952:	06 c0       	rjmp	.+12     	; 0x960 <vfprintf+0xa4>
 954:	fa e0       	ldi	r31, 0x0A	; 10
 956:	5f 9e       	mul	r5, r31
 958:	30 0d       	add	r19, r0
 95a:	11 24       	eor	r1, r1
 95c:	53 2e       	mov	r5, r19
 95e:	13 c0       	rjmp	.+38     	; 0x986 <vfprintf+0xca>
 960:	8a e0       	ldi	r24, 0x0A	; 10
 962:	38 9e       	mul	r3, r24
 964:	30 0d       	add	r19, r0
 966:	11 24       	eor	r1, r1
 968:	33 2e       	mov	r3, r19
 96a:	20 62       	ori	r18, 0x20	; 32
 96c:	0c c0       	rjmp	.+24     	; 0x986 <vfprintf+0xca>
 96e:	8e 32       	cpi	r24, 0x2E	; 46
 970:	21 f4       	brne	.+8      	; 0x97a <vfprintf+0xbe>
 972:	26 fd       	sbrc	r18, 6
 974:	6b c1       	rjmp	.+726    	; 0xc4c <vfprintf+0x390>
 976:	20 64       	ori	r18, 0x40	; 64
 978:	06 c0       	rjmp	.+12     	; 0x986 <vfprintf+0xca>
 97a:	8c 36       	cpi	r24, 0x6C	; 108
 97c:	11 f4       	brne	.+4      	; 0x982 <vfprintf+0xc6>
 97e:	20 68       	ori	r18, 0x80	; 128
 980:	02 c0       	rjmp	.+4      	; 0x986 <vfprintf+0xca>
 982:	88 36       	cpi	r24, 0x68	; 104
 984:	41 f4       	brne	.+16     	; 0x996 <vfprintf+0xda>
 986:	f6 01       	movw	r30, r12
 988:	93 fd       	sbrc	r25, 3
 98a:	85 91       	lpm	r24, Z+
 98c:	93 ff       	sbrs	r25, 3
 98e:	81 91       	ld	r24, Z+
 990:	6f 01       	movw	r12, r30
 992:	81 11       	cpse	r24, r1
 994:	c1 cf       	rjmp	.-126    	; 0x918 <vfprintf+0x5c>
 996:	98 2f       	mov	r25, r24
 998:	9f 7d       	andi	r25, 0xDF	; 223
 99a:	95 54       	subi	r25, 0x45	; 69
 99c:	93 30       	cpi	r25, 0x03	; 3
 99e:	28 f4       	brcc	.+10     	; 0x9aa <vfprintf+0xee>
 9a0:	0c 5f       	subi	r16, 0xFC	; 252
 9a2:	1f 4f       	sbci	r17, 0xFF	; 255
 9a4:	ff e3       	ldi	r31, 0x3F	; 63
 9a6:	f9 83       	std	Y+1, r31	; 0x01
 9a8:	0d c0       	rjmp	.+26     	; 0x9c4 <vfprintf+0x108>
 9aa:	83 36       	cpi	r24, 0x63	; 99
 9ac:	31 f0       	breq	.+12     	; 0x9ba <vfprintf+0xfe>
 9ae:	83 37       	cpi	r24, 0x73	; 115
 9b0:	71 f0       	breq	.+28     	; 0x9ce <vfprintf+0x112>
 9b2:	83 35       	cpi	r24, 0x53	; 83
 9b4:	09 f0       	breq	.+2      	; 0x9b8 <vfprintf+0xfc>
 9b6:	5b c0       	rjmp	.+182    	; 0xa6e <vfprintf+0x1b2>
 9b8:	22 c0       	rjmp	.+68     	; 0x9fe <vfprintf+0x142>
 9ba:	f8 01       	movw	r30, r16
 9bc:	80 81       	ld	r24, Z
 9be:	89 83       	std	Y+1, r24	; 0x01
 9c0:	0e 5f       	subi	r16, 0xFE	; 254
 9c2:	1f 4f       	sbci	r17, 0xFF	; 255
 9c4:	44 24       	eor	r4, r4
 9c6:	43 94       	inc	r4
 9c8:	51 2c       	mov	r5, r1
 9ca:	54 01       	movw	r10, r8
 9cc:	15 c0       	rjmp	.+42     	; 0x9f8 <vfprintf+0x13c>
 9ce:	38 01       	movw	r6, r16
 9d0:	f2 e0       	ldi	r31, 0x02	; 2
 9d2:	6f 0e       	add	r6, r31
 9d4:	71 1c       	adc	r7, r1
 9d6:	f8 01       	movw	r30, r16
 9d8:	a0 80       	ld	r10, Z
 9da:	b1 80       	ldd	r11, Z+1	; 0x01
 9dc:	26 ff       	sbrs	r18, 6
 9de:	03 c0       	rjmp	.+6      	; 0x9e6 <vfprintf+0x12a>
 9e0:	65 2d       	mov	r22, r5
 9e2:	70 e0       	ldi	r23, 0x00	; 0
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <vfprintf+0x12e>
 9e6:	6f ef       	ldi	r22, 0xFF	; 255
 9e8:	7f ef       	ldi	r23, 0xFF	; 255
 9ea:	c5 01       	movw	r24, r10
 9ec:	2c 87       	std	Y+12, r18	; 0x0c
 9ee:	0e 94 5e 06 	call	0xcbc	; 0xcbc <strnlen>
 9f2:	2c 01       	movw	r4, r24
 9f4:	83 01       	movw	r16, r6
 9f6:	2c 85       	ldd	r18, Y+12	; 0x0c
 9f8:	2f 77       	andi	r18, 0x7F	; 127
 9fa:	22 2e       	mov	r2, r18
 9fc:	17 c0       	rjmp	.+46     	; 0xa2c <vfprintf+0x170>
 9fe:	38 01       	movw	r6, r16
 a00:	f2 e0       	ldi	r31, 0x02	; 2
 a02:	6f 0e       	add	r6, r31
 a04:	71 1c       	adc	r7, r1
 a06:	f8 01       	movw	r30, r16
 a08:	a0 80       	ld	r10, Z
 a0a:	b1 80       	ldd	r11, Z+1	; 0x01
 a0c:	26 ff       	sbrs	r18, 6
 a0e:	03 c0       	rjmp	.+6      	; 0xa16 <vfprintf+0x15a>
 a10:	65 2d       	mov	r22, r5
 a12:	70 e0       	ldi	r23, 0x00	; 0
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <vfprintf+0x15e>
 a16:	6f ef       	ldi	r22, 0xFF	; 255
 a18:	7f ef       	ldi	r23, 0xFF	; 255
 a1a:	c5 01       	movw	r24, r10
 a1c:	2c 87       	std	Y+12, r18	; 0x0c
 a1e:	0e 94 4c 06 	call	0xc98	; 0xc98 <strnlen_P>
 a22:	2c 01       	movw	r4, r24
 a24:	2c 85       	ldd	r18, Y+12	; 0x0c
 a26:	20 68       	ori	r18, 0x80	; 128
 a28:	22 2e       	mov	r2, r18
 a2a:	83 01       	movw	r16, r6
 a2c:	23 fc       	sbrc	r2, 3
 a2e:	1b c0       	rjmp	.+54     	; 0xa66 <vfprintf+0x1aa>
 a30:	83 2d       	mov	r24, r3
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	48 16       	cp	r4, r24
 a36:	59 06       	cpc	r5, r25
 a38:	b0 f4       	brcc	.+44     	; 0xa66 <vfprintf+0x1aa>
 a3a:	b7 01       	movw	r22, r14
 a3c:	80 e2       	ldi	r24, 0x20	; 32
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 a44:	3a 94       	dec	r3
 a46:	f4 cf       	rjmp	.-24     	; 0xa30 <vfprintf+0x174>
 a48:	f5 01       	movw	r30, r10
 a4a:	27 fc       	sbrc	r2, 7
 a4c:	85 91       	lpm	r24, Z+
 a4e:	27 fe       	sbrs	r2, 7
 a50:	81 91       	ld	r24, Z+
 a52:	5f 01       	movw	r10, r30
 a54:	b7 01       	movw	r22, r14
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 a5c:	31 10       	cpse	r3, r1
 a5e:	3a 94       	dec	r3
 a60:	f1 e0       	ldi	r31, 0x01	; 1
 a62:	4f 1a       	sub	r4, r31
 a64:	51 08       	sbc	r5, r1
 a66:	41 14       	cp	r4, r1
 a68:	51 04       	cpc	r5, r1
 a6a:	71 f7       	brne	.-36     	; 0xa48 <vfprintf+0x18c>
 a6c:	e5 c0       	rjmp	.+458    	; 0xc38 <vfprintf+0x37c>
 a6e:	84 36       	cpi	r24, 0x64	; 100
 a70:	11 f0       	breq	.+4      	; 0xa76 <vfprintf+0x1ba>
 a72:	89 36       	cpi	r24, 0x69	; 105
 a74:	39 f5       	brne	.+78     	; 0xac4 <vfprintf+0x208>
 a76:	f8 01       	movw	r30, r16
 a78:	27 ff       	sbrs	r18, 7
 a7a:	07 c0       	rjmp	.+14     	; 0xa8a <vfprintf+0x1ce>
 a7c:	60 81       	ld	r22, Z
 a7e:	71 81       	ldd	r23, Z+1	; 0x01
 a80:	82 81       	ldd	r24, Z+2	; 0x02
 a82:	93 81       	ldd	r25, Z+3	; 0x03
 a84:	0c 5f       	subi	r16, 0xFC	; 252
 a86:	1f 4f       	sbci	r17, 0xFF	; 255
 a88:	08 c0       	rjmp	.+16     	; 0xa9a <vfprintf+0x1de>
 a8a:	60 81       	ld	r22, Z
 a8c:	71 81       	ldd	r23, Z+1	; 0x01
 a8e:	88 27       	eor	r24, r24
 a90:	77 fd       	sbrc	r23, 7
 a92:	80 95       	com	r24
 a94:	98 2f       	mov	r25, r24
 a96:	0e 5f       	subi	r16, 0xFE	; 254
 a98:	1f 4f       	sbci	r17, 0xFF	; 255
 a9a:	2f 76       	andi	r18, 0x6F	; 111
 a9c:	b2 2e       	mov	r11, r18
 a9e:	97 ff       	sbrs	r25, 7
 aa0:	09 c0       	rjmp	.+18     	; 0xab4 <vfprintf+0x1f8>
 aa2:	90 95       	com	r25
 aa4:	80 95       	com	r24
 aa6:	70 95       	com	r23
 aa8:	61 95       	neg	r22
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	8f 4f       	sbci	r24, 0xFF	; 255
 aae:	9f 4f       	sbci	r25, 0xFF	; 255
 ab0:	20 68       	ori	r18, 0x80	; 128
 ab2:	b2 2e       	mov	r11, r18
 ab4:	2a e0       	ldi	r18, 0x0A	; 10
 ab6:	30 e0       	ldi	r19, 0x00	; 0
 ab8:	a4 01       	movw	r20, r8
 aba:	0e 94 9b 06 	call	0xd36	; 0xd36 <__ultoa_invert>
 abe:	a8 2e       	mov	r10, r24
 ac0:	a8 18       	sub	r10, r8
 ac2:	44 c0       	rjmp	.+136    	; 0xb4c <vfprintf+0x290>
 ac4:	85 37       	cpi	r24, 0x75	; 117
 ac6:	29 f4       	brne	.+10     	; 0xad2 <vfprintf+0x216>
 ac8:	2f 7e       	andi	r18, 0xEF	; 239
 aca:	b2 2e       	mov	r11, r18
 acc:	2a e0       	ldi	r18, 0x0A	; 10
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	25 c0       	rjmp	.+74     	; 0xb1c <vfprintf+0x260>
 ad2:	f2 2f       	mov	r31, r18
 ad4:	f9 7f       	andi	r31, 0xF9	; 249
 ad6:	bf 2e       	mov	r11, r31
 ad8:	8f 36       	cpi	r24, 0x6F	; 111
 ada:	c1 f0       	breq	.+48     	; 0xb0c <vfprintf+0x250>
 adc:	18 f4       	brcc	.+6      	; 0xae4 <vfprintf+0x228>
 ade:	88 35       	cpi	r24, 0x58	; 88
 ae0:	79 f0       	breq	.+30     	; 0xb00 <vfprintf+0x244>
 ae2:	b4 c0       	rjmp	.+360    	; 0xc4c <vfprintf+0x390>
 ae4:	80 37       	cpi	r24, 0x70	; 112
 ae6:	19 f0       	breq	.+6      	; 0xaee <vfprintf+0x232>
 ae8:	88 37       	cpi	r24, 0x78	; 120
 aea:	21 f0       	breq	.+8      	; 0xaf4 <vfprintf+0x238>
 aec:	af c0       	rjmp	.+350    	; 0xc4c <vfprintf+0x390>
 aee:	2f 2f       	mov	r18, r31
 af0:	20 61       	ori	r18, 0x10	; 16
 af2:	b2 2e       	mov	r11, r18
 af4:	b4 fe       	sbrs	r11, 4
 af6:	0d c0       	rjmp	.+26     	; 0xb12 <vfprintf+0x256>
 af8:	8b 2d       	mov	r24, r11
 afa:	84 60       	ori	r24, 0x04	; 4
 afc:	b8 2e       	mov	r11, r24
 afe:	09 c0       	rjmp	.+18     	; 0xb12 <vfprintf+0x256>
 b00:	24 ff       	sbrs	r18, 4
 b02:	0a c0       	rjmp	.+20     	; 0xb18 <vfprintf+0x25c>
 b04:	9f 2f       	mov	r25, r31
 b06:	96 60       	ori	r25, 0x06	; 6
 b08:	b9 2e       	mov	r11, r25
 b0a:	06 c0       	rjmp	.+12     	; 0xb18 <vfprintf+0x25c>
 b0c:	28 e0       	ldi	r18, 0x08	; 8
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	05 c0       	rjmp	.+10     	; 0xb1c <vfprintf+0x260>
 b12:	20 e1       	ldi	r18, 0x10	; 16
 b14:	30 e0       	ldi	r19, 0x00	; 0
 b16:	02 c0       	rjmp	.+4      	; 0xb1c <vfprintf+0x260>
 b18:	20 e1       	ldi	r18, 0x10	; 16
 b1a:	32 e0       	ldi	r19, 0x02	; 2
 b1c:	f8 01       	movw	r30, r16
 b1e:	b7 fe       	sbrs	r11, 7
 b20:	07 c0       	rjmp	.+14     	; 0xb30 <vfprintf+0x274>
 b22:	60 81       	ld	r22, Z
 b24:	71 81       	ldd	r23, Z+1	; 0x01
 b26:	82 81       	ldd	r24, Z+2	; 0x02
 b28:	93 81       	ldd	r25, Z+3	; 0x03
 b2a:	0c 5f       	subi	r16, 0xFC	; 252
 b2c:	1f 4f       	sbci	r17, 0xFF	; 255
 b2e:	06 c0       	rjmp	.+12     	; 0xb3c <vfprintf+0x280>
 b30:	60 81       	ld	r22, Z
 b32:	71 81       	ldd	r23, Z+1	; 0x01
 b34:	80 e0       	ldi	r24, 0x00	; 0
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	0e 5f       	subi	r16, 0xFE	; 254
 b3a:	1f 4f       	sbci	r17, 0xFF	; 255
 b3c:	a4 01       	movw	r20, r8
 b3e:	0e 94 9b 06 	call	0xd36	; 0xd36 <__ultoa_invert>
 b42:	a8 2e       	mov	r10, r24
 b44:	a8 18       	sub	r10, r8
 b46:	fb 2d       	mov	r31, r11
 b48:	ff 77       	andi	r31, 0x7F	; 127
 b4a:	bf 2e       	mov	r11, r31
 b4c:	b6 fe       	sbrs	r11, 6
 b4e:	0b c0       	rjmp	.+22     	; 0xb66 <vfprintf+0x2aa>
 b50:	2b 2d       	mov	r18, r11
 b52:	2e 7f       	andi	r18, 0xFE	; 254
 b54:	a5 14       	cp	r10, r5
 b56:	50 f4       	brcc	.+20     	; 0xb6c <vfprintf+0x2b0>
 b58:	b4 fe       	sbrs	r11, 4
 b5a:	0a c0       	rjmp	.+20     	; 0xb70 <vfprintf+0x2b4>
 b5c:	b2 fc       	sbrc	r11, 2
 b5e:	08 c0       	rjmp	.+16     	; 0xb70 <vfprintf+0x2b4>
 b60:	2b 2d       	mov	r18, r11
 b62:	2e 7e       	andi	r18, 0xEE	; 238
 b64:	05 c0       	rjmp	.+10     	; 0xb70 <vfprintf+0x2b4>
 b66:	7a 2c       	mov	r7, r10
 b68:	2b 2d       	mov	r18, r11
 b6a:	03 c0       	rjmp	.+6      	; 0xb72 <vfprintf+0x2b6>
 b6c:	7a 2c       	mov	r7, r10
 b6e:	01 c0       	rjmp	.+2      	; 0xb72 <vfprintf+0x2b6>
 b70:	75 2c       	mov	r7, r5
 b72:	24 ff       	sbrs	r18, 4
 b74:	0d c0       	rjmp	.+26     	; 0xb90 <vfprintf+0x2d4>
 b76:	fe 01       	movw	r30, r28
 b78:	ea 0d       	add	r30, r10
 b7a:	f1 1d       	adc	r31, r1
 b7c:	80 81       	ld	r24, Z
 b7e:	80 33       	cpi	r24, 0x30	; 48
 b80:	11 f4       	brne	.+4      	; 0xb86 <vfprintf+0x2ca>
 b82:	29 7e       	andi	r18, 0xE9	; 233
 b84:	09 c0       	rjmp	.+18     	; 0xb98 <vfprintf+0x2dc>
 b86:	22 ff       	sbrs	r18, 2
 b88:	06 c0       	rjmp	.+12     	; 0xb96 <vfprintf+0x2da>
 b8a:	73 94       	inc	r7
 b8c:	73 94       	inc	r7
 b8e:	04 c0       	rjmp	.+8      	; 0xb98 <vfprintf+0x2dc>
 b90:	82 2f       	mov	r24, r18
 b92:	86 78       	andi	r24, 0x86	; 134
 b94:	09 f0       	breq	.+2      	; 0xb98 <vfprintf+0x2dc>
 b96:	73 94       	inc	r7
 b98:	23 fd       	sbrc	r18, 3
 b9a:	13 c0       	rjmp	.+38     	; 0xbc2 <vfprintf+0x306>
 b9c:	20 ff       	sbrs	r18, 0
 b9e:	06 c0       	rjmp	.+12     	; 0xbac <vfprintf+0x2f0>
 ba0:	5a 2c       	mov	r5, r10
 ba2:	73 14       	cp	r7, r3
 ba4:	18 f4       	brcc	.+6      	; 0xbac <vfprintf+0x2f0>
 ba6:	53 0c       	add	r5, r3
 ba8:	57 18       	sub	r5, r7
 baa:	73 2c       	mov	r7, r3
 bac:	73 14       	cp	r7, r3
 bae:	68 f4       	brcc	.+26     	; 0xbca <vfprintf+0x30e>
 bb0:	b7 01       	movw	r22, r14
 bb2:	80 e2       	ldi	r24, 0x20	; 32
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	2c 87       	std	Y+12, r18	; 0x0c
 bb8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 bbc:	73 94       	inc	r7
 bbe:	2c 85       	ldd	r18, Y+12	; 0x0c
 bc0:	f5 cf       	rjmp	.-22     	; 0xbac <vfprintf+0x2f0>
 bc2:	73 14       	cp	r7, r3
 bc4:	10 f4       	brcc	.+4      	; 0xbca <vfprintf+0x30e>
 bc6:	37 18       	sub	r3, r7
 bc8:	01 c0       	rjmp	.+2      	; 0xbcc <vfprintf+0x310>
 bca:	31 2c       	mov	r3, r1
 bcc:	24 ff       	sbrs	r18, 4
 bce:	12 c0       	rjmp	.+36     	; 0xbf4 <vfprintf+0x338>
 bd0:	b7 01       	movw	r22, r14
 bd2:	80 e3       	ldi	r24, 0x30	; 48
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	2c 87       	std	Y+12, r18	; 0x0c
 bd8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 bdc:	2c 85       	ldd	r18, Y+12	; 0x0c
 bde:	22 ff       	sbrs	r18, 2
 be0:	17 c0       	rjmp	.+46     	; 0xc10 <vfprintf+0x354>
 be2:	21 ff       	sbrs	r18, 1
 be4:	03 c0       	rjmp	.+6      	; 0xbec <vfprintf+0x330>
 be6:	88 e5       	ldi	r24, 0x58	; 88
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	02 c0       	rjmp	.+4      	; 0xbf0 <vfprintf+0x334>
 bec:	88 e7       	ldi	r24, 0x78	; 120
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	b7 01       	movw	r22, r14
 bf2:	0c c0       	rjmp	.+24     	; 0xc0c <vfprintf+0x350>
 bf4:	82 2f       	mov	r24, r18
 bf6:	86 78       	andi	r24, 0x86	; 134
 bf8:	59 f0       	breq	.+22     	; 0xc10 <vfprintf+0x354>
 bfa:	21 fd       	sbrc	r18, 1
 bfc:	02 c0       	rjmp	.+4      	; 0xc02 <vfprintf+0x346>
 bfe:	80 e2       	ldi	r24, 0x20	; 32
 c00:	01 c0       	rjmp	.+2      	; 0xc04 <vfprintf+0x348>
 c02:	8b e2       	ldi	r24, 0x2B	; 43
 c04:	27 fd       	sbrc	r18, 7
 c06:	8d e2       	ldi	r24, 0x2D	; 45
 c08:	b7 01       	movw	r22, r14
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 c10:	a5 14       	cp	r10, r5
 c12:	38 f4       	brcc	.+14     	; 0xc22 <vfprintf+0x366>
 c14:	b7 01       	movw	r22, r14
 c16:	80 e3       	ldi	r24, 0x30	; 48
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 c1e:	5a 94       	dec	r5
 c20:	f7 cf       	rjmp	.-18     	; 0xc10 <vfprintf+0x354>
 c22:	aa 94       	dec	r10
 c24:	f4 01       	movw	r30, r8
 c26:	ea 0d       	add	r30, r10
 c28:	f1 1d       	adc	r31, r1
 c2a:	80 81       	ld	r24, Z
 c2c:	b7 01       	movw	r22, r14
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 c34:	a1 10       	cpse	r10, r1
 c36:	f5 cf       	rjmp	.-22     	; 0xc22 <vfprintf+0x366>
 c38:	33 20       	and	r3, r3
 c3a:	09 f4       	brne	.+2      	; 0xc3e <vfprintf+0x382>
 c3c:	51 ce       	rjmp	.-862    	; 0x8e0 <vfprintf+0x24>
 c3e:	b7 01       	movw	r22, r14
 c40:	80 e2       	ldi	r24, 0x20	; 32
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 c48:	3a 94       	dec	r3
 c4a:	f6 cf       	rjmp	.-20     	; 0xc38 <vfprintf+0x37c>
 c4c:	f7 01       	movw	r30, r14
 c4e:	86 81       	ldd	r24, Z+6	; 0x06
 c50:	97 81       	ldd	r25, Z+7	; 0x07
 c52:	02 c0       	rjmp	.+4      	; 0xc58 <vfprintf+0x39c>
 c54:	8f ef       	ldi	r24, 0xFF	; 255
 c56:	9f ef       	ldi	r25, 0xFF	; 255
 c58:	2c 96       	adiw	r28, 0x0c	; 12
 c5a:	e2 e1       	ldi	r30, 0x12	; 18
 c5c:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__epilogue_restores__>

00000c60 <calloc>:
 c60:	0f 93       	push	r16
 c62:	1f 93       	push	r17
 c64:	cf 93       	push	r28
 c66:	df 93       	push	r29
 c68:	86 9f       	mul	r24, r22
 c6a:	80 01       	movw	r16, r0
 c6c:	87 9f       	mul	r24, r23
 c6e:	10 0d       	add	r17, r0
 c70:	96 9f       	mul	r25, r22
 c72:	10 0d       	add	r17, r0
 c74:	11 24       	eor	r1, r1
 c76:	c8 01       	movw	r24, r16
 c78:	0e 94 ab 02 	call	0x556	; 0x556 <malloc>
 c7c:	ec 01       	movw	r28, r24
 c7e:	00 97       	sbiw	r24, 0x00	; 0
 c80:	29 f0       	breq	.+10     	; 0xc8c <calloc+0x2c>
 c82:	a8 01       	movw	r20, r16
 c84:	60 e0       	ldi	r22, 0x00	; 0
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	0e 94 57 06 	call	0xcae	; 0xcae <memset>
 c8c:	ce 01       	movw	r24, r28
 c8e:	df 91       	pop	r29
 c90:	cf 91       	pop	r28
 c92:	1f 91       	pop	r17
 c94:	0f 91       	pop	r16
 c96:	08 95       	ret

00000c98 <strnlen_P>:
 c98:	fc 01       	movw	r30, r24
 c9a:	05 90       	lpm	r0, Z+
 c9c:	61 50       	subi	r22, 0x01	; 1
 c9e:	70 40       	sbci	r23, 0x00	; 0
 ca0:	01 10       	cpse	r0, r1
 ca2:	d8 f7       	brcc	.-10     	; 0xc9a <strnlen_P+0x2>
 ca4:	80 95       	com	r24
 ca6:	90 95       	com	r25
 ca8:	8e 0f       	add	r24, r30
 caa:	9f 1f       	adc	r25, r31
 cac:	08 95       	ret

00000cae <memset>:
 cae:	dc 01       	movw	r26, r24
 cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <memset+0x6>
 cb2:	6d 93       	st	X+, r22
 cb4:	41 50       	subi	r20, 0x01	; 1
 cb6:	50 40       	sbci	r21, 0x00	; 0
 cb8:	e0 f7       	brcc	.-8      	; 0xcb2 <memset+0x4>
 cba:	08 95       	ret

00000cbc <strnlen>:
 cbc:	fc 01       	movw	r30, r24
 cbe:	61 50       	subi	r22, 0x01	; 1
 cc0:	70 40       	sbci	r23, 0x00	; 0
 cc2:	01 90       	ld	r0, Z+
 cc4:	01 10       	cpse	r0, r1
 cc6:	d8 f7       	brcc	.-10     	; 0xcbe <strnlen+0x2>
 cc8:	80 95       	com	r24
 cca:	90 95       	com	r25
 ccc:	8e 0f       	add	r24, r30
 cce:	9f 1f       	adc	r25, r31
 cd0:	08 95       	ret

00000cd2 <fputc>:
 cd2:	0f 93       	push	r16
 cd4:	1f 93       	push	r17
 cd6:	cf 93       	push	r28
 cd8:	df 93       	push	r29
 cda:	18 2f       	mov	r17, r24
 cdc:	09 2f       	mov	r16, r25
 cde:	eb 01       	movw	r28, r22
 ce0:	8b 81       	ldd	r24, Y+3	; 0x03
 ce2:	81 fd       	sbrc	r24, 1
 ce4:	03 c0       	rjmp	.+6      	; 0xcec <fputc+0x1a>
 ce6:	8f ef       	ldi	r24, 0xFF	; 255
 ce8:	9f ef       	ldi	r25, 0xFF	; 255
 cea:	20 c0       	rjmp	.+64     	; 0xd2c <fputc+0x5a>
 cec:	82 ff       	sbrs	r24, 2
 cee:	10 c0       	rjmp	.+32     	; 0xd10 <fputc+0x3e>
 cf0:	4e 81       	ldd	r20, Y+6	; 0x06
 cf2:	5f 81       	ldd	r21, Y+7	; 0x07
 cf4:	2c 81       	ldd	r18, Y+4	; 0x04
 cf6:	3d 81       	ldd	r19, Y+5	; 0x05
 cf8:	42 17       	cp	r20, r18
 cfa:	53 07       	cpc	r21, r19
 cfc:	7c f4       	brge	.+30     	; 0xd1c <fputc+0x4a>
 cfe:	e8 81       	ld	r30, Y
 d00:	f9 81       	ldd	r31, Y+1	; 0x01
 d02:	9f 01       	movw	r18, r30
 d04:	2f 5f       	subi	r18, 0xFF	; 255
 d06:	3f 4f       	sbci	r19, 0xFF	; 255
 d08:	39 83       	std	Y+1, r19	; 0x01
 d0a:	28 83       	st	Y, r18
 d0c:	10 83       	st	Z, r17
 d0e:	06 c0       	rjmp	.+12     	; 0xd1c <fputc+0x4a>
 d10:	e8 85       	ldd	r30, Y+8	; 0x08
 d12:	f9 85       	ldd	r31, Y+9	; 0x09
 d14:	81 2f       	mov	r24, r17
 d16:	09 95       	icall
 d18:	89 2b       	or	r24, r25
 d1a:	29 f7       	brne	.-54     	; 0xce6 <fputc+0x14>
 d1c:	2e 81       	ldd	r18, Y+6	; 0x06
 d1e:	3f 81       	ldd	r19, Y+7	; 0x07
 d20:	2f 5f       	subi	r18, 0xFF	; 255
 d22:	3f 4f       	sbci	r19, 0xFF	; 255
 d24:	3f 83       	std	Y+7, r19	; 0x07
 d26:	2e 83       	std	Y+6, r18	; 0x06
 d28:	81 2f       	mov	r24, r17
 d2a:	90 2f       	mov	r25, r16
 d2c:	df 91       	pop	r29
 d2e:	cf 91       	pop	r28
 d30:	1f 91       	pop	r17
 d32:	0f 91       	pop	r16
 d34:	08 95       	ret

00000d36 <__ultoa_invert>:
 d36:	fa 01       	movw	r30, r20
 d38:	aa 27       	eor	r26, r26
 d3a:	28 30       	cpi	r18, 0x08	; 8
 d3c:	51 f1       	breq	.+84     	; 0xd92 <__ultoa_invert+0x5c>
 d3e:	20 31       	cpi	r18, 0x10	; 16
 d40:	81 f1       	breq	.+96     	; 0xda2 <__ultoa_invert+0x6c>
 d42:	e8 94       	clt
 d44:	6f 93       	push	r22
 d46:	6e 7f       	andi	r22, 0xFE	; 254
 d48:	6e 5f       	subi	r22, 0xFE	; 254
 d4a:	7f 4f       	sbci	r23, 0xFF	; 255
 d4c:	8f 4f       	sbci	r24, 0xFF	; 255
 d4e:	9f 4f       	sbci	r25, 0xFF	; 255
 d50:	af 4f       	sbci	r26, 0xFF	; 255
 d52:	b1 e0       	ldi	r27, 0x01	; 1
 d54:	3e d0       	rcall	.+124    	; 0xdd2 <__ultoa_invert+0x9c>
 d56:	b4 e0       	ldi	r27, 0x04	; 4
 d58:	3c d0       	rcall	.+120    	; 0xdd2 <__ultoa_invert+0x9c>
 d5a:	67 0f       	add	r22, r23
 d5c:	78 1f       	adc	r23, r24
 d5e:	89 1f       	adc	r24, r25
 d60:	9a 1f       	adc	r25, r26
 d62:	a1 1d       	adc	r26, r1
 d64:	68 0f       	add	r22, r24
 d66:	79 1f       	adc	r23, r25
 d68:	8a 1f       	adc	r24, r26
 d6a:	91 1d       	adc	r25, r1
 d6c:	a1 1d       	adc	r26, r1
 d6e:	6a 0f       	add	r22, r26
 d70:	71 1d       	adc	r23, r1
 d72:	81 1d       	adc	r24, r1
 d74:	91 1d       	adc	r25, r1
 d76:	a1 1d       	adc	r26, r1
 d78:	20 d0       	rcall	.+64     	; 0xdba <__ultoa_invert+0x84>
 d7a:	09 f4       	brne	.+2      	; 0xd7e <__ultoa_invert+0x48>
 d7c:	68 94       	set
 d7e:	3f 91       	pop	r19
 d80:	2a e0       	ldi	r18, 0x0A	; 10
 d82:	26 9f       	mul	r18, r22
 d84:	11 24       	eor	r1, r1
 d86:	30 19       	sub	r19, r0
 d88:	30 5d       	subi	r19, 0xD0	; 208
 d8a:	31 93       	st	Z+, r19
 d8c:	de f6       	brtc	.-74     	; 0xd44 <__ultoa_invert+0xe>
 d8e:	cf 01       	movw	r24, r30
 d90:	08 95       	ret
 d92:	46 2f       	mov	r20, r22
 d94:	47 70       	andi	r20, 0x07	; 7
 d96:	40 5d       	subi	r20, 0xD0	; 208
 d98:	41 93       	st	Z+, r20
 d9a:	b3 e0       	ldi	r27, 0x03	; 3
 d9c:	0f d0       	rcall	.+30     	; 0xdbc <__ultoa_invert+0x86>
 d9e:	c9 f7       	brne	.-14     	; 0xd92 <__ultoa_invert+0x5c>
 da0:	f6 cf       	rjmp	.-20     	; 0xd8e <__ultoa_invert+0x58>
 da2:	46 2f       	mov	r20, r22
 da4:	4f 70       	andi	r20, 0x0F	; 15
 da6:	40 5d       	subi	r20, 0xD0	; 208
 da8:	4a 33       	cpi	r20, 0x3A	; 58
 daa:	18 f0       	brcs	.+6      	; 0xdb2 <__ultoa_invert+0x7c>
 dac:	49 5d       	subi	r20, 0xD9	; 217
 dae:	31 fd       	sbrc	r19, 1
 db0:	40 52       	subi	r20, 0x20	; 32
 db2:	41 93       	st	Z+, r20
 db4:	02 d0       	rcall	.+4      	; 0xdba <__ultoa_invert+0x84>
 db6:	a9 f7       	brne	.-22     	; 0xda2 <__ultoa_invert+0x6c>
 db8:	ea cf       	rjmp	.-44     	; 0xd8e <__ultoa_invert+0x58>
 dba:	b4 e0       	ldi	r27, 0x04	; 4
 dbc:	a6 95       	lsr	r26
 dbe:	97 95       	ror	r25
 dc0:	87 95       	ror	r24
 dc2:	77 95       	ror	r23
 dc4:	67 95       	ror	r22
 dc6:	ba 95       	dec	r27
 dc8:	c9 f7       	brne	.-14     	; 0xdbc <__ultoa_invert+0x86>
 dca:	00 97       	sbiw	r24, 0x00	; 0
 dcc:	61 05       	cpc	r22, r1
 dce:	71 05       	cpc	r23, r1
 dd0:	08 95       	ret
 dd2:	9b 01       	movw	r18, r22
 dd4:	ac 01       	movw	r20, r24
 dd6:	0a 2e       	mov	r0, r26
 dd8:	06 94       	lsr	r0
 dda:	57 95       	ror	r21
 ddc:	47 95       	ror	r20
 dde:	37 95       	ror	r19
 de0:	27 95       	ror	r18
 de2:	ba 95       	dec	r27
 de4:	c9 f7       	brne	.-14     	; 0xdd8 <__ultoa_invert+0xa2>
 de6:	62 0f       	add	r22, r18
 de8:	73 1f       	adc	r23, r19
 dea:	84 1f       	adc	r24, r20
 dec:	95 1f       	adc	r25, r21
 dee:	a0 1d       	adc	r26, r0
 df0:	08 95       	ret

00000df2 <__prologue_saves__>:
 df2:	2f 92       	push	r2
 df4:	3f 92       	push	r3
 df6:	4f 92       	push	r4
 df8:	5f 92       	push	r5
 dfa:	6f 92       	push	r6
 dfc:	7f 92       	push	r7
 dfe:	8f 92       	push	r8
 e00:	9f 92       	push	r9
 e02:	af 92       	push	r10
 e04:	bf 92       	push	r11
 e06:	cf 92       	push	r12
 e08:	df 92       	push	r13
 e0a:	ef 92       	push	r14
 e0c:	ff 92       	push	r15
 e0e:	0f 93       	push	r16
 e10:	1f 93       	push	r17
 e12:	cf 93       	push	r28
 e14:	df 93       	push	r29
 e16:	cd b7       	in	r28, 0x3d	; 61
 e18:	de b7       	in	r29, 0x3e	; 62
 e1a:	ca 1b       	sub	r28, r26
 e1c:	db 0b       	sbc	r29, r27
 e1e:	0f b6       	in	r0, 0x3f	; 63
 e20:	f8 94       	cli
 e22:	de bf       	out	0x3e, r29	; 62
 e24:	0f be       	out	0x3f, r0	; 63
 e26:	cd bf       	out	0x3d, r28	; 61
 e28:	09 94       	ijmp

00000e2a <__epilogue_restores__>:
 e2a:	2a 88       	ldd	r2, Y+18	; 0x12
 e2c:	39 88       	ldd	r3, Y+17	; 0x11
 e2e:	48 88       	ldd	r4, Y+16	; 0x10
 e30:	5f 84       	ldd	r5, Y+15	; 0x0f
 e32:	6e 84       	ldd	r6, Y+14	; 0x0e
 e34:	7d 84       	ldd	r7, Y+13	; 0x0d
 e36:	8c 84       	ldd	r8, Y+12	; 0x0c
 e38:	9b 84       	ldd	r9, Y+11	; 0x0b
 e3a:	aa 84       	ldd	r10, Y+10	; 0x0a
 e3c:	b9 84       	ldd	r11, Y+9	; 0x09
 e3e:	c8 84       	ldd	r12, Y+8	; 0x08
 e40:	df 80       	ldd	r13, Y+7	; 0x07
 e42:	ee 80       	ldd	r14, Y+6	; 0x06
 e44:	fd 80       	ldd	r15, Y+5	; 0x05
 e46:	0c 81       	ldd	r16, Y+4	; 0x04
 e48:	1b 81       	ldd	r17, Y+3	; 0x03
 e4a:	aa 81       	ldd	r26, Y+2	; 0x02
 e4c:	b9 81       	ldd	r27, Y+1	; 0x01
 e4e:	ce 0f       	add	r28, r30
 e50:	d1 1d       	adc	r29, r1
 e52:	0f b6       	in	r0, 0x3f	; 63
 e54:	f8 94       	cli
 e56:	de bf       	out	0x3e, r29	; 62
 e58:	0f be       	out	0x3f, r0	; 63
 e5a:	cd bf       	out	0x3d, r28	; 61
 e5c:	ed 01       	movw	r28, r26
 e5e:	08 95       	ret

00000e60 <_exit>:
 e60:	f8 94       	cli

00000e62 <__stop_program>:
 e62:	ff cf       	rjmp	.-2      	; 0xe62 <__stop_program>
