
node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800200  00000d72  00000e06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002f0  008002f0  00000ef6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ef6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e06  00000000  00000000  00001062  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000719  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ea  00000000  00000000  00002581  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00002e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000487  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d5  00000000  00000000  00003557  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003c2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e7       	ldi	r30, 0x72	; 114
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 3f       	cpi	r26, 0xF0	; 240
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 ef       	ldi	r26, 0xF0	; 240
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3f       	cpi	r26, 0xFA	; 250
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	80 d1       	rcall	.+768    	; 0x420 <main>
 120:	26 c6       	rjmp	.+3148   	; 0xd6e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <can_init>:
 #define set_bit( reg, bit ) (reg |= (1 << bit))
 #define clear_bit( reg, bit ) (reg &= ~(1 << bit))


 void can_init(){
	mcp2515_init(); //denne kaller på reset, som setter systemet i config mode
 124:	04 d1       	rcall	.+520    	; 0x32e <mcp2515_init>
	
	
	//aktiverer interrupts (interrupt enable) for transmit og receive buffers, s.51
	mcp2515_bit_modify(MCP_CANINTE, 0b00000011, 0b00000011); 
 126:	43 e0       	ldi	r20, 0x03	; 3
 128:	63 e0       	ldi	r22, 0x03	; 3
 12a:	8b e2       	ldi	r24, 0x2B	; 43
 12c:	34 d1       	rcall	.+616    	; 0x396 <mcp2515_bit_modify>
	
	//Setter alle maske-bitene i standard identifier til 0, fordi da slippes alle messages gjennom. s. 35 (register 4-14 til 4-17), og s. 32, table 4-2
	mcp2515_write(MCP_RXM0SIDH, 0b00000000);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	80 e2       	ldi	r24, 0x20	; 32
 132:	e9 d0       	rcall	.+466    	; 0x306 <mcp2515_write>
	mcp2515_write(MCP_RXM0SIDL, 0b00000000);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	81 e2       	ldi	r24, 0x21	; 33
 138:	e6 d0       	rcall	.+460    	; 0x306 <mcp2515_write>
	mcp2515_write(MCP_RXM1SIDH, 0b00000000);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	84 e2       	ldi	r24, 0x24	; 36
 13e:	e3 d0       	rcall	.+454    	; 0x306 <mcp2515_write>
	mcp2515_write(MCP_RXM1SIDL, 0b00000000);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	85 e2       	ldi	r24, 0x25	; 37
 144:	e0 d0       	rcall	.+448    	; 0x306 <mcp2515_write>
	
	//setter i normal mode, s. 60
	mcp2515_bit_modify(MCP_CANCTRL, 0b11100000, 0b01000000);
 146:	40 e4       	ldi	r20, 0x40	; 64
 148:	60 ee       	ldi	r22, 0xE0	; 224
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	24 c1       	rjmp	.+584    	; 0x396 <mcp2515_bit_modify>
 14e:	08 95       	ret

00000150 <can_send_message>:
	
 }

void can_send_message(can_msg* send){//unsigned int identifier, uint8_t *message, uint8_t lengthOfData
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	7c 01       	movw	r14, r24
	
	while((mcp2515_read(MCP_TXB0CTRL) & MCP_TXREQ)){ //så lenge transfer buffer 0 er fullt, vil MCP_TXREQ være høy, og vi er stuck i whilen. Når det er tomt, vil vi gå ut av whilen
 15e:	80 e3       	ldi	r24, 0x30	; 48
 160:	c7 d0       	rcall	.+398    	; 0x2f0 <mcp2515_read>
 162:	83 fd       	sbrc	r24, 3
 164:	fc cf       	rjmp	.-8      	; 0x15e <can_send_message+0xe>
	}
	
	//Left shifter 5 ganger for å lagre riktig i SID bufferregistrene
	mcp2515_write(MCP_TXB0SIDH+1, send->id<<5); //lagrer identifieren til messagen inn i første transferbuffer. Går fint å overskrive det som ligger der fordi det er 0 som må ligge der for standard identifier (ikke extended)
 166:	f7 01       	movw	r30, r14
 168:	60 81       	ld	r22, Z
 16a:	62 95       	swap	r22
 16c:	66 0f       	add	r22, r22
 16e:	60 7e       	andi	r22, 0xE0	; 224
 170:	82 e3       	ldi	r24, 0x32	; 50
 172:	c9 d0       	rcall	.+402    	; 0x306 <mcp2515_write>
	
	 //Right shift 3 ganger for å flytte de 8 høyeste bit'ene til de 8 laveste, så de lagres i SIDH
	mcp2515_write(MCP_TXB0SIDH, send->id>>3); //lagrer identifieren til messagen inn i første transferbuffer
 174:	f7 01       	movw	r30, r14
 176:	60 81       	ld	r22, Z
 178:	71 81       	ldd	r23, Z+1	; 0x01
 17a:	76 95       	lsr	r23
 17c:	67 95       	ror	r22
 17e:	76 95       	lsr	r23
 180:	67 95       	ror	r22
 182:	76 95       	lsr	r23
 184:	67 95       	ror	r22
 186:	81 e3       	ldi	r24, 0x31	; 49
 188:	be d0       	rcall	.+380    	; 0x306 <mcp2515_write>
	
	mcp2515_write(MCP_TXB0SIDH+4, send->length); //lagrer datalengden i txb0dlc. plusser på 4 for å komme til txb0dlc (se tabell s. 63)
 18a:	f7 01       	movw	r30, r14
 18c:	62 85       	ldd	r22, Z+10	; 0x0a
 18e:	85 e3       	ldi	r24, 0x35	; 53
 190:	ba d0       	rcall	.+372    	; 0x306 <mcp2515_write>

	//lagrer nå meldinga i TXB0D0-TXB0D6 (s. 63)
	if(send->length>8){
 192:	f7 01       	movw	r30, r14
 194:	82 85       	ldd	r24, Z+10	; 0x0a
 196:	89 30       	cpi	r24, 0x09	; 9
 198:	18 f4       	brcc	.+6      	; 0x1a0 <can_send_message+0x50>
		printf("Length of data too big.");
		return;
	}
	int byte = 0;
	for (byte = 0; byte < send->length; byte++){
 19a:	81 11       	cpse	r24, r1
 19c:	09 c0       	rjmp	.+18     	; 0x1b0 <can_send_message+0x60>
 19e:	1a c0       	rjmp	.+52     	; 0x1d4 <can_send_message+0x84>
	
	mcp2515_write(MCP_TXB0SIDH+4, send->length); //lagrer datalengden i txb0dlc. plusser på 4 for å komme til txb0dlc (se tabell s. 63)

	//lagrer nå meldinga i TXB0D0-TXB0D6 (s. 63)
	if(send->length>8){
		printf("Length of data too big.");
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	92 e0       	ldi	r25, 0x02	; 2
 1a4:	9f 93       	push	r25
 1a6:	8f 93       	push	r24
 1a8:	f5 d1       	rcall	.+1002   	; 0x594 <printf>
		return;
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	15 c0       	rjmp	.+42     	; 0x1da <can_send_message+0x8a>
 1b0:	87 01       	movw	r16, r14
 1b2:	0e 5f       	subi	r16, 0xFE	; 254
 1b4:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	int byte = 0;
	for (byte = 0; byte < send->length; byte++){
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(MCP_TXB0SIDH+5+byte, send->data[byte]);
 1ba:	f8 01       	movw	r30, r16
 1bc:	61 91       	ld	r22, Z+
 1be:	8f 01       	movw	r16, r30
 1c0:	8c 2f       	mov	r24, r28
 1c2:	8a 5c       	subi	r24, 0xCA	; 202
 1c4:	a0 d0       	rcall	.+320    	; 0x306 <mcp2515_write>
	if(send->length>8){
		printf("Length of data too big.");
		return;
	}
	int byte = 0;
	for (byte = 0; byte < send->length; byte++){
 1c6:	21 96       	adiw	r28, 0x01	; 1
 1c8:	f7 01       	movw	r30, r14
 1ca:	22 85       	ldd	r18, Z+10	; 0x0a
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	c2 17       	cp	r28, r18
 1d0:	d3 07       	cpc	r29, r19
 1d2:	9c f3       	brlt	.-26     	; 0x1ba <can_send_message+0x6a>
		mcp2515_write(MCP_TXB0SIDH+5+byte, send->data[byte]);
	}

	mcp2515_request_to_send(0); //sender RTS signal til TXB0 nå
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	b9 d0       	rcall	.+370    	; 0x34c <mcp2515_request_to_send>
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	08 95       	ret

000001e8 <can_receive_message>:

can_msg can_receive_message(){
 1e8:	8f 92       	push	r8
 1ea:	9f 92       	push	r9
 1ec:	af 92       	push	r10
 1ee:	bf 92       	push	r11
 1f0:	cf 92       	push	r12
 1f2:	df 92       	push	r13
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	2b 97       	sbiw	r28, 0x0b	; 11
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
 210:	7c 01       	movw	r14, r24
	can_msg wholeMessage;
	wholeMessage.id = 0;
	wholeMessage.length = 0;
	wholeMessage.data[0] = 0b00000000;
 212:	1b 82       	std	Y+3, r1	; 0x03
	
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF){ //om rx0if er høy, altså interrupt pinnen er høy, betyr det at receive buffer nr 0 har fått inn ny data
 214:	8c e2       	ldi	r24, 0x2C	; 44
 216:	6c d0       	rcall	.+216    	; 0x2f0 <mcp2515_read>
 218:	80 ff       	sbrs	r24, 0
 21a:	48 c0       	rjmp	.+144    	; 0x2ac <can_receive_message+0xc4>
		unsigned int idH = mcp2515_read(MCP_RXB0SIDH);
 21c:	81 e6       	ldi	r24, 0x61	; 97
 21e:	68 d0       	rcall	.+208    	; 0x2f0 <mcp2515_read>
 220:	08 2f       	mov	r16, r24
 222:	10 e0       	ldi	r17, 0x00	; 0
		unsigned int idL = mcp2515_read(MCP_RXB0SIDH+1);
 224:	82 e6       	ldi	r24, 0x62	; 98
 226:	64 d0       	rcall	.+200    	; 0x2f0 <mcp2515_read>
 228:	90 e0       	ldi	r25, 0x00	; 0
		idL = (idL >> 5); //Fordi de er idL er tre MSB i MCP_RXB0SIDL, må rightshifte 5 ganger
		idH = (idH << 3); //Må leftshifte 
 22a:	58 01       	movw	r10, r16
 22c:	aa 0c       	add	r10, r10
 22e:	bb 1c       	adc	r11, r11
 230:	aa 0c       	add	r10, r10
 232:	bb 1c       	adc	r11, r11
 234:	aa 0c       	add	r10, r10
 236:	bb 1c       	adc	r11, r11
	wholeMessage.data[0] = 0b00000000;
	
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF){ //om rx0if er høy, altså interrupt pinnen er høy, betyr det at receive buffer nr 0 har fått inn ny data
		unsigned int idH = mcp2515_read(MCP_RXB0SIDH);
		unsigned int idL = mcp2515_read(MCP_RXB0SIDH+1);
		idL = (idL >> 5); //Fordi de er idL er tre MSB i MCP_RXB0SIDL, må rightshifte 5 ganger
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	92 95       	swap	r25
 23e:	82 95       	swap	r24
 240:	8f 70       	andi	r24, 0x0F	; 15
 242:	89 27       	eor	r24, r25
 244:	9f 70       	andi	r25, 0x0F	; 15
 246:	89 27       	eor	r24, r25
		idH = (idH << 3); //Må leftshifte 
		unsigned int id = (idH | idL); //Kan evt ta +
 248:	a8 2a       	or	r10, r24
 24a:	b9 2a       	or	r11, r25
		
		
		uint8_t length = mcp2515_read(MCP_RXB0SIDH+4); //leser av rxb0dlc
 24c:	85 e6       	ldi	r24, 0x65	; 101
 24e:	50 d0       	rcall	.+160    	; 0x2f0 <mcp2515_read>
 250:	88 2e       	mov	r8, r24
		if (length > 8){
 252:	88 e0       	ldi	r24, 0x08	; 8
 254:	88 15       	cp	r24, r8
 256:	18 f0       	brcs	.+6      	; 0x25e <can_receive_message+0x76>
		}
		
		//leser nå av rxb0d0 til rxb0d7 (avhengig av hvor lang meldinga vi har mottatt er), og lagrer det i arrayet message
		int byte = 0;
		//lagrer alt i en struct
		for (byte = 0; byte < length; byte++){
 258:	81 10       	cpse	r8, r1
 25a:	14 c0       	rjmp	.+40     	; 0x284 <can_receive_message+0x9c>
 25c:	2a c0       	rjmp	.+84     	; 0x2b2 <can_receive_message+0xca>
		unsigned int id = (idH | idL); //Kan evt ta +
		
		
		uint8_t length = mcp2515_read(MCP_RXB0SIDH+4); //leser av rxb0dlc
		if (length > 8){
			printf("Length > 8, not allowed.");
 25e:	8e e1       	ldi	r24, 0x1E	; 30
 260:	92 e0       	ldi	r25, 0x02	; 2
 262:	9f 93       	push	r25
 264:	8f 93       	push	r24
 266:	96 d1       	rcall	.+812    	; 0x594 <printf>
			return wholeMessage;
 268:	1a 82       	std	Y+2, r1	; 0x02
 26a:	19 82       	std	Y+1, r1	; 0x01
 26c:	1b 86       	std	Y+11, r1	; 0x0b
 26e:	8b e0       	ldi	r24, 0x0B	; 11
 270:	fe 01       	movw	r30, r28
 272:	31 96       	adiw	r30, 0x01	; 1
 274:	d7 01       	movw	r26, r14
 276:	01 90       	ld	r0, Z+
 278:	0d 92       	st	X+, r0
 27a:	8a 95       	dec	r24
 27c:	e1 f7       	brne	.-8      	; 0x276 <can_receive_message+0x8e>
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	22 c0       	rjmp	.+68     	; 0x2c8 <can_receive_message+0xe0>
 284:	8e 01       	movw	r16, r28
 286:	0d 5f       	subi	r16, 0xFD	; 253
 288:	1f 4f       	sbci	r17, 0xFF	; 255
 28a:	68 01       	movw	r12, r16
 28c:	c8 0c       	add	r12, r8
 28e:	d1 1c       	adc	r13, r1
		}
		
		//leser nå av rxb0d0 til rxb0d7 (avhengig av hvor lang meldinga vi har mottatt er), og lagrer det i arrayet message
		int byte = 0;
		//lagrer alt i en struct
		for (byte = 0; byte < length; byte++){
 290:	0f 2e       	mov	r0, r31
 292:	f6 e6       	ldi	r31, 0x66	; 102
 294:	9f 2e       	mov	r9, r31
 296:	f0 2d       	mov	r31, r0
			wholeMessage.data[byte] = mcp2515_read(MCP_RXB0SIDH+5+byte);
 298:	89 2d       	mov	r24, r9
 29a:	2a d0       	rcall	.+84     	; 0x2f0 <mcp2515_read>
 29c:	f8 01       	movw	r30, r16
 29e:	81 93       	st	Z+, r24
 2a0:	8f 01       	movw	r16, r30
 2a2:	93 94       	inc	r9
		}
		
		//leser nå av rxb0d0 til rxb0d7 (avhengig av hvor lang meldinga vi har mottatt er), og lagrer det i arrayet message
		int byte = 0;
		//lagrer alt i en struct
		for (byte = 0; byte < length; byte++){
 2a4:	ec 15       	cp	r30, r12
 2a6:	fd 05       	cpc	r31, r13
 2a8:	b9 f7       	brne	.-18     	; 0x298 <can_receive_message+0xb0>
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <can_receive_message+0xca>
}

can_msg can_receive_message(){
	can_msg wholeMessage;
	wholeMessage.id = 0;
	wholeMessage.length = 0;
 2ac:	81 2c       	mov	r8, r1
	mcp2515_request_to_send(0); //sender RTS signal til TXB0 nå
}

can_msg can_receive_message(){
	can_msg wholeMessage;
	wholeMessage.id = 0;
 2ae:	a1 2c       	mov	r10, r1
 2b0:	b1 2c       	mov	r11, r1
		
		
		wholeMessage.id = id;
		wholeMessage.length = length;
	}
	return wholeMessage;
 2b2:	ba 82       	std	Y+2, r11	; 0x02
 2b4:	a9 82       	std	Y+1, r10	; 0x01
 2b6:	8b 86       	std	Y+11, r8	; 0x0b
 2b8:	8b e0       	ldi	r24, 0x0B	; 11
 2ba:	fe 01       	movw	r30, r28
 2bc:	31 96       	adiw	r30, 0x01	; 1
 2be:	d7 01       	movw	r26, r14
 2c0:	01 90       	ld	r0, Z+
 2c2:	0d 92       	st	X+, r0
 2c4:	8a 95       	dec	r24
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <can_receive_message+0xd8>
}
 2c8:	c7 01       	movw	r24, r14
 2ca:	2b 96       	adiw	r28, 0x0b	; 11
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	bf 90       	pop	r11
 2e8:	af 90       	pop	r10
 2ea:	9f 90       	pop	r9
 2ec:	8f 90       	pop	r8
 2ee:	08 95       	ret

000002f0 <mcp2515_read>:
#include "spi.h"

#define set_bit( reg, bit ) (reg |= (1 << bit))
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

uint8_t mcp2515_read(uint8_t address){
 2f0:	cf 93       	push	r28
 2f2:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, SS); //Setter SS lav
 2f4:	2f 98       	cbi	0x05, 7	; 5

	uint8_t result;
	spi_MasterTransmit(MCP_READ);
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	6d d0       	rcall	.+218    	; 0x3d4 <spi_MasterTransmit>
	spi_MasterTransmit(address);
 2fa:	8c 2f       	mov	r24, r28
 2fc:	6b d0       	rcall	.+214    	; 0x3d4 <spi_MasterTransmit>
	result = spi_MasterRead(); //Leser hva som var i adressen/registeret vi aksesserte
 2fe:	6f d0       	rcall	.+222    	; 0x3de <spi_MasterRead>

	set_bit(PORTB, SS); //Setter SS høy
 300:	2f 9a       	sbi	0x05, 7	; 5
	
	return result;
}
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data){
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	d8 2f       	mov	r29, r24
 30c:	c6 2f       	mov	r28, r22
	clear_bit(PORTB,SS); //Setter SS lav
 30e:	2f 98       	cbi	0x05, 7	; 5
	
	spi_MasterTransmit(MCP_WRITE); //Velger instruction
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	60 d0       	rcall	.+192    	; 0x3d4 <spi_MasterTransmit>
	
	spi_MasterTransmit(address); //Velger adresse, f.eks. 0b00110001
 314:	8d 2f       	mov	r24, r29
 316:	5e d0       	rcall	.+188    	; 0x3d4 <spi_MasterTransmit>
	
	spi_MasterTransmit(data); //Velger data som sendes
 318:	8c 2f       	mov	r24, r28
 31a:	5c d0       	rcall	.+184    	; 0x3d4 <spi_MasterTransmit>

	set_bit(PORTB,SS);
 31c:	2f 9a       	sbi	0x05, 7	; 5
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <mcp2515_reset>:

void mcp2515_reset(){
	clear_bit(PORTB,SS); //Setter SS lav
 324:	2f 98       	cbi	0x05, 7	; 5
	spi_MasterTransmit(MCP_RESET);
 326:	80 ec       	ldi	r24, 0xC0	; 192
 328:	55 d0       	rcall	.+170    	; 0x3d4 <spi_MasterTransmit>
	set_bit(PORTB,SS); //Setter SS høy
 32a:	2f 9a       	sbi	0x05, 7	; 5
 32c:	08 95       	ret

0000032e <mcp2515_init>:
}

uint8_t mcp2515_init(){
	uint8_t value;
	spi_init(); //Initialize SPI
 32e:	47 d0       	rcall	.+142    	; 0x3be <spi_init>
	mcp2515_reset(); // Send reset-command
 330:	f9 df       	rcall	.-14     	; 0x324 <mcp2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <mcp2515_init+0x6>
 338:	00 00       	nop
	_delay_us(10); //oscillatoren er i reset modus i 128 klokkesykluser. trenger derav en delay
	//Self-test to check if system is in config mode
	value = mcp2515_read(MCP_CANSTAT); 
 33a:	8e e0       	ldi	r24, 0x0E	; 14
 33c:	d9 df       	rcall	.-78     	; 0x2f0 <mcp2515_read>
	if((value & MODE_MASK)  != MODE_CONFIG) {
 33e:	98 2f       	mov	r25, r24
 340:	90 7e       	andi	r25, 0xE0	; 224
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 38       	cpi	r25, 0x80	; 128
 346:	09 f4       	brne	.+2      	; 0x34a <mcp2515_init+0x1c>
 348:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	// More initialization
	return 0;
}
 34a:	08 95       	ret

0000034c <mcp2515_request_to_send>:

void mcp2515_request_to_send(int whichBuffer){ //se s. 66
	clear_bit(PORTB,SS); //Setter SS lav
 34c:	2f 98       	cbi	0x05, 7	; 5

	if(whichBuffer == 0){ //choose TXB0
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	19 f4       	brne	.+6      	; 0x358 <mcp2515_request_to_send+0xc>
		spi_MasterTransmit(0b10000001); 
 352:	81 e8       	ldi	r24, 0x81	; 129
 354:	3f d0       	rcall	.+126    	; 0x3d4 <spi_MasterTransmit>
 356:	07 c0       	rjmp	.+14     	; 0x366 <mcp2515_request_to_send+0x1a>
	}
	
	else if (whichBuffer == 1){ //choose TXB1
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	19 f4       	brne	.+6      	; 0x362 <mcp2515_request_to_send+0x16>
		spi_MasterTransmit(0b10000010); 
 35c:	82 e8       	ldi	r24, 0x82	; 130
 35e:	3a d0       	rcall	.+116    	; 0x3d4 <spi_MasterTransmit>
 360:	02 c0       	rjmp	.+4      	; 0x366 <mcp2515_request_to_send+0x1a>
	}
	else{ //choose TXB2
		spi_MasterTransmit(0b10000100);
 362:	84 e8       	ldi	r24, 0x84	; 132
 364:	37 d0       	rcall	.+110    	; 0x3d4 <spi_MasterTransmit>
	}
	
	set_bit(PORTB,SS); //Setter SS høy
 366:	2f 9a       	sbi	0x05, 7	; 5
 368:	08 95       	ret

0000036a <mcp2515_read_status>:
}

uint8_t mcp2515_read_status(){
 36a:	cf 93       	push	r28
	clear_bit(PORTB,SS); //Setter SS lav
 36c:	2f 98       	cbi	0x05, 7	; 5
	
	uint8_t statusRegister;
	uint8_t statusRegister2;

	spi_MasterTransmit(MCP_READ_STATUS);
 36e:	80 ea       	ldi	r24, 0xA0	; 160
 370:	31 d0       	rcall	.+98     	; 0x3d4 <spi_MasterTransmit>
	statusRegister = spi_MasterRead(); //disse to skal være like hverandre, se s. 69
 372:	35 d0       	rcall	.+106    	; 0x3de <spi_MasterRead>
 374:	c8 2f       	mov	r28, r24
	statusRegister2 = spi_MasterRead(); //disse to skal være like hverandre, se s. 69
 376:	33 d0       	rcall	.+102    	; 0x3de <spi_MasterRead>

	if(statusRegister != statusRegister2){
 378:	c8 17       	cp	r28, r24
 37a:	49 f0       	breq	.+18     	; 0x38e <mcp2515_read_status+0x24>
		printf("Status registers in mcp2515_read_status() not identical.");
 37c:	87 e3       	ldi	r24, 0x37	; 55
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	9f 93       	push	r25
 382:	8f 93       	push	r24
 384:	07 d1       	rcall	.+526    	; 0x594 <printf>
		return 0;
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <mcp2515_read_status+0x28>
	}

	set_bit(PORTB,SS); //Setter SS høy
 38e:	2f 9a       	sbi	0x05, 7	; 5

	return statusRegister;
 390:	8c 2f       	mov	r24, r28
}
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <mcp2515_bit_modify>:


void mcp2515_bit_modify(uint8_t regAdr, uint8_t maskBits, uint8_t data){ //se s. 68
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	18 2f       	mov	r17, r24
 39e:	d6 2f       	mov	r29, r22
 3a0:	c4 2f       	mov	r28, r20
	clear_bit(PORTB,SS); //Setter SS lav
 3a2:	2f 98       	cbi	0x05, 7	; 5

	spi_MasterTransmit(MCP_BITMOD);
 3a4:	85 e0       	ldi	r24, 0x05	; 5
 3a6:	16 d0       	rcall	.+44     	; 0x3d4 <spi_MasterTransmit>
	spi_MasterTransmit(regAdr);
 3a8:	81 2f       	mov	r24, r17
 3aa:	14 d0       	rcall	.+40     	; 0x3d4 <spi_MasterTransmit>
	spi_MasterTransmit(maskBits);
 3ac:	8d 2f       	mov	r24, r29
 3ae:	12 d0       	rcall	.+36     	; 0x3d4 <spi_MasterTransmit>
	spi_MasterTransmit(data);
 3b0:	8c 2f       	mov	r24, r28
 3b2:	10 d0       	rcall	.+32     	; 0x3d4 <spi_MasterTransmit>

	set_bit(PORTB,SS); //Setter SS høy
 3b4:	2f 9a       	sbi	0x05, 7	; 5
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	08 95       	ret

000003be <spi_init>:
 #define set_bit( reg, bit ) (reg |= (1 << bit))
 #define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void spi_init(void){
    /* Set MOSI and SCK output, all others input */
    DDRB |= (1<<MOSI)|(1<<SCK);
 3be:	84 b1       	in	r24, 0x04	; 4
 3c0:	86 60       	ori	r24, 0x06	; 6
 3c2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << MISO);
 3c4:	23 98       	cbi	0x04, 3	; 4
    /* Enable SPI, Master, set clock rate fck/2 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X);
 3c6:	81 e5       	ldi	r24, 0x51	; 81
 3c8:	8c bd       	out	0x2c, r24	; 44
	
	set_bit(DDRB,SS); //Setter PB4 til write/output
 3ca:	27 9a       	sbi	0x04, 7	; 4
	set_bit(PORTB, SS);
 3cc:	2f 9a       	sbi	0x05, 7	; 5
	
	if(SS==7){ //Hvis vi har arduino'en, trenger å sette PB0 til output og høy
		set_bit(DDRB,PB0); //Setter PB4 til write/output
 3ce:	20 9a       	sbi	0x04, 0	; 4
		set_bit(PORTB, PB0);
 3d0:	28 9a       	sbi	0x05, 0	; 5
 3d2:	08 95       	ret

000003d4 <spi_MasterTransmit>:

//Med denne må vi sette SS lav/høy før/etter mastertransmit starter/slutter
void spi_MasterTransmit(char cData) { //keepLow holds the SS* signal low so the transmission continues
	
	/* Start transmission */
	SPDR = cData;
 3d4:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete. Interrupt flag in SPSR is set (SPIF). */
	while(!(SPSR & (1<<SPIF)));
 3d6:	0d b4       	in	r0, 0x2d	; 45
 3d8:	07 fe       	sbrs	r0, 7
 3da:	fd cf       	rjmp	.-6      	; 0x3d6 <spi_MasterTransmit+0x2>
}
 3dc:	08 95       	ret

000003de <spi_MasterRead>:

//Egentlig ikke nødvendig med denne funksjonen, fordi MasterTransmit gjør det samme, men vi beholder den for lesbarhet av koden
uint8_t spi_MasterRead(){
	//Setter SS lav utenfor funksjonen, altså setter vi SS lav inni mcp2515_read

	spi_MasterTransmit(0x00);
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	f9 df       	rcall	.-14     	; 0x3d4 <spi_MasterTransmit>
	
	//Setter SS høy utenfor funksjonen, altså setter vi SS høy igjen inni mcp2515_read

	return SPDR;
 3e2:	8e b5       	in	r24, 0x2e	; 46
	
}
 3e4:	08 95       	ret

000003e6 <USART_Transmit>:
 }
 
 void USART_Transmit( unsigned char data )
 {
	 /* Wait for empty transmit buffer */
	 while( !( UCSR0A & (1<<UDRE0)) );
 3e6:	e0 ec       	ldi	r30, 0xC0	; 192
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	90 81       	ld	r25, Z
 3ec:	95 ff       	sbrs	r25, 5
 3ee:	fd cf       	rjmp	.-6      	; 0x3ea <USART_Transmit+0x4>
	 
	 /* Put data into buffer, sends the data */
	 UDR0 = data;
 3f0:	80 93 c6 00 	sts	0x00C6, r24
 3f4:	08 95       	ret

000003f6 <USART_Receive>:
 }

 unsigned char USART_Receive( void )
 {
	 /*Wait for data to be received*/
	 while( !(UCSR0A & (1<<RXC0)) );
 3f6:	e0 ec       	ldi	r30, 0xC0	; 192
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	88 23       	and	r24, r24
 3fe:	ec f7       	brge	.-6      	; 0x3fa <USART_Receive+0x4>
	 
	 /* Get and return received data from buffer*/
	 return UDR0;
 400:	80 91 c6 00 	lds	r24, 0x00C6
 }
 404:	08 95       	ret

00000406 <USART_Init>:


void USART_Init( unsigned int ubrr )
 {
	 /* Set baud rate */
	 UBRR0H = (unsigned char)(ubrr>>8);
 406:	90 93 c5 00 	sts	0x00C5, r25
	 UBRR0L = (unsigned char)ubrr;
 40a:	80 93 c4 00 	sts	0x00C4, r24

	 /* Enable receiver and transmitter*/
	 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 40e:	88 e1       	ldi	r24, 0x18	; 24
 410:	80 93 c1 00 	sts	0x00C1, r24
	 
	 fdevopen(*USART_Transmit, *USART_Receive);
 414:	6b ef       	ldi	r22, 0xFB	; 251
 416:	71 e0       	ldi	r23, 0x01	; 1
 418:	83 ef       	ldi	r24, 0xF3	; 243
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	71 c0       	rjmp	.+226    	; 0x500 <fdevopen>
 41e:	08 95       	ret

00000420 <main>:


volatile int RECEIVE_BUFFER_INTERRUPT = 0;

int main(void)
{
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	66 97       	sbiw	r28, 0x16	; 22
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
	
	USART_Init(MYUBRR);
 434:	87 e6       	ldi	r24, 0x67	; 103
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	e6 df       	rcall	.-52     	; 0x406 <USART_Init>
	can_init();
 43a:	74 de       	rcall	.-792    	; 0x124 <can_init>
	
	can_msg melding;
	melding.id = 5;
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	9a 83       	std	Y+2, r25	; 0x02
 442:	89 83       	std	Y+1, r24	; 0x01
	melding.length = 8;
 444:	88 e0       	ldi	r24, 0x08	; 8
 446:	8b 87       	std	Y+11, r24	; 0x0b
	melding.data[0] = (uint8_t)('1');
 448:	81 e3       	ldi	r24, 0x31	; 49
 44a:	8b 83       	std	Y+3, r24	; 0x03
	melding.data[1] = (uint8_t)('2');
 44c:	82 e3       	ldi	r24, 0x32	; 50
 44e:	8c 83       	std	Y+4, r24	; 0x04
	melding.data[2] = (uint8_t)('3');
 450:	83 e3       	ldi	r24, 0x33	; 51
 452:	8d 83       	std	Y+5, r24	; 0x05
	melding.data[3] = (uint8_t)('4');
 454:	84 e3       	ldi	r24, 0x34	; 52
 456:	8e 83       	std	Y+6, r24	; 0x06
	melding.data[4] = (uint8_t)('5');
 458:	85 e3       	ldi	r24, 0x35	; 53
 45a:	8f 83       	std	Y+7, r24	; 0x07
	melding.data[5] = (uint8_t)('6');
 45c:	86 e3       	ldi	r24, 0x36	; 54
 45e:	88 87       	std	Y+8, r24	; 0x08
	melding.data[6] = (uint8_t)('7');
 460:	87 e3       	ldi	r24, 0x37	; 55
 462:	89 87       	std	Y+9, r24	; 0x09
	melding.data[7] = (uint8_t)('8');
 464:	88 e3       	ldi	r24, 0x38	; 56
 466:	8a 87       	std	Y+10, r24	; 0x0a
		
		
		//sjekker om receive bufre inneholder noe. se s. 69 i mcp2515
		uint8_t statusReg = mcp2515_read_status();
		
		printf("statusReg: %x \n", statusReg);
 468:	00 e7       	ldi	r16, 0x70	; 112
 46a:	12 e0       	ldi	r17, 0x02	; 2
		
		if (test_bit(statusReg, 0))
		{
			printf("Mottatt melding på receive buffer 0");
 46c:	0f 2e       	mov	r0, r31
 46e:	f0 e8       	ldi	r31, 0x80	; 128
 470:	cf 2e       	mov	r12, r31
 472:	f2 e0       	ldi	r31, 0x02	; 2
 474:	df 2e       	mov	r13, r31
 476:	f0 2d       	mov	r31, r0
			char mottatt_data_char4 = mottatt.data[4];
			char mottatt_data_char5 = mottatt.data[5];
			char mottatt_data_char6 = mottatt.data[6];
			char mottatt_data_char7 = mottatt.data[7];
				
			printf("ID: %i  LENGTH: %i   ALL DATA  %c    %c   %c    %c    %c    %c    %c    %c\n", mottatt.id , mottatt.length, mottatt_data_char0, mottatt_data_char1, mottatt_data_char2, mottatt_data_char3, mottatt_data_char4, mottatt_data_char5, mottatt_data_char6, mottatt_data_char7);
 478:	0f 2e       	mov	r0, r31
 47a:	f4 ea       	ldi	r31, 0xA4	; 164
 47c:	ef 2e       	mov	r14, r31
 47e:	f2 e0       	ldi	r31, 0x02	; 2
 480:	ff 2e       	mov	r15, r31
 482:	f0 2d       	mov	r31, r0
	
	
    while(1)
    {
		
		can_send_message(&melding);
 484:	ce 01       	movw	r24, r28
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	63 de       	rcall	.-826    	; 0x150 <can_send_message>
		can_msg mottatt;
		
		
		//sjekker om receive bufre inneholder noe. se s. 69 i mcp2515
		uint8_t statusReg = mcp2515_read_status();
 48a:	6f df       	rcall	.-290    	; 0x36a <mcp2515_read_status>
 48c:	b8 2e       	mov	r11, r24
		
		printf("statusReg: %x \n", statusReg);
 48e:	1f 92       	push	r1
 490:	8f 93       	push	r24
 492:	1f 93       	push	r17
 494:	0f 93       	push	r16
 496:	7e d0       	rcall	.+252    	; 0x594 <printf>
		
		if (test_bit(statusReg, 0))
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	b0 fe       	sbrs	r11, 0
 4a2:	f0 cf       	rjmp	.-32     	; 0x484 <main+0x64>
		{
			printf("Mottatt melding på receive buffer 0");
 4a4:	df 92       	push	r13
 4a6:	cf 92       	push	r12
 4a8:	75 d0       	rcall	.+234    	; 0x594 <printf>
			mottatt = can_receive_message();
 4aa:	ce 01       	movw	r24, r28
 4ac:	0c 96       	adiw	r24, 0x0c	; 12
 4ae:	9c de       	rcall	.-712    	; 0x1e8 <can_receive_message>
			char mottatt_data_char4 = mottatt.data[4];
			char mottatt_data_char5 = mottatt.data[5];
			char mottatt_data_char6 = mottatt.data[6];
			char mottatt_data_char7 = mottatt.data[7];
				
			printf("ID: %i  LENGTH: %i   ALL DATA  %c    %c   %c    %c    %c    %c    %c    %c\n", mottatt.id , mottatt.length, mottatt_data_char0, mottatt_data_char1, mottatt_data_char2, mottatt_data_char3, mottatt_data_char4, mottatt_data_char5, mottatt_data_char6, mottatt_data_char7);
 4b0:	8d 89       	ldd	r24, Y+21	; 0x15
 4b2:	1f 92       	push	r1
 4b4:	8f 93       	push	r24
 4b6:	8c 89       	ldd	r24, Y+20	; 0x14
 4b8:	1f 92       	push	r1
 4ba:	8f 93       	push	r24
 4bc:	8b 89       	ldd	r24, Y+19	; 0x13
 4be:	1f 92       	push	r1
 4c0:	8f 93       	push	r24
 4c2:	8a 89       	ldd	r24, Y+18	; 0x12
 4c4:	1f 92       	push	r1
 4c6:	8f 93       	push	r24
 4c8:	89 89       	ldd	r24, Y+17	; 0x11
 4ca:	1f 92       	push	r1
 4cc:	8f 93       	push	r24
 4ce:	88 89       	ldd	r24, Y+16	; 0x10
 4d0:	1f 92       	push	r1
 4d2:	8f 93       	push	r24
 4d4:	8f 85       	ldd	r24, Y+15	; 0x0f
 4d6:	1f 92       	push	r1
 4d8:	8f 93       	push	r24
 4da:	8e 85       	ldd	r24, Y+14	; 0x0e
 4dc:	1f 92       	push	r1
 4de:	8f 93       	push	r24
 4e0:	8e 89       	ldd	r24, Y+22	; 0x16
 4e2:	1f 92       	push	r1
 4e4:	8f 93       	push	r24
 4e6:	8d 85       	ldd	r24, Y+13	; 0x0d
 4e8:	8f 93       	push	r24
 4ea:	8c 85       	ldd	r24, Y+12	; 0x0c
 4ec:	8f 93       	push	r24
 4ee:	ff 92       	push	r15
 4f0:	ef 92       	push	r14
 4f2:	50 d0       	rcall	.+160    	; 0x594 <printf>
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
			printf("Mottatt melding på receive buffer 1");
		}*/
		
	
		
    }
 4fe:	c2 cf       	rjmp	.-124    	; 0x484 <main+0x64>

00000500 <fdevopen>:
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	ec 01       	movw	r28, r24
 50a:	8b 01       	movw	r16, r22
 50c:	00 97       	sbiw	r24, 0x00	; 0
 50e:	31 f4       	brne	.+12     	; 0x51c <fdevopen+0x1c>
 510:	61 15       	cp	r22, r1
 512:	71 05       	cpc	r23, r1
 514:	19 f4       	brne	.+6      	; 0x51c <fdevopen+0x1c>
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	37 c0       	rjmp	.+110    	; 0x58a <fdevopen+0x8a>
 51c:	6e e0       	ldi	r22, 0x0E	; 14
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	36 d2       	rcall	.+1132   	; 0x992 <calloc>
 526:	fc 01       	movw	r30, r24
 528:	00 97       	sbiw	r24, 0x00	; 0
 52a:	a9 f3       	breq	.-22     	; 0x516 <fdevopen+0x16>
 52c:	80 e8       	ldi	r24, 0x80	; 128
 52e:	83 83       	std	Z+3, r24	; 0x03
 530:	01 15       	cp	r16, r1
 532:	11 05       	cpc	r17, r1
 534:	71 f0       	breq	.+28     	; 0x552 <fdevopen+0x52>
 536:	13 87       	std	Z+11, r17	; 0x0b
 538:	02 87       	std	Z+10, r16	; 0x0a
 53a:	81 e8       	ldi	r24, 0x81	; 129
 53c:	83 83       	std	Z+3, r24	; 0x03
 53e:	80 91 f0 02 	lds	r24, 0x02F0
 542:	90 91 f1 02 	lds	r25, 0x02F1
 546:	89 2b       	or	r24, r25
 548:	21 f4       	brne	.+8      	; 0x552 <fdevopen+0x52>
 54a:	f0 93 f1 02 	sts	0x02F1, r31
 54e:	e0 93 f0 02 	sts	0x02F0, r30
 552:	20 97       	sbiw	r28, 0x00	; 0
 554:	c9 f0       	breq	.+50     	; 0x588 <fdevopen+0x88>
 556:	d1 87       	std	Z+9, r29	; 0x09
 558:	c0 87       	std	Z+8, r28	; 0x08
 55a:	83 81       	ldd	r24, Z+3	; 0x03
 55c:	82 60       	ori	r24, 0x02	; 2
 55e:	83 83       	std	Z+3, r24	; 0x03
 560:	80 91 f2 02 	lds	r24, 0x02F2
 564:	90 91 f3 02 	lds	r25, 0x02F3
 568:	89 2b       	or	r24, r25
 56a:	71 f4       	brne	.+28     	; 0x588 <fdevopen+0x88>
 56c:	f0 93 f3 02 	sts	0x02F3, r31
 570:	e0 93 f2 02 	sts	0x02F2, r30
 574:	80 91 f4 02 	lds	r24, 0x02F4
 578:	90 91 f5 02 	lds	r25, 0x02F5
 57c:	89 2b       	or	r24, r25
 57e:	21 f4       	brne	.+8      	; 0x588 <fdevopen+0x88>
 580:	f0 93 f5 02 	sts	0x02F5, r31
 584:	e0 93 f4 02 	sts	0x02F4, r30
 588:	cf 01       	movw	r24, r30
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	08 95       	ret

00000594 <printf>:
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	fe 01       	movw	r30, r28
 59e:	36 96       	adiw	r30, 0x06	; 6
 5a0:	61 91       	ld	r22, Z+
 5a2:	71 91       	ld	r23, Z+
 5a4:	af 01       	movw	r20, r30
 5a6:	80 91 f2 02 	lds	r24, 0x02F2
 5aa:	90 91 f3 02 	lds	r25, 0x02F3
 5ae:	03 d0       	rcall	.+6      	; 0x5b6 <vfprintf>
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <vfprintf>:
 5b6:	2f 92       	push	r2
 5b8:	3f 92       	push	r3
 5ba:	4f 92       	push	r4
 5bc:	5f 92       	push	r5
 5be:	6f 92       	push	r6
 5c0:	7f 92       	push	r7
 5c2:	8f 92       	push	r8
 5c4:	9f 92       	push	r9
 5c6:	af 92       	push	r10
 5c8:	bf 92       	push	r11
 5ca:	cf 92       	push	r12
 5cc:	df 92       	push	r13
 5ce:	ef 92       	push	r14
 5d0:	ff 92       	push	r15
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	2c 97       	sbiw	r28, 0x0c	; 12
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	7c 01       	movw	r14, r24
 5ec:	6b 01       	movw	r12, r22
 5ee:	8a 01       	movw	r16, r20
 5f0:	fc 01       	movw	r30, r24
 5f2:	17 82       	std	Z+7, r1	; 0x07
 5f4:	16 82       	std	Z+6, r1	; 0x06
 5f6:	83 81       	ldd	r24, Z+3	; 0x03
 5f8:	81 ff       	sbrs	r24, 1
 5fa:	b0 c1       	rjmp	.+864    	; 0x95c <vfprintf+0x3a6>
 5fc:	ce 01       	movw	r24, r28
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	4c 01       	movw	r8, r24
 602:	f7 01       	movw	r30, r14
 604:	93 81       	ldd	r25, Z+3	; 0x03
 606:	f6 01       	movw	r30, r12
 608:	93 fd       	sbrc	r25, 3
 60a:	85 91       	lpm	r24, Z+
 60c:	93 ff       	sbrs	r25, 3
 60e:	81 91       	ld	r24, Z+
 610:	6f 01       	movw	r12, r30
 612:	88 23       	and	r24, r24
 614:	09 f4       	brne	.+2      	; 0x618 <vfprintf+0x62>
 616:	9e c1       	rjmp	.+828    	; 0x954 <vfprintf+0x39e>
 618:	85 32       	cpi	r24, 0x25	; 37
 61a:	39 f4       	brne	.+14     	; 0x62a <vfprintf+0x74>
 61c:	93 fd       	sbrc	r25, 3
 61e:	85 91       	lpm	r24, Z+
 620:	93 ff       	sbrs	r25, 3
 622:	81 91       	ld	r24, Z+
 624:	6f 01       	movw	r12, r30
 626:	85 32       	cpi	r24, 0x25	; 37
 628:	21 f4       	brne	.+8      	; 0x632 <vfprintf+0x7c>
 62a:	b7 01       	movw	r22, r14
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0f d3       	rcall	.+1566   	; 0xc4e <fputc>
 630:	e8 cf       	rjmp	.-48     	; 0x602 <vfprintf+0x4c>
 632:	51 2c       	mov	r5, r1
 634:	31 2c       	mov	r3, r1
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	20 32       	cpi	r18, 0x20	; 32
 63a:	a0 f4       	brcc	.+40     	; 0x664 <vfprintf+0xae>
 63c:	8b 32       	cpi	r24, 0x2B	; 43
 63e:	69 f0       	breq	.+26     	; 0x65a <vfprintf+0xa4>
 640:	30 f4       	brcc	.+12     	; 0x64e <vfprintf+0x98>
 642:	80 32       	cpi	r24, 0x20	; 32
 644:	59 f0       	breq	.+22     	; 0x65c <vfprintf+0xa6>
 646:	83 32       	cpi	r24, 0x23	; 35
 648:	69 f4       	brne	.+26     	; 0x664 <vfprintf+0xae>
 64a:	20 61       	ori	r18, 0x10	; 16
 64c:	2c c0       	rjmp	.+88     	; 0x6a6 <vfprintf+0xf0>
 64e:	8d 32       	cpi	r24, 0x2D	; 45
 650:	39 f0       	breq	.+14     	; 0x660 <vfprintf+0xaa>
 652:	80 33       	cpi	r24, 0x30	; 48
 654:	39 f4       	brne	.+14     	; 0x664 <vfprintf+0xae>
 656:	21 60       	ori	r18, 0x01	; 1
 658:	26 c0       	rjmp	.+76     	; 0x6a6 <vfprintf+0xf0>
 65a:	22 60       	ori	r18, 0x02	; 2
 65c:	24 60       	ori	r18, 0x04	; 4
 65e:	23 c0       	rjmp	.+70     	; 0x6a6 <vfprintf+0xf0>
 660:	28 60       	ori	r18, 0x08	; 8
 662:	21 c0       	rjmp	.+66     	; 0x6a6 <vfprintf+0xf0>
 664:	27 fd       	sbrc	r18, 7
 666:	27 c0       	rjmp	.+78     	; 0x6b6 <vfprintf+0x100>
 668:	30 ed       	ldi	r19, 0xD0	; 208
 66a:	38 0f       	add	r19, r24
 66c:	3a 30       	cpi	r19, 0x0A	; 10
 66e:	78 f4       	brcc	.+30     	; 0x68e <vfprintf+0xd8>
 670:	26 ff       	sbrs	r18, 6
 672:	06 c0       	rjmp	.+12     	; 0x680 <vfprintf+0xca>
 674:	fa e0       	ldi	r31, 0x0A	; 10
 676:	5f 9e       	mul	r5, r31
 678:	30 0d       	add	r19, r0
 67a:	11 24       	eor	r1, r1
 67c:	53 2e       	mov	r5, r19
 67e:	13 c0       	rjmp	.+38     	; 0x6a6 <vfprintf+0xf0>
 680:	8a e0       	ldi	r24, 0x0A	; 10
 682:	38 9e       	mul	r3, r24
 684:	30 0d       	add	r19, r0
 686:	11 24       	eor	r1, r1
 688:	33 2e       	mov	r3, r19
 68a:	20 62       	ori	r18, 0x20	; 32
 68c:	0c c0       	rjmp	.+24     	; 0x6a6 <vfprintf+0xf0>
 68e:	8e 32       	cpi	r24, 0x2E	; 46
 690:	21 f4       	brne	.+8      	; 0x69a <vfprintf+0xe4>
 692:	26 fd       	sbrc	r18, 6
 694:	5f c1       	rjmp	.+702    	; 0x954 <vfprintf+0x39e>
 696:	20 64       	ori	r18, 0x40	; 64
 698:	06 c0       	rjmp	.+12     	; 0x6a6 <vfprintf+0xf0>
 69a:	8c 36       	cpi	r24, 0x6C	; 108
 69c:	11 f4       	brne	.+4      	; 0x6a2 <vfprintf+0xec>
 69e:	20 68       	ori	r18, 0x80	; 128
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <vfprintf+0xf0>
 6a2:	88 36       	cpi	r24, 0x68	; 104
 6a4:	41 f4       	brne	.+16     	; 0x6b6 <vfprintf+0x100>
 6a6:	f6 01       	movw	r30, r12
 6a8:	93 fd       	sbrc	r25, 3
 6aa:	85 91       	lpm	r24, Z+
 6ac:	93 ff       	sbrs	r25, 3
 6ae:	81 91       	ld	r24, Z+
 6b0:	6f 01       	movw	r12, r30
 6b2:	81 11       	cpse	r24, r1
 6b4:	c1 cf       	rjmp	.-126    	; 0x638 <vfprintf+0x82>
 6b6:	98 2f       	mov	r25, r24
 6b8:	9f 7d       	andi	r25, 0xDF	; 223
 6ba:	95 54       	subi	r25, 0x45	; 69
 6bc:	93 30       	cpi	r25, 0x03	; 3
 6be:	28 f4       	brcc	.+10     	; 0x6ca <vfprintf+0x114>
 6c0:	0c 5f       	subi	r16, 0xFC	; 252
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	ff e3       	ldi	r31, 0x3F	; 63
 6c6:	f9 83       	std	Y+1, r31	; 0x01
 6c8:	0d c0       	rjmp	.+26     	; 0x6e4 <vfprintf+0x12e>
 6ca:	83 36       	cpi	r24, 0x63	; 99
 6cc:	31 f0       	breq	.+12     	; 0x6da <vfprintf+0x124>
 6ce:	83 37       	cpi	r24, 0x73	; 115
 6d0:	71 f0       	breq	.+28     	; 0x6ee <vfprintf+0x138>
 6d2:	83 35       	cpi	r24, 0x53	; 83
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <vfprintf+0x122>
 6d6:	57 c0       	rjmp	.+174    	; 0x786 <vfprintf+0x1d0>
 6d8:	21 c0       	rjmp	.+66     	; 0x71c <vfprintf+0x166>
 6da:	f8 01       	movw	r30, r16
 6dc:	80 81       	ld	r24, Z
 6de:	89 83       	std	Y+1, r24	; 0x01
 6e0:	0e 5f       	subi	r16, 0xFE	; 254
 6e2:	1f 4f       	sbci	r17, 0xFF	; 255
 6e4:	44 24       	eor	r4, r4
 6e6:	43 94       	inc	r4
 6e8:	51 2c       	mov	r5, r1
 6ea:	54 01       	movw	r10, r8
 6ec:	14 c0       	rjmp	.+40     	; 0x716 <vfprintf+0x160>
 6ee:	38 01       	movw	r6, r16
 6f0:	f2 e0       	ldi	r31, 0x02	; 2
 6f2:	6f 0e       	add	r6, r31
 6f4:	71 1c       	adc	r7, r1
 6f6:	f8 01       	movw	r30, r16
 6f8:	a0 80       	ld	r10, Z
 6fa:	b1 80       	ldd	r11, Z+1	; 0x01
 6fc:	26 ff       	sbrs	r18, 6
 6fe:	03 c0       	rjmp	.+6      	; 0x706 <vfprintf+0x150>
 700:	65 2d       	mov	r22, r5
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	02 c0       	rjmp	.+4      	; 0x70a <vfprintf+0x154>
 706:	6f ef       	ldi	r22, 0xFF	; 255
 708:	7f ef       	ldi	r23, 0xFF	; 255
 70a:	c5 01       	movw	r24, r10
 70c:	2c 87       	std	Y+12, r18	; 0x0c
 70e:	94 d2       	rcall	.+1320   	; 0xc38 <strnlen>
 710:	2c 01       	movw	r4, r24
 712:	83 01       	movw	r16, r6
 714:	2c 85       	ldd	r18, Y+12	; 0x0c
 716:	2f 77       	andi	r18, 0x7F	; 127
 718:	22 2e       	mov	r2, r18
 71a:	16 c0       	rjmp	.+44     	; 0x748 <vfprintf+0x192>
 71c:	38 01       	movw	r6, r16
 71e:	f2 e0       	ldi	r31, 0x02	; 2
 720:	6f 0e       	add	r6, r31
 722:	71 1c       	adc	r7, r1
 724:	f8 01       	movw	r30, r16
 726:	a0 80       	ld	r10, Z
 728:	b1 80       	ldd	r11, Z+1	; 0x01
 72a:	26 ff       	sbrs	r18, 6
 72c:	03 c0       	rjmp	.+6      	; 0x734 <vfprintf+0x17e>
 72e:	65 2d       	mov	r22, r5
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	02 c0       	rjmp	.+4      	; 0x738 <vfprintf+0x182>
 734:	6f ef       	ldi	r22, 0xFF	; 255
 736:	7f ef       	ldi	r23, 0xFF	; 255
 738:	c5 01       	movw	r24, r10
 73a:	2c 87       	std	Y+12, r18	; 0x0c
 73c:	6b d2       	rcall	.+1238   	; 0xc14 <strnlen_P>
 73e:	2c 01       	movw	r4, r24
 740:	2c 85       	ldd	r18, Y+12	; 0x0c
 742:	20 68       	ori	r18, 0x80	; 128
 744:	22 2e       	mov	r2, r18
 746:	83 01       	movw	r16, r6
 748:	23 fc       	sbrc	r2, 3
 74a:	19 c0       	rjmp	.+50     	; 0x77e <vfprintf+0x1c8>
 74c:	83 2d       	mov	r24, r3
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	48 16       	cp	r4, r24
 752:	59 06       	cpc	r5, r25
 754:	a0 f4       	brcc	.+40     	; 0x77e <vfprintf+0x1c8>
 756:	b7 01       	movw	r22, r14
 758:	80 e2       	ldi	r24, 0x20	; 32
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	78 d2       	rcall	.+1264   	; 0xc4e <fputc>
 75e:	3a 94       	dec	r3
 760:	f5 cf       	rjmp	.-22     	; 0x74c <vfprintf+0x196>
 762:	f5 01       	movw	r30, r10
 764:	27 fc       	sbrc	r2, 7
 766:	85 91       	lpm	r24, Z+
 768:	27 fe       	sbrs	r2, 7
 76a:	81 91       	ld	r24, Z+
 76c:	5f 01       	movw	r10, r30
 76e:	b7 01       	movw	r22, r14
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	6d d2       	rcall	.+1242   	; 0xc4e <fputc>
 774:	31 10       	cpse	r3, r1
 776:	3a 94       	dec	r3
 778:	f1 e0       	ldi	r31, 0x01	; 1
 77a:	4f 1a       	sub	r4, r31
 77c:	51 08       	sbc	r5, r1
 77e:	41 14       	cp	r4, r1
 780:	51 04       	cpc	r5, r1
 782:	79 f7       	brne	.-34     	; 0x762 <vfprintf+0x1ac>
 784:	de c0       	rjmp	.+444    	; 0x942 <vfprintf+0x38c>
 786:	84 36       	cpi	r24, 0x64	; 100
 788:	11 f0       	breq	.+4      	; 0x78e <vfprintf+0x1d8>
 78a:	89 36       	cpi	r24, 0x69	; 105
 78c:	31 f5       	brne	.+76     	; 0x7da <vfprintf+0x224>
 78e:	f8 01       	movw	r30, r16
 790:	27 ff       	sbrs	r18, 7
 792:	07 c0       	rjmp	.+14     	; 0x7a2 <vfprintf+0x1ec>
 794:	60 81       	ld	r22, Z
 796:	71 81       	ldd	r23, Z+1	; 0x01
 798:	82 81       	ldd	r24, Z+2	; 0x02
 79a:	93 81       	ldd	r25, Z+3	; 0x03
 79c:	0c 5f       	subi	r16, 0xFC	; 252
 79e:	1f 4f       	sbci	r17, 0xFF	; 255
 7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <vfprintf+0x1fc>
 7a2:	60 81       	ld	r22, Z
 7a4:	71 81       	ldd	r23, Z+1	; 0x01
 7a6:	88 27       	eor	r24, r24
 7a8:	77 fd       	sbrc	r23, 7
 7aa:	80 95       	com	r24
 7ac:	98 2f       	mov	r25, r24
 7ae:	0e 5f       	subi	r16, 0xFE	; 254
 7b0:	1f 4f       	sbci	r17, 0xFF	; 255
 7b2:	2f 76       	andi	r18, 0x6F	; 111
 7b4:	b2 2e       	mov	r11, r18
 7b6:	97 ff       	sbrs	r25, 7
 7b8:	09 c0       	rjmp	.+18     	; 0x7cc <vfprintf+0x216>
 7ba:	90 95       	com	r25
 7bc:	80 95       	com	r24
 7be:	70 95       	com	r23
 7c0:	61 95       	neg	r22
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	20 68       	ori	r18, 0x80	; 128
 7ca:	b2 2e       	mov	r11, r18
 7cc:	2a e0       	ldi	r18, 0x0A	; 10
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	a4 01       	movw	r20, r8
 7d2:	6f d2       	rcall	.+1246   	; 0xcb2 <__ultoa_invert>
 7d4:	a8 2e       	mov	r10, r24
 7d6:	a8 18       	sub	r10, r8
 7d8:	43 c0       	rjmp	.+134    	; 0x860 <vfprintf+0x2aa>
 7da:	85 37       	cpi	r24, 0x75	; 117
 7dc:	29 f4       	brne	.+10     	; 0x7e8 <vfprintf+0x232>
 7de:	2f 7e       	andi	r18, 0xEF	; 239
 7e0:	b2 2e       	mov	r11, r18
 7e2:	2a e0       	ldi	r18, 0x0A	; 10
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	25 c0       	rjmp	.+74     	; 0x832 <vfprintf+0x27c>
 7e8:	f2 2f       	mov	r31, r18
 7ea:	f9 7f       	andi	r31, 0xF9	; 249
 7ec:	bf 2e       	mov	r11, r31
 7ee:	8f 36       	cpi	r24, 0x6F	; 111
 7f0:	c1 f0       	breq	.+48     	; 0x822 <vfprintf+0x26c>
 7f2:	18 f4       	brcc	.+6      	; 0x7fa <vfprintf+0x244>
 7f4:	88 35       	cpi	r24, 0x58	; 88
 7f6:	79 f0       	breq	.+30     	; 0x816 <vfprintf+0x260>
 7f8:	ad c0       	rjmp	.+346    	; 0x954 <vfprintf+0x39e>
 7fa:	80 37       	cpi	r24, 0x70	; 112
 7fc:	19 f0       	breq	.+6      	; 0x804 <vfprintf+0x24e>
 7fe:	88 37       	cpi	r24, 0x78	; 120
 800:	21 f0       	breq	.+8      	; 0x80a <vfprintf+0x254>
 802:	a8 c0       	rjmp	.+336    	; 0x954 <vfprintf+0x39e>
 804:	2f 2f       	mov	r18, r31
 806:	20 61       	ori	r18, 0x10	; 16
 808:	b2 2e       	mov	r11, r18
 80a:	b4 fe       	sbrs	r11, 4
 80c:	0d c0       	rjmp	.+26     	; 0x828 <vfprintf+0x272>
 80e:	8b 2d       	mov	r24, r11
 810:	84 60       	ori	r24, 0x04	; 4
 812:	b8 2e       	mov	r11, r24
 814:	09 c0       	rjmp	.+18     	; 0x828 <vfprintf+0x272>
 816:	24 ff       	sbrs	r18, 4
 818:	0a c0       	rjmp	.+20     	; 0x82e <vfprintf+0x278>
 81a:	9f 2f       	mov	r25, r31
 81c:	96 60       	ori	r25, 0x06	; 6
 81e:	b9 2e       	mov	r11, r25
 820:	06 c0       	rjmp	.+12     	; 0x82e <vfprintf+0x278>
 822:	28 e0       	ldi	r18, 0x08	; 8
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	05 c0       	rjmp	.+10     	; 0x832 <vfprintf+0x27c>
 828:	20 e1       	ldi	r18, 0x10	; 16
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <vfprintf+0x27c>
 82e:	20 e1       	ldi	r18, 0x10	; 16
 830:	32 e0       	ldi	r19, 0x02	; 2
 832:	f8 01       	movw	r30, r16
 834:	b7 fe       	sbrs	r11, 7
 836:	07 c0       	rjmp	.+14     	; 0x846 <vfprintf+0x290>
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	82 81       	ldd	r24, Z+2	; 0x02
 83e:	93 81       	ldd	r25, Z+3	; 0x03
 840:	0c 5f       	subi	r16, 0xFC	; 252
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	06 c0       	rjmp	.+12     	; 0x852 <vfprintf+0x29c>
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 5f       	subi	r16, 0xFE	; 254
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	a4 01       	movw	r20, r8
 854:	2e d2       	rcall	.+1116   	; 0xcb2 <__ultoa_invert>
 856:	a8 2e       	mov	r10, r24
 858:	a8 18       	sub	r10, r8
 85a:	fb 2d       	mov	r31, r11
 85c:	ff 77       	andi	r31, 0x7F	; 127
 85e:	bf 2e       	mov	r11, r31
 860:	b6 fe       	sbrs	r11, 6
 862:	0b c0       	rjmp	.+22     	; 0x87a <vfprintf+0x2c4>
 864:	2b 2d       	mov	r18, r11
 866:	2e 7f       	andi	r18, 0xFE	; 254
 868:	a5 14       	cp	r10, r5
 86a:	50 f4       	brcc	.+20     	; 0x880 <vfprintf+0x2ca>
 86c:	b4 fe       	sbrs	r11, 4
 86e:	0a c0       	rjmp	.+20     	; 0x884 <vfprintf+0x2ce>
 870:	b2 fc       	sbrc	r11, 2
 872:	08 c0       	rjmp	.+16     	; 0x884 <vfprintf+0x2ce>
 874:	2b 2d       	mov	r18, r11
 876:	2e 7e       	andi	r18, 0xEE	; 238
 878:	05 c0       	rjmp	.+10     	; 0x884 <vfprintf+0x2ce>
 87a:	7a 2c       	mov	r7, r10
 87c:	2b 2d       	mov	r18, r11
 87e:	03 c0       	rjmp	.+6      	; 0x886 <vfprintf+0x2d0>
 880:	7a 2c       	mov	r7, r10
 882:	01 c0       	rjmp	.+2      	; 0x886 <vfprintf+0x2d0>
 884:	75 2c       	mov	r7, r5
 886:	24 ff       	sbrs	r18, 4
 888:	0d c0       	rjmp	.+26     	; 0x8a4 <vfprintf+0x2ee>
 88a:	fe 01       	movw	r30, r28
 88c:	ea 0d       	add	r30, r10
 88e:	f1 1d       	adc	r31, r1
 890:	80 81       	ld	r24, Z
 892:	80 33       	cpi	r24, 0x30	; 48
 894:	11 f4       	brne	.+4      	; 0x89a <vfprintf+0x2e4>
 896:	29 7e       	andi	r18, 0xE9	; 233
 898:	09 c0       	rjmp	.+18     	; 0x8ac <vfprintf+0x2f6>
 89a:	22 ff       	sbrs	r18, 2
 89c:	06 c0       	rjmp	.+12     	; 0x8aa <vfprintf+0x2f4>
 89e:	73 94       	inc	r7
 8a0:	73 94       	inc	r7
 8a2:	04 c0       	rjmp	.+8      	; 0x8ac <vfprintf+0x2f6>
 8a4:	82 2f       	mov	r24, r18
 8a6:	86 78       	andi	r24, 0x86	; 134
 8a8:	09 f0       	breq	.+2      	; 0x8ac <vfprintf+0x2f6>
 8aa:	73 94       	inc	r7
 8ac:	23 fd       	sbrc	r18, 3
 8ae:	12 c0       	rjmp	.+36     	; 0x8d4 <vfprintf+0x31e>
 8b0:	20 ff       	sbrs	r18, 0
 8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <vfprintf+0x30a>
 8b4:	5a 2c       	mov	r5, r10
 8b6:	73 14       	cp	r7, r3
 8b8:	18 f4       	brcc	.+6      	; 0x8c0 <vfprintf+0x30a>
 8ba:	53 0c       	add	r5, r3
 8bc:	57 18       	sub	r5, r7
 8be:	73 2c       	mov	r7, r3
 8c0:	73 14       	cp	r7, r3
 8c2:	60 f4       	brcc	.+24     	; 0x8dc <vfprintf+0x326>
 8c4:	b7 01       	movw	r22, r14
 8c6:	80 e2       	ldi	r24, 0x20	; 32
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	2c 87       	std	Y+12, r18	; 0x0c
 8cc:	c0 d1       	rcall	.+896    	; 0xc4e <fputc>
 8ce:	73 94       	inc	r7
 8d0:	2c 85       	ldd	r18, Y+12	; 0x0c
 8d2:	f6 cf       	rjmp	.-20     	; 0x8c0 <vfprintf+0x30a>
 8d4:	73 14       	cp	r7, r3
 8d6:	10 f4       	brcc	.+4      	; 0x8dc <vfprintf+0x326>
 8d8:	37 18       	sub	r3, r7
 8da:	01 c0       	rjmp	.+2      	; 0x8de <vfprintf+0x328>
 8dc:	31 2c       	mov	r3, r1
 8de:	24 ff       	sbrs	r18, 4
 8e0:	11 c0       	rjmp	.+34     	; 0x904 <vfprintf+0x34e>
 8e2:	b7 01       	movw	r22, r14
 8e4:	80 e3       	ldi	r24, 0x30	; 48
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	2c 87       	std	Y+12, r18	; 0x0c
 8ea:	b1 d1       	rcall	.+866    	; 0xc4e <fputc>
 8ec:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ee:	22 ff       	sbrs	r18, 2
 8f0:	16 c0       	rjmp	.+44     	; 0x91e <vfprintf+0x368>
 8f2:	21 ff       	sbrs	r18, 1
 8f4:	03 c0       	rjmp	.+6      	; 0x8fc <vfprintf+0x346>
 8f6:	88 e5       	ldi	r24, 0x58	; 88
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <vfprintf+0x34a>
 8fc:	88 e7       	ldi	r24, 0x78	; 120
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	b7 01       	movw	r22, r14
 902:	0c c0       	rjmp	.+24     	; 0x91c <vfprintf+0x366>
 904:	82 2f       	mov	r24, r18
 906:	86 78       	andi	r24, 0x86	; 134
 908:	51 f0       	breq	.+20     	; 0x91e <vfprintf+0x368>
 90a:	21 fd       	sbrc	r18, 1
 90c:	02 c0       	rjmp	.+4      	; 0x912 <vfprintf+0x35c>
 90e:	80 e2       	ldi	r24, 0x20	; 32
 910:	01 c0       	rjmp	.+2      	; 0x914 <vfprintf+0x35e>
 912:	8b e2       	ldi	r24, 0x2B	; 43
 914:	27 fd       	sbrc	r18, 7
 916:	8d e2       	ldi	r24, 0x2D	; 45
 918:	b7 01       	movw	r22, r14
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	98 d1       	rcall	.+816    	; 0xc4e <fputc>
 91e:	a5 14       	cp	r10, r5
 920:	30 f4       	brcc	.+12     	; 0x92e <vfprintf+0x378>
 922:	b7 01       	movw	r22, r14
 924:	80 e3       	ldi	r24, 0x30	; 48
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	92 d1       	rcall	.+804    	; 0xc4e <fputc>
 92a:	5a 94       	dec	r5
 92c:	f8 cf       	rjmp	.-16     	; 0x91e <vfprintf+0x368>
 92e:	aa 94       	dec	r10
 930:	f4 01       	movw	r30, r8
 932:	ea 0d       	add	r30, r10
 934:	f1 1d       	adc	r31, r1
 936:	80 81       	ld	r24, Z
 938:	b7 01       	movw	r22, r14
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	88 d1       	rcall	.+784    	; 0xc4e <fputc>
 93e:	a1 10       	cpse	r10, r1
 940:	f6 cf       	rjmp	.-20     	; 0x92e <vfprintf+0x378>
 942:	33 20       	and	r3, r3
 944:	09 f4       	brne	.+2      	; 0x948 <vfprintf+0x392>
 946:	5d ce       	rjmp	.-838    	; 0x602 <vfprintf+0x4c>
 948:	b7 01       	movw	r22, r14
 94a:	80 e2       	ldi	r24, 0x20	; 32
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	7f d1       	rcall	.+766    	; 0xc4e <fputc>
 950:	3a 94       	dec	r3
 952:	f7 cf       	rjmp	.-18     	; 0x942 <vfprintf+0x38c>
 954:	f7 01       	movw	r30, r14
 956:	86 81       	ldd	r24, Z+6	; 0x06
 958:	97 81       	ldd	r25, Z+7	; 0x07
 95a:	02 c0       	rjmp	.+4      	; 0x960 <vfprintf+0x3aa>
 95c:	8f ef       	ldi	r24, 0xFF	; 255
 95e:	9f ef       	ldi	r25, 0xFF	; 255
 960:	2c 96       	adiw	r28, 0x0c	; 12
 962:	0f b6       	in	r0, 0x3f	; 63
 964:	f8 94       	cli
 966:	de bf       	out	0x3e, r29	; 62
 968:	0f be       	out	0x3f, r0	; 63
 96a:	cd bf       	out	0x3d, r28	; 61
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	1f 91       	pop	r17
 972:	0f 91       	pop	r16
 974:	ff 90       	pop	r15
 976:	ef 90       	pop	r14
 978:	df 90       	pop	r13
 97a:	cf 90       	pop	r12
 97c:	bf 90       	pop	r11
 97e:	af 90       	pop	r10
 980:	9f 90       	pop	r9
 982:	8f 90       	pop	r8
 984:	7f 90       	pop	r7
 986:	6f 90       	pop	r6
 988:	5f 90       	pop	r5
 98a:	4f 90       	pop	r4
 98c:	3f 90       	pop	r3
 98e:	2f 90       	pop	r2
 990:	08 95       	ret

00000992 <calloc>:
 992:	0f 93       	push	r16
 994:	1f 93       	push	r17
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
 99a:	86 9f       	mul	r24, r22
 99c:	80 01       	movw	r16, r0
 99e:	87 9f       	mul	r24, r23
 9a0:	10 0d       	add	r17, r0
 9a2:	96 9f       	mul	r25, r22
 9a4:	10 0d       	add	r17, r0
 9a6:	11 24       	eor	r1, r1
 9a8:	c8 01       	movw	r24, r16
 9aa:	0d d0       	rcall	.+26     	; 0x9c6 <malloc>
 9ac:	ec 01       	movw	r28, r24
 9ae:	00 97       	sbiw	r24, 0x00	; 0
 9b0:	21 f0       	breq	.+8      	; 0x9ba <calloc+0x28>
 9b2:	a8 01       	movw	r20, r16
 9b4:	60 e0       	ldi	r22, 0x00	; 0
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	38 d1       	rcall	.+624    	; 0xc2a <memset>
 9ba:	ce 01       	movw	r24, r28
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	08 95       	ret

000009c6 <malloc>:
 9c6:	cf 93       	push	r28
 9c8:	df 93       	push	r29
 9ca:	82 30       	cpi	r24, 0x02	; 2
 9cc:	91 05       	cpc	r25, r1
 9ce:	10 f4       	brcc	.+4      	; 0x9d4 <malloc+0xe>
 9d0:	82 e0       	ldi	r24, 0x02	; 2
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	e0 91 f8 02 	lds	r30, 0x02F8
 9d8:	f0 91 f9 02 	lds	r31, 0x02F9
 9dc:	20 e0       	ldi	r18, 0x00	; 0
 9de:	30 e0       	ldi	r19, 0x00	; 0
 9e0:	a0 e0       	ldi	r26, 0x00	; 0
 9e2:	b0 e0       	ldi	r27, 0x00	; 0
 9e4:	30 97       	sbiw	r30, 0x00	; 0
 9e6:	39 f1       	breq	.+78     	; 0xa36 <malloc+0x70>
 9e8:	40 81       	ld	r20, Z
 9ea:	51 81       	ldd	r21, Z+1	; 0x01
 9ec:	48 17       	cp	r20, r24
 9ee:	59 07       	cpc	r21, r25
 9f0:	b8 f0       	brcs	.+46     	; 0xa20 <malloc+0x5a>
 9f2:	48 17       	cp	r20, r24
 9f4:	59 07       	cpc	r21, r25
 9f6:	71 f4       	brne	.+28     	; 0xa14 <malloc+0x4e>
 9f8:	82 81       	ldd	r24, Z+2	; 0x02
 9fa:	93 81       	ldd	r25, Z+3	; 0x03
 9fc:	10 97       	sbiw	r26, 0x00	; 0
 9fe:	29 f0       	breq	.+10     	; 0xa0a <malloc+0x44>
 a00:	13 96       	adiw	r26, 0x03	; 3
 a02:	9c 93       	st	X, r25
 a04:	8e 93       	st	-X, r24
 a06:	12 97       	sbiw	r26, 0x02	; 2
 a08:	2c c0       	rjmp	.+88     	; 0xa62 <malloc+0x9c>
 a0a:	90 93 f9 02 	sts	0x02F9, r25
 a0e:	80 93 f8 02 	sts	0x02F8, r24
 a12:	27 c0       	rjmp	.+78     	; 0xa62 <malloc+0x9c>
 a14:	21 15       	cp	r18, r1
 a16:	31 05       	cpc	r19, r1
 a18:	31 f0       	breq	.+12     	; 0xa26 <malloc+0x60>
 a1a:	42 17       	cp	r20, r18
 a1c:	53 07       	cpc	r21, r19
 a1e:	18 f0       	brcs	.+6      	; 0xa26 <malloc+0x60>
 a20:	a9 01       	movw	r20, r18
 a22:	db 01       	movw	r26, r22
 a24:	01 c0       	rjmp	.+2      	; 0xa28 <malloc+0x62>
 a26:	ef 01       	movw	r28, r30
 a28:	9a 01       	movw	r18, r20
 a2a:	bd 01       	movw	r22, r26
 a2c:	df 01       	movw	r26, r30
 a2e:	02 80       	ldd	r0, Z+2	; 0x02
 a30:	f3 81       	ldd	r31, Z+3	; 0x03
 a32:	e0 2d       	mov	r30, r0
 a34:	d7 cf       	rjmp	.-82     	; 0x9e4 <malloc+0x1e>
 a36:	21 15       	cp	r18, r1
 a38:	31 05       	cpc	r19, r1
 a3a:	f9 f0       	breq	.+62     	; 0xa7a <malloc+0xb4>
 a3c:	28 1b       	sub	r18, r24
 a3e:	39 0b       	sbc	r19, r25
 a40:	24 30       	cpi	r18, 0x04	; 4
 a42:	31 05       	cpc	r19, r1
 a44:	80 f4       	brcc	.+32     	; 0xa66 <malloc+0xa0>
 a46:	8a 81       	ldd	r24, Y+2	; 0x02
 a48:	9b 81       	ldd	r25, Y+3	; 0x03
 a4a:	61 15       	cp	r22, r1
 a4c:	71 05       	cpc	r23, r1
 a4e:	21 f0       	breq	.+8      	; 0xa58 <malloc+0x92>
 a50:	fb 01       	movw	r30, r22
 a52:	93 83       	std	Z+3, r25	; 0x03
 a54:	82 83       	std	Z+2, r24	; 0x02
 a56:	04 c0       	rjmp	.+8      	; 0xa60 <malloc+0x9a>
 a58:	90 93 f9 02 	sts	0x02F9, r25
 a5c:	80 93 f8 02 	sts	0x02F8, r24
 a60:	fe 01       	movw	r30, r28
 a62:	32 96       	adiw	r30, 0x02	; 2
 a64:	44 c0       	rjmp	.+136    	; 0xaee <malloc+0x128>
 a66:	fe 01       	movw	r30, r28
 a68:	e2 0f       	add	r30, r18
 a6a:	f3 1f       	adc	r31, r19
 a6c:	81 93       	st	Z+, r24
 a6e:	91 93       	st	Z+, r25
 a70:	22 50       	subi	r18, 0x02	; 2
 a72:	31 09       	sbc	r19, r1
 a74:	39 83       	std	Y+1, r19	; 0x01
 a76:	28 83       	st	Y, r18
 a78:	3a c0       	rjmp	.+116    	; 0xaee <malloc+0x128>
 a7a:	20 91 f6 02 	lds	r18, 0x02F6
 a7e:	30 91 f7 02 	lds	r19, 0x02F7
 a82:	23 2b       	or	r18, r19
 a84:	41 f4       	brne	.+16     	; 0xa96 <malloc+0xd0>
 a86:	20 91 02 02 	lds	r18, 0x0202
 a8a:	30 91 03 02 	lds	r19, 0x0203
 a8e:	30 93 f7 02 	sts	0x02F7, r19
 a92:	20 93 f6 02 	sts	0x02F6, r18
 a96:	20 91 00 02 	lds	r18, 0x0200
 a9a:	30 91 01 02 	lds	r19, 0x0201
 a9e:	21 15       	cp	r18, r1
 aa0:	31 05       	cpc	r19, r1
 aa2:	41 f4       	brne	.+16     	; 0xab4 <malloc+0xee>
 aa4:	2d b7       	in	r18, 0x3d	; 61
 aa6:	3e b7       	in	r19, 0x3e	; 62
 aa8:	40 91 04 02 	lds	r20, 0x0204
 aac:	50 91 05 02 	lds	r21, 0x0205
 ab0:	24 1b       	sub	r18, r20
 ab2:	35 0b       	sbc	r19, r21
 ab4:	e0 91 f6 02 	lds	r30, 0x02F6
 ab8:	f0 91 f7 02 	lds	r31, 0x02F7
 abc:	e2 17       	cp	r30, r18
 abe:	f3 07       	cpc	r31, r19
 ac0:	a0 f4       	brcc	.+40     	; 0xaea <malloc+0x124>
 ac2:	2e 1b       	sub	r18, r30
 ac4:	3f 0b       	sbc	r19, r31
 ac6:	28 17       	cp	r18, r24
 ac8:	39 07       	cpc	r19, r25
 aca:	78 f0       	brcs	.+30     	; 0xaea <malloc+0x124>
 acc:	ac 01       	movw	r20, r24
 ace:	4e 5f       	subi	r20, 0xFE	; 254
 ad0:	5f 4f       	sbci	r21, 0xFF	; 255
 ad2:	24 17       	cp	r18, r20
 ad4:	35 07       	cpc	r19, r21
 ad6:	48 f0       	brcs	.+18     	; 0xaea <malloc+0x124>
 ad8:	4e 0f       	add	r20, r30
 ada:	5f 1f       	adc	r21, r31
 adc:	50 93 f7 02 	sts	0x02F7, r21
 ae0:	40 93 f6 02 	sts	0x02F6, r20
 ae4:	81 93       	st	Z+, r24
 ae6:	91 93       	st	Z+, r25
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <malloc+0x128>
 aea:	e0 e0       	ldi	r30, 0x00	; 0
 aec:	f0 e0       	ldi	r31, 0x00	; 0
 aee:	cf 01       	movw	r24, r30
 af0:	df 91       	pop	r29
 af2:	cf 91       	pop	r28
 af4:	08 95       	ret

00000af6 <free>:
 af6:	cf 93       	push	r28
 af8:	df 93       	push	r29
 afa:	00 97       	sbiw	r24, 0x00	; 0
 afc:	09 f4       	brne	.+2      	; 0xb00 <free+0xa>
 afe:	87 c0       	rjmp	.+270    	; 0xc0e <free+0x118>
 b00:	fc 01       	movw	r30, r24
 b02:	32 97       	sbiw	r30, 0x02	; 2
 b04:	13 82       	std	Z+3, r1	; 0x03
 b06:	12 82       	std	Z+2, r1	; 0x02
 b08:	c0 91 f8 02 	lds	r28, 0x02F8
 b0c:	d0 91 f9 02 	lds	r29, 0x02F9
 b10:	20 97       	sbiw	r28, 0x00	; 0
 b12:	81 f4       	brne	.+32     	; 0xb34 <free+0x3e>
 b14:	20 81       	ld	r18, Z
 b16:	31 81       	ldd	r19, Z+1	; 0x01
 b18:	28 0f       	add	r18, r24
 b1a:	39 1f       	adc	r19, r25
 b1c:	80 91 f6 02 	lds	r24, 0x02F6
 b20:	90 91 f7 02 	lds	r25, 0x02F7
 b24:	82 17       	cp	r24, r18
 b26:	93 07       	cpc	r25, r19
 b28:	79 f5       	brne	.+94     	; 0xb88 <free+0x92>
 b2a:	f0 93 f7 02 	sts	0x02F7, r31
 b2e:	e0 93 f6 02 	sts	0x02F6, r30
 b32:	6d c0       	rjmp	.+218    	; 0xc0e <free+0x118>
 b34:	de 01       	movw	r26, r28
 b36:	20 e0       	ldi	r18, 0x00	; 0
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	ae 17       	cp	r26, r30
 b3c:	bf 07       	cpc	r27, r31
 b3e:	50 f4       	brcc	.+20     	; 0xb54 <free+0x5e>
 b40:	12 96       	adiw	r26, 0x02	; 2
 b42:	4d 91       	ld	r20, X+
 b44:	5c 91       	ld	r21, X
 b46:	13 97       	sbiw	r26, 0x03	; 3
 b48:	9d 01       	movw	r18, r26
 b4a:	41 15       	cp	r20, r1
 b4c:	51 05       	cpc	r21, r1
 b4e:	09 f1       	breq	.+66     	; 0xb92 <free+0x9c>
 b50:	da 01       	movw	r26, r20
 b52:	f3 cf       	rjmp	.-26     	; 0xb3a <free+0x44>
 b54:	b3 83       	std	Z+3, r27	; 0x03
 b56:	a2 83       	std	Z+2, r26	; 0x02
 b58:	40 81       	ld	r20, Z
 b5a:	51 81       	ldd	r21, Z+1	; 0x01
 b5c:	84 0f       	add	r24, r20
 b5e:	95 1f       	adc	r25, r21
 b60:	8a 17       	cp	r24, r26
 b62:	9b 07       	cpc	r25, r27
 b64:	71 f4       	brne	.+28     	; 0xb82 <free+0x8c>
 b66:	8d 91       	ld	r24, X+
 b68:	9c 91       	ld	r25, X
 b6a:	11 97       	sbiw	r26, 0x01	; 1
 b6c:	84 0f       	add	r24, r20
 b6e:	95 1f       	adc	r25, r21
 b70:	02 96       	adiw	r24, 0x02	; 2
 b72:	91 83       	std	Z+1, r25	; 0x01
 b74:	80 83       	st	Z, r24
 b76:	12 96       	adiw	r26, 0x02	; 2
 b78:	8d 91       	ld	r24, X+
 b7a:	9c 91       	ld	r25, X
 b7c:	13 97       	sbiw	r26, 0x03	; 3
 b7e:	93 83       	std	Z+3, r25	; 0x03
 b80:	82 83       	std	Z+2, r24	; 0x02
 b82:	21 15       	cp	r18, r1
 b84:	31 05       	cpc	r19, r1
 b86:	29 f4       	brne	.+10     	; 0xb92 <free+0x9c>
 b88:	f0 93 f9 02 	sts	0x02F9, r31
 b8c:	e0 93 f8 02 	sts	0x02F8, r30
 b90:	3e c0       	rjmp	.+124    	; 0xc0e <free+0x118>
 b92:	d9 01       	movw	r26, r18
 b94:	13 96       	adiw	r26, 0x03	; 3
 b96:	fc 93       	st	X, r31
 b98:	ee 93       	st	-X, r30
 b9a:	12 97       	sbiw	r26, 0x02	; 2
 b9c:	4d 91       	ld	r20, X+
 b9e:	5d 91       	ld	r21, X+
 ba0:	a4 0f       	add	r26, r20
 ba2:	b5 1f       	adc	r27, r21
 ba4:	ea 17       	cp	r30, r26
 ba6:	fb 07       	cpc	r31, r27
 ba8:	79 f4       	brne	.+30     	; 0xbc8 <free+0xd2>
 baa:	80 81       	ld	r24, Z
 bac:	91 81       	ldd	r25, Z+1	; 0x01
 bae:	84 0f       	add	r24, r20
 bb0:	95 1f       	adc	r25, r21
 bb2:	02 96       	adiw	r24, 0x02	; 2
 bb4:	d9 01       	movw	r26, r18
 bb6:	11 96       	adiw	r26, 0x01	; 1
 bb8:	9c 93       	st	X, r25
 bba:	8e 93       	st	-X, r24
 bbc:	82 81       	ldd	r24, Z+2	; 0x02
 bbe:	93 81       	ldd	r25, Z+3	; 0x03
 bc0:	13 96       	adiw	r26, 0x03	; 3
 bc2:	9c 93       	st	X, r25
 bc4:	8e 93       	st	-X, r24
 bc6:	12 97       	sbiw	r26, 0x02	; 2
 bc8:	e0 e0       	ldi	r30, 0x00	; 0
 bca:	f0 e0       	ldi	r31, 0x00	; 0
 bcc:	8a 81       	ldd	r24, Y+2	; 0x02
 bce:	9b 81       	ldd	r25, Y+3	; 0x03
 bd0:	00 97       	sbiw	r24, 0x00	; 0
 bd2:	19 f0       	breq	.+6      	; 0xbda <free+0xe4>
 bd4:	fe 01       	movw	r30, r28
 bd6:	ec 01       	movw	r28, r24
 bd8:	f9 cf       	rjmp	.-14     	; 0xbcc <free+0xd6>
 bda:	ce 01       	movw	r24, r28
 bdc:	02 96       	adiw	r24, 0x02	; 2
 bde:	28 81       	ld	r18, Y
 be0:	39 81       	ldd	r19, Y+1	; 0x01
 be2:	82 0f       	add	r24, r18
 be4:	93 1f       	adc	r25, r19
 be6:	20 91 f6 02 	lds	r18, 0x02F6
 bea:	30 91 f7 02 	lds	r19, 0x02F7
 bee:	28 17       	cp	r18, r24
 bf0:	39 07       	cpc	r19, r25
 bf2:	69 f4       	brne	.+26     	; 0xc0e <free+0x118>
 bf4:	30 97       	sbiw	r30, 0x00	; 0
 bf6:	29 f4       	brne	.+10     	; 0xc02 <free+0x10c>
 bf8:	10 92 f9 02 	sts	0x02F9, r1
 bfc:	10 92 f8 02 	sts	0x02F8, r1
 c00:	02 c0       	rjmp	.+4      	; 0xc06 <free+0x110>
 c02:	13 82       	std	Z+3, r1	; 0x03
 c04:	12 82       	std	Z+2, r1	; 0x02
 c06:	d0 93 f7 02 	sts	0x02F7, r29
 c0a:	c0 93 f6 02 	sts	0x02F6, r28
 c0e:	df 91       	pop	r29
 c10:	cf 91       	pop	r28
 c12:	08 95       	ret

00000c14 <strnlen_P>:
 c14:	fc 01       	movw	r30, r24
 c16:	05 90       	lpm	r0, Z+
 c18:	61 50       	subi	r22, 0x01	; 1
 c1a:	70 40       	sbci	r23, 0x00	; 0
 c1c:	01 10       	cpse	r0, r1
 c1e:	d8 f7       	brcc	.-10     	; 0xc16 <strnlen_P+0x2>
 c20:	80 95       	com	r24
 c22:	90 95       	com	r25
 c24:	8e 0f       	add	r24, r30
 c26:	9f 1f       	adc	r25, r31
 c28:	08 95       	ret

00000c2a <memset>:
 c2a:	dc 01       	movw	r26, r24
 c2c:	01 c0       	rjmp	.+2      	; 0xc30 <memset+0x6>
 c2e:	6d 93       	st	X+, r22
 c30:	41 50       	subi	r20, 0x01	; 1
 c32:	50 40       	sbci	r21, 0x00	; 0
 c34:	e0 f7       	brcc	.-8      	; 0xc2e <memset+0x4>
 c36:	08 95       	ret

00000c38 <strnlen>:
 c38:	fc 01       	movw	r30, r24
 c3a:	61 50       	subi	r22, 0x01	; 1
 c3c:	70 40       	sbci	r23, 0x00	; 0
 c3e:	01 90       	ld	r0, Z+
 c40:	01 10       	cpse	r0, r1
 c42:	d8 f7       	brcc	.-10     	; 0xc3a <strnlen+0x2>
 c44:	80 95       	com	r24
 c46:	90 95       	com	r25
 c48:	8e 0f       	add	r24, r30
 c4a:	9f 1f       	adc	r25, r31
 c4c:	08 95       	ret

00000c4e <fputc>:
 c4e:	0f 93       	push	r16
 c50:	1f 93       	push	r17
 c52:	cf 93       	push	r28
 c54:	df 93       	push	r29
 c56:	18 2f       	mov	r17, r24
 c58:	09 2f       	mov	r16, r25
 c5a:	eb 01       	movw	r28, r22
 c5c:	8b 81       	ldd	r24, Y+3	; 0x03
 c5e:	81 fd       	sbrc	r24, 1
 c60:	03 c0       	rjmp	.+6      	; 0xc68 <fputc+0x1a>
 c62:	8f ef       	ldi	r24, 0xFF	; 255
 c64:	9f ef       	ldi	r25, 0xFF	; 255
 c66:	20 c0       	rjmp	.+64     	; 0xca8 <fputc+0x5a>
 c68:	82 ff       	sbrs	r24, 2
 c6a:	10 c0       	rjmp	.+32     	; 0xc8c <fputc+0x3e>
 c6c:	4e 81       	ldd	r20, Y+6	; 0x06
 c6e:	5f 81       	ldd	r21, Y+7	; 0x07
 c70:	2c 81       	ldd	r18, Y+4	; 0x04
 c72:	3d 81       	ldd	r19, Y+5	; 0x05
 c74:	42 17       	cp	r20, r18
 c76:	53 07       	cpc	r21, r19
 c78:	7c f4       	brge	.+30     	; 0xc98 <fputc+0x4a>
 c7a:	e8 81       	ld	r30, Y
 c7c:	f9 81       	ldd	r31, Y+1	; 0x01
 c7e:	9f 01       	movw	r18, r30
 c80:	2f 5f       	subi	r18, 0xFF	; 255
 c82:	3f 4f       	sbci	r19, 0xFF	; 255
 c84:	39 83       	std	Y+1, r19	; 0x01
 c86:	28 83       	st	Y, r18
 c88:	10 83       	st	Z, r17
 c8a:	06 c0       	rjmp	.+12     	; 0xc98 <fputc+0x4a>
 c8c:	e8 85       	ldd	r30, Y+8	; 0x08
 c8e:	f9 85       	ldd	r31, Y+9	; 0x09
 c90:	81 2f       	mov	r24, r17
 c92:	19 95       	eicall
 c94:	89 2b       	or	r24, r25
 c96:	29 f7       	brne	.-54     	; 0xc62 <fputc+0x14>
 c98:	2e 81       	ldd	r18, Y+6	; 0x06
 c9a:	3f 81       	ldd	r19, Y+7	; 0x07
 c9c:	2f 5f       	subi	r18, 0xFF	; 255
 c9e:	3f 4f       	sbci	r19, 0xFF	; 255
 ca0:	3f 83       	std	Y+7, r19	; 0x07
 ca2:	2e 83       	std	Y+6, r18	; 0x06
 ca4:	81 2f       	mov	r24, r17
 ca6:	90 2f       	mov	r25, r16
 ca8:	df 91       	pop	r29
 caa:	cf 91       	pop	r28
 cac:	1f 91       	pop	r17
 cae:	0f 91       	pop	r16
 cb0:	08 95       	ret

00000cb2 <__ultoa_invert>:
 cb2:	fa 01       	movw	r30, r20
 cb4:	aa 27       	eor	r26, r26
 cb6:	28 30       	cpi	r18, 0x08	; 8
 cb8:	51 f1       	breq	.+84     	; 0xd0e <__ultoa_invert+0x5c>
 cba:	20 31       	cpi	r18, 0x10	; 16
 cbc:	81 f1       	breq	.+96     	; 0xd1e <__ultoa_invert+0x6c>
 cbe:	e8 94       	clt
 cc0:	6f 93       	push	r22
 cc2:	6e 7f       	andi	r22, 0xFE	; 254
 cc4:	6e 5f       	subi	r22, 0xFE	; 254
 cc6:	7f 4f       	sbci	r23, 0xFF	; 255
 cc8:	8f 4f       	sbci	r24, 0xFF	; 255
 cca:	9f 4f       	sbci	r25, 0xFF	; 255
 ccc:	af 4f       	sbci	r26, 0xFF	; 255
 cce:	b1 e0       	ldi	r27, 0x01	; 1
 cd0:	3e d0       	rcall	.+124    	; 0xd4e <__ultoa_invert+0x9c>
 cd2:	b4 e0       	ldi	r27, 0x04	; 4
 cd4:	3c d0       	rcall	.+120    	; 0xd4e <__ultoa_invert+0x9c>
 cd6:	67 0f       	add	r22, r23
 cd8:	78 1f       	adc	r23, r24
 cda:	89 1f       	adc	r24, r25
 cdc:	9a 1f       	adc	r25, r26
 cde:	a1 1d       	adc	r26, r1
 ce0:	68 0f       	add	r22, r24
 ce2:	79 1f       	adc	r23, r25
 ce4:	8a 1f       	adc	r24, r26
 ce6:	91 1d       	adc	r25, r1
 ce8:	a1 1d       	adc	r26, r1
 cea:	6a 0f       	add	r22, r26
 cec:	71 1d       	adc	r23, r1
 cee:	81 1d       	adc	r24, r1
 cf0:	91 1d       	adc	r25, r1
 cf2:	a1 1d       	adc	r26, r1
 cf4:	20 d0       	rcall	.+64     	; 0xd36 <__ultoa_invert+0x84>
 cf6:	09 f4       	brne	.+2      	; 0xcfa <__ultoa_invert+0x48>
 cf8:	68 94       	set
 cfa:	3f 91       	pop	r19
 cfc:	2a e0       	ldi	r18, 0x0A	; 10
 cfe:	26 9f       	mul	r18, r22
 d00:	11 24       	eor	r1, r1
 d02:	30 19       	sub	r19, r0
 d04:	30 5d       	subi	r19, 0xD0	; 208
 d06:	31 93       	st	Z+, r19
 d08:	de f6       	brtc	.-74     	; 0xcc0 <__ultoa_invert+0xe>
 d0a:	cf 01       	movw	r24, r30
 d0c:	08 95       	ret
 d0e:	46 2f       	mov	r20, r22
 d10:	47 70       	andi	r20, 0x07	; 7
 d12:	40 5d       	subi	r20, 0xD0	; 208
 d14:	41 93       	st	Z+, r20
 d16:	b3 e0       	ldi	r27, 0x03	; 3
 d18:	0f d0       	rcall	.+30     	; 0xd38 <__ultoa_invert+0x86>
 d1a:	c9 f7       	brne	.-14     	; 0xd0e <__ultoa_invert+0x5c>
 d1c:	f6 cf       	rjmp	.-20     	; 0xd0a <__ultoa_invert+0x58>
 d1e:	46 2f       	mov	r20, r22
 d20:	4f 70       	andi	r20, 0x0F	; 15
 d22:	40 5d       	subi	r20, 0xD0	; 208
 d24:	4a 33       	cpi	r20, 0x3A	; 58
 d26:	18 f0       	brcs	.+6      	; 0xd2e <__ultoa_invert+0x7c>
 d28:	49 5d       	subi	r20, 0xD9	; 217
 d2a:	31 fd       	sbrc	r19, 1
 d2c:	40 52       	subi	r20, 0x20	; 32
 d2e:	41 93       	st	Z+, r20
 d30:	02 d0       	rcall	.+4      	; 0xd36 <__ultoa_invert+0x84>
 d32:	a9 f7       	brne	.-22     	; 0xd1e <__ultoa_invert+0x6c>
 d34:	ea cf       	rjmp	.-44     	; 0xd0a <__ultoa_invert+0x58>
 d36:	b4 e0       	ldi	r27, 0x04	; 4
 d38:	a6 95       	lsr	r26
 d3a:	97 95       	ror	r25
 d3c:	87 95       	ror	r24
 d3e:	77 95       	ror	r23
 d40:	67 95       	ror	r22
 d42:	ba 95       	dec	r27
 d44:	c9 f7       	brne	.-14     	; 0xd38 <__ultoa_invert+0x86>
 d46:	00 97       	sbiw	r24, 0x00	; 0
 d48:	61 05       	cpc	r22, r1
 d4a:	71 05       	cpc	r23, r1
 d4c:	08 95       	ret
 d4e:	9b 01       	movw	r18, r22
 d50:	ac 01       	movw	r20, r24
 d52:	0a 2e       	mov	r0, r26
 d54:	06 94       	lsr	r0
 d56:	57 95       	ror	r21
 d58:	47 95       	ror	r20
 d5a:	37 95       	ror	r19
 d5c:	27 95       	ror	r18
 d5e:	ba 95       	dec	r27
 d60:	c9 f7       	brne	.-14     	; 0xd54 <__ultoa_invert+0xa2>
 d62:	62 0f       	add	r22, r18
 d64:	73 1f       	adc	r23, r19
 d66:	84 1f       	adc	r24, r20
 d68:	95 1f       	adc	r25, r21
 d6a:	a0 1d       	adc	r26, r0
 d6c:	08 95       	ret

00000d6e <_exit>:
 d6e:	f8 94       	cli

00000d70 <__stop_program>:
 d70:	ff cf       	rjmp	.-2      	; 0xd70 <__stop_program>
