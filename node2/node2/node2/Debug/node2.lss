
node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  000011ce  00001262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800238  00800238  0000129a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001611  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b7c  00000000  00000000  00002af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ef8  00000000  00000000  00003673  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c8  00000000  00000000  0000456c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007ab  00000000  00000000  00004934  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b4f  00000000  00000000  000050df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00005c2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c2       	rjmp	.+1302   	; 0x524 <__vector_3>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	6b c2       	rjmp	.+1238   	; 0x54c <__vector_29>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee ec       	ldi	r30, 0xCE	; 206
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 33       	cpi	r26, 0x38	; 56
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a8 e3       	ldi	r26, 0x38	; 56
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 34       	cpi	r26, 0x46	; 70
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	bd d1       	rcall	.+890    	; 0x49a <main>
     120:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <can_init>:
 #define set_bit( reg, bit ) (reg |= (1 << bit))
 #define clear_bit( reg, bit ) (reg &= ~(1 << bit))


 void can_init(){
	mcp2515_init(); //denne kaller på reset, som setter systemet i config mode
     126:	03 d1       	rcall	.+518    	; 0x32e <mcp2515_init>
	
	
	//aktiverer interrupts (interrupt enable) for transmit og receive buffers, s.51
	mcp2515_bit_modify(MCP_CANINTE, 0b00000011, 0b00000011); 
     128:	43 e0       	ldi	r20, 0x03	; 3
     12a:	63 e0       	ldi	r22, 0x03	; 3
     12c:	8b e2       	ldi	r24, 0x2B	; 43
     12e:	28 d1       	rcall	.+592    	; 0x380 <mcp2515_bit_modify>
	
	//Setter alle maske-bitene i standard identifier til 0, fordi da slippes alle messages gjennom. s. 35 (register 4-14 til 4-17), og s. 32, table 4-2
	mcp2515_write(MCP_RXM0SIDH, 0b00000000);
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	80 e2       	ldi	r24, 0x20	; 32
     134:	e8 d0       	rcall	.+464    	; 0x306 <mcp2515_write>
	mcp2515_write(MCP_RXM0SIDL, 0b00000000);
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	81 e2       	ldi	r24, 0x21	; 33
     13a:	e5 d0       	rcall	.+458    	; 0x306 <mcp2515_write>
	mcp2515_write(MCP_RXM1SIDH, 0b00000000);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	84 e2       	ldi	r24, 0x24	; 36
     140:	e2 d0       	rcall	.+452    	; 0x306 <mcp2515_write>
	mcp2515_write(MCP_RXM1SIDL, 0b00000000);
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	85 e2       	ldi	r24, 0x25	; 37
     146:	df d0       	rcall	.+446    	; 0x306 <mcp2515_write>
	
	//setter i normal mode, s. 60
	mcp2515_bit_modify(MCP_CANCTRL, 0b11100000, 0b00000000);
     148:	40 e0       	ldi	r20, 0x00	; 0
     14a:	60 ee       	ldi	r22, 0xE0	; 224
     14c:	8f e0       	ldi	r24, 0x0F	; 15
     14e:	18 c1       	rjmp	.+560    	; 0x380 <mcp2515_bit_modify>
     150:	08 95       	ret

00000152 <can_send_message>:
	sei();
	#endif
	
 }

void can_send_message(can_msg* send){//unsigned int identifier, uint8_t *message, uint8_t lengthOfData
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	7c 01       	movw	r14, r24
	
	while((mcp2515_read(MCP_TXB0CTRL) & MCP_TXREQ)){ //så lenge transfer buffer 0 er fullt, vil MCP_TXREQ være høy, og vi er stuck i whilen. Når det er tomt, vil vi gå ut av whilen
     160:	80 e3       	ldi	r24, 0x30	; 48
     162:	c6 d0       	rcall	.+396    	; 0x2f0 <mcp2515_read>
     164:	83 fd       	sbrc	r24, 3
     166:	fc cf       	rjmp	.-8      	; 0x160 <can_send_message+0xe>
	}
	
	//Left shifter 5 ganger for å lagre riktig i SID bufferregistrene
	mcp2515_write(MCP_TXB0SIDH+1, send->id<<5); //lagrer identifieren til messagen inn i første transferbuffer. Går fint å overskrive det som ligger der fordi det er 0 som må ligge der for standard identifier (ikke extended)
     168:	f7 01       	movw	r30, r14
     16a:	60 81       	ld	r22, Z
     16c:	62 95       	swap	r22
     16e:	66 0f       	add	r22, r22
     170:	60 7e       	andi	r22, 0xE0	; 224
     172:	82 e3       	ldi	r24, 0x32	; 50
     174:	c8 d0       	rcall	.+400    	; 0x306 <mcp2515_write>
	
	 //Right shift 3 ganger for å flytte de 8 høyeste bit'ene til de 8 laveste, så de lagres i SIDH
	mcp2515_write(MCP_TXB0SIDH, send->id>>3); //lagrer identifieren til messagen inn i første transferbuffer
     176:	f7 01       	movw	r30, r14
     178:	60 81       	ld	r22, Z
     17a:	71 81       	ldd	r23, Z+1	; 0x01
     17c:	76 95       	lsr	r23
     17e:	67 95       	ror	r22
     180:	76 95       	lsr	r23
     182:	67 95       	ror	r22
     184:	76 95       	lsr	r23
     186:	67 95       	ror	r22
     188:	81 e3       	ldi	r24, 0x31	; 49
     18a:	bd d0       	rcall	.+378    	; 0x306 <mcp2515_write>
	
	mcp2515_write(MCP_TXB0SIDH+4, send->length); //lagrer datalengden i txb0dlc. plusser på 4 for å komme til txb0dlc (se tabell s. 63)
     18c:	f7 01       	movw	r30, r14
     18e:	62 89       	ldd	r22, Z+18	; 0x12
     190:	85 e3       	ldi	r24, 0x35	; 53
     192:	b9 d0       	rcall	.+370    	; 0x306 <mcp2515_write>

	//lagrer nå meldinga i TXB0D0-TXB0D6 (s. 63)
	if(send->length>8){
     194:	f7 01       	movw	r30, r14
     196:	82 89       	ldd	r24, Z+18	; 0x12
     198:	89 30       	cpi	r24, 0x09	; 9
     19a:	18 f4       	brcc	.+6      	; 0x1a2 <can_send_message+0x50>
		printf("Length of data too big.");
		return;
	}
	int byte = 0;
	for (byte = 0; byte < send->length; byte++){
     19c:	81 11       	cpse	r24, r1
     19e:	09 c0       	rjmp	.+18     	; 0x1b2 <can_send_message+0x60>
     1a0:	1b c0       	rjmp	.+54     	; 0x1d8 <can_send_message+0x86>
	
	mcp2515_write(MCP_TXB0SIDH+4, send->length); //lagrer datalengden i txb0dlc. plusser på 4 for å komme til txb0dlc (se tabell s. 63)

	//lagrer nå meldinga i TXB0D0-TXB0D6 (s. 63)
	if(send->length>8){
		printf("Length of data too big.");
     1a2:	86 e0       	ldi	r24, 0x06	; 6
     1a4:	92 e0       	ldi	r25, 0x02	; 2
     1a6:	9f 93       	push	r25
     1a8:	8f 93       	push	r24
     1aa:	22 d4       	rcall	.+2116   	; 0x9f0 <printf>
		return;
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	16 c0       	rjmp	.+44     	; 0x1de <can_send_message+0x8c>
     1b2:	87 01       	movw	r16, r14
     1b4:	0e 5f       	subi	r16, 0xFE	; 254
     1b6:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	int byte = 0;
	for (byte = 0; byte < send->length; byte++){
     1b8:	c0 e0       	ldi	r28, 0x00	; 0
     1ba:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(MCP_TXB0SIDH+5+byte, send->data[byte]);
     1bc:	f8 01       	movw	r30, r16
     1be:	60 81       	ld	r22, Z
     1c0:	0e 5f       	subi	r16, 0xFE	; 254
     1c2:	1f 4f       	sbci	r17, 0xFF	; 255
     1c4:	8c 2f       	mov	r24, r28
     1c6:	8a 5c       	subi	r24, 0xCA	; 202
     1c8:	9e d0       	rcall	.+316    	; 0x306 <mcp2515_write>
	if(send->length>8){
		printf("Length of data too big.");
		return;
	}
	int byte = 0;
	for (byte = 0; byte < send->length; byte++){
     1ca:	21 96       	adiw	r28, 0x01	; 1
     1cc:	f7 01       	movw	r30, r14
     1ce:	22 89       	ldd	r18, Z+18	; 0x12
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	c2 17       	cp	r28, r18
     1d4:	d3 07       	cpc	r29, r19
     1d6:	94 f3       	brlt	.-28     	; 0x1bc <can_send_message+0x6a>
		mcp2515_write(MCP_TXB0SIDH+5+byte, send->data[byte]);
	}

	mcp2515_request_to_send(0); //sender RTS signal til TXB0 nå
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	b7 d0       	rcall	.+366    	; 0x34c <mcp2515_request_to_send>
}
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
     1e6:	ff 90       	pop	r15
     1e8:	ef 90       	pop	r14
     1ea:	08 95       	ret

000001ec <can_receive_message>:

int can_receive_message(can_msg *wholeMessage){
     1ec:	9f 92       	push	r9
     1ee:	af 92       	push	r10
     1f0:	bf 92       	push	r11
     1f2:	cf 92       	push	r12
     1f4:	df 92       	push	r13
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	7c 01       	movw	r14, r24
	wholeMessage->id = 0;
     204:	fc 01       	movw	r30, r24
     206:	11 82       	std	Z+1, r1	; 0x01
     208:	10 82       	st	Z, r1
	wholeMessage->length = 0;
     20a:	12 8a       	std	Z+18, r1	; 0x12
	wholeMessage->data[0] = 0b00000000;
     20c:	13 82       	std	Z+3, r1	; 0x03
     20e:	12 82       	std	Z+2, r1	; 0x02
	
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF){ //om rx0if er høy, altså interrupt pinnen er høy, betyr det at receive buffer nr 0 har fått inn ny data
     210:	8c e2       	ldi	r24, 0x2C	; 44
     212:	6e d0       	rcall	.+220    	; 0x2f0 <mcp2515_read>
     214:	80 ff       	sbrs	r24, 0
     216:	4b c0       	rjmp	.+150    	; 0x2ae <can_receive_message+0xc2>
		unsigned int idH = mcp2515_read(MCP_RXB0SIDH);
     218:	81 e6       	ldi	r24, 0x61	; 97
     21a:	6a d0       	rcall	.+212    	; 0x2f0 <mcp2515_read>
     21c:	c8 2f       	mov	r28, r24
     21e:	d0 e0       	ldi	r29, 0x00	; 0
		unsigned int idL = mcp2515_read(MCP_RXB0SIDH+1);
     220:	82 e6       	ldi	r24, 0x62	; 98
     222:	66 d0       	rcall	.+204    	; 0x2f0 <mcp2515_read>
     224:	90 e0       	ldi	r25, 0x00	; 0
		idL = (idL >> 5); //Fordi de er idL er tre MSB i MCP_RXB0SIDL, må rightshifte 5 ganger
		idH = (idH << 3); //Må leftshifte 
     226:	5e 01       	movw	r10, r28
     228:	aa 0c       	add	r10, r10
     22a:	bb 1c       	adc	r11, r11
     22c:	aa 0c       	add	r10, r10
     22e:	bb 1c       	adc	r11, r11
     230:	aa 0c       	add	r10, r10
     232:	bb 1c       	adc	r11, r11
	wholeMessage->data[0] = 0b00000000;
	
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF){ //om rx0if er høy, altså interrupt pinnen er høy, betyr det at receive buffer nr 0 har fått inn ny data
		unsigned int idH = mcp2515_read(MCP_RXB0SIDH);
		unsigned int idL = mcp2515_read(MCP_RXB0SIDH+1);
		idL = (idL >> 5); //Fordi de er idL er tre MSB i MCP_RXB0SIDL, må rightshifte 5 ganger
     234:	96 95       	lsr	r25
     236:	87 95       	ror	r24
     238:	92 95       	swap	r25
     23a:	82 95       	swap	r24
     23c:	8f 70       	andi	r24, 0x0F	; 15
     23e:	89 27       	eor	r24, r25
     240:	9f 70       	andi	r25, 0x0F	; 15
     242:	89 27       	eor	r24, r25
		idH = (idH << 3); //Må leftshifte 
		unsigned int id = (idH | idL); //Kan evt ta +
     244:	a8 2a       	or	r10, r24
     246:	b9 2a       	or	r11, r25
		
		
		uint8_t length = mcp2515_read(MCP_RXB0SIDH+4); //leser av rxb0dlc
     248:	85 e6       	ldi	r24, 0x65	; 101
     24a:	52 d0       	rcall	.+164    	; 0x2f0 <mcp2515_read>
     24c:	98 2e       	mov	r9, r24
		if (length > 8){
     24e:	f8 e0       	ldi	r31, 0x08	; 8
     250:	f8 17       	cp	r31, r24
     252:	30 f0       	brcs	.+12     	; 0x260 <can_receive_message+0x74>
		}
		
		//leser nå av rxb0d0 til rxb0d7 (avhengig av hvor lang meldinga vi har mottatt er), og lagrer det i arrayet message
		int byte = 0;
		//lagrer alt i en struct
		for (byte = 0; byte < length; byte++){
     254:	c8 2e       	mov	r12, r24
     256:	d1 2c       	mov	r13, r1
     258:	1c 14       	cp	r1, r12
     25a:	1d 04       	cpc	r1, r13
     25c:	5c f0       	brlt	.+22     	; 0x274 <can_receive_message+0x88>
     25e:	1c c0       	rjmp	.+56     	; 0x298 <can_receive_message+0xac>
		unsigned int id = (idH | idL); //Kan evt ta +
		
		
		uint8_t length = mcp2515_read(MCP_RXB0SIDH+4); //leser av rxb0dlc
		if (length > 8){
			printf("Length > 8, not allowed.");
     260:	8e e1       	ldi	r24, 0x1E	; 30
     262:	92 e0       	ldi	r25, 0x02	; 2
     264:	9f 93       	push	r25
     266:	8f 93       	push	r24
     268:	c3 d3       	rcall	.+1926   	; 0x9f0 <printf>
			return 0;
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	1f c0       	rjmp	.+62     	; 0x2b2 <can_receive_message+0xc6>
     274:	87 01       	movw	r16, r14
     276:	0e 5f       	subi	r16, 0xFE	; 254
     278:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		
		//leser nå av rxb0d0 til rxb0d7 (avhengig av hvor lang meldinga vi har mottatt er), og lagrer det i arrayet message
		int byte = 0;
		//lagrer alt i en struct
		for (byte = 0; byte < length; byte++){
     27a:	c0 e0       	ldi	r28, 0x00	; 0
     27c:	d0 e0       	ldi	r29, 0x00	; 0
			wholeMessage->data[byte] = mcp2515_read(MCP_RXB0SIDH+5+byte);
     27e:	8c 2f       	mov	r24, r28
     280:	8a 59       	subi	r24, 0x9A	; 154
     282:	36 d0       	rcall	.+108    	; 0x2f0 <mcp2515_read>
     284:	28 2f       	mov	r18, r24
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	f8 01       	movw	r30, r16
     28a:	21 93       	st	Z+, r18
     28c:	31 93       	st	Z+, r19
     28e:	8f 01       	movw	r16, r30
		}
		
		//leser nå av rxb0d0 til rxb0d7 (avhengig av hvor lang meldinga vi har mottatt er), og lagrer det i arrayet message
		int byte = 0;
		//lagrer alt i en struct
		for (byte = 0; byte < length; byte++){
     290:	21 96       	adiw	r28, 0x01	; 1
     292:	cc 15       	cp	r28, r12
     294:	dd 05       	cpc	r29, r13
     296:	9c f3       	brlt	.-26     	; 0x27e <can_receive_message+0x92>
			wholeMessage->data[byte] = mcp2515_read(MCP_RXB0SIDH+5+byte);
		}
		
		
		wholeMessage->id = id;
     298:	f7 01       	movw	r30, r14
     29a:	b1 82       	std	Z+1, r11	; 0x01
     29c:	a0 82       	st	Z, r10
		wholeMessage->length = length;
     29e:	92 8a       	std	Z+18, r9	; 0x12
		
		mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0b00000000); //for å kunne reenable receive buffer 0 interrupten
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	8c e2       	ldi	r24, 0x2C	; 44
     2a6:	6c d0       	rcall	.+216    	; 0x380 <mcp2515_bit_modify>
	}
	
	
	
	return 1;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <can_receive_message+0xc6>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14
     2be:	df 90       	pop	r13
     2c0:	cf 90       	pop	r12
     2c2:	bf 90       	pop	r11
     2c4:	af 90       	pop	r10
     2c6:	9f 90       	pop	r9
     2c8:	08 95       	ret

000002ca <joy_getPercent>:

int joyLastDirectionY; //Må gjøres global for å leve etter vi går ut av scope
int joyLastDirectionX;

int joy_getPercent(int raw){
	return (((raw*(1.0)) / 255) * 100);
     2ca:	bc 01       	movw	r22, r24
     2cc:	88 27       	eor	r24, r24
     2ce:	77 fd       	sbrc	r23, 7
     2d0:	80 95       	com	r24
     2d2:	98 2f       	mov	r25, r24
     2d4:	2d d2       	rcall	.+1114   	; 0x730 <__floatsisf>
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	4f e7       	ldi	r20, 0x7F	; 127
     2dc:	53 e4       	ldi	r21, 0x43	; 67
     2de:	8d d1       	rcall	.+794    	; 0x5fa <__divsf3>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	48 ec       	ldi	r20, 0xC8	; 200
     2e6:	52 e4       	ldi	r21, 0x42	; 66
     2e8:	af d2       	rcall	.+1374   	; 0x848 <__mulsf3>
     2ea:	ef d1       	rcall	.+990    	; 0x6ca <__fixsfsi>
}
     2ec:	cb 01       	movw	r24, r22
     2ee:	08 95       	ret

000002f0 <mcp2515_read>:
#include "spi.h"

#define set_bit( reg, bit ) (reg |= (1 << bit))
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

uint8_t mcp2515_read(uint8_t address){
     2f0:	cf 93       	push	r28
     2f2:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, SS); //Setter SS lav
     2f4:	2f 98       	cbi	0x05, 7	; 5

	uint8_t result;
	spi_MasterTransmit(MCP_READ);
     2f6:	83 e0       	ldi	r24, 0x03	; 3
     2f8:	62 d0       	rcall	.+196    	; 0x3be <spi_MasterTransmit>
	spi_MasterTransmit(address);
     2fa:	8c 2f       	mov	r24, r28
     2fc:	60 d0       	rcall	.+192    	; 0x3be <spi_MasterTransmit>
	result = spi_MasterRead(); //Leser hva som var i adressen/registeret vi aksesserte
     2fe:	64 d0       	rcall	.+200    	; 0x3c8 <spi_MasterRead>

	set_bit(PORTB, SS); //Setter SS høy
     300:	2f 9a       	sbi	0x05, 7	; 5
	
	return result;
}
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data){
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	d8 2f       	mov	r29, r24
     30c:	c6 2f       	mov	r28, r22
	clear_bit(PORTB,SS); //Setter SS lav
     30e:	2f 98       	cbi	0x05, 7	; 5
	
	spi_MasterTransmit(MCP_WRITE); //Velger instruction
     310:	82 e0       	ldi	r24, 0x02	; 2
     312:	55 d0       	rcall	.+170    	; 0x3be <spi_MasterTransmit>
	
	spi_MasterTransmit(address); //Velger adresse, f.eks. 0b00110001
     314:	8d 2f       	mov	r24, r29
     316:	53 d0       	rcall	.+166    	; 0x3be <spi_MasterTransmit>
	
	spi_MasterTransmit(data); //Velger data som sendes
     318:	8c 2f       	mov	r24, r28
     31a:	51 d0       	rcall	.+162    	; 0x3be <spi_MasterTransmit>

	set_bit(PORTB,SS);
     31c:	2f 9a       	sbi	0x05, 7	; 5
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <mcp2515_reset>:

void mcp2515_reset(){
	clear_bit(PORTB,SS); //Setter SS lav
     324:	2f 98       	cbi	0x05, 7	; 5
	spi_MasterTransmit(MCP_RESET);
     326:	80 ec       	ldi	r24, 0xC0	; 192
     328:	4a d0       	rcall	.+148    	; 0x3be <spi_MasterTransmit>
	set_bit(PORTB,SS); //Setter SS høy
     32a:	2f 9a       	sbi	0x05, 7	; 5
     32c:	08 95       	ret

0000032e <mcp2515_init>:
}

uint8_t mcp2515_init(){
	uint8_t value;
	spi_init(); //Initialize SPI
     32e:	3c d0       	rcall	.+120    	; 0x3a8 <spi_init>
	mcp2515_reset(); // Send reset-command
     330:	f9 df       	rcall	.-14     	; 0x324 <mcp2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	8a 95       	dec	r24
     336:	f1 f7       	brne	.-4      	; 0x334 <mcp2515_init+0x6>
     338:	00 00       	nop
	_delay_us(8); //oscillatoren er i reset modus i 128 klokkesykluser. trenger derav en delay
	
	//Self-test to check if system is in config mode
     33a:	8e e0       	ldi	r24, 0x0E	; 14
     33c:	d9 df       	rcall	.-78     	; 0x2f0 <mcp2515_read>
	value = mcp2515_read(MCP_CANSTAT); 
     33e:	98 2f       	mov	r25, r24
     340:	90 7e       	andi	r25, 0xE0	; 224
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 38       	cpi	r25, 0x80	; 128
     346:	09 f4       	brne	.+2      	; 0x34a <mcp2515_init+0x1c>
     348:	80 e0       	ldi	r24, 0x00	; 0
	if((value & MODE_MASK)  != MODE_CONFIG) {
		return 1;
	}
	// More initialization
	return 0;
     34a:	08 95       	ret

0000034c <mcp2515_request_to_send>:
}

void mcp2515_request_to_send(int whichBuffer){ //se s. 66
     34c:	2f 98       	cbi	0x05, 7	; 5
	clear_bit(PORTB,SS); //Setter SS lav

     34e:	00 97       	sbiw	r24, 0x00	; 0
     350:	19 f4       	brne	.+6      	; 0x358 <mcp2515_request_to_send+0xc>
	if(whichBuffer == 0){ //choose TXB0
     352:	81 e8       	ldi	r24, 0x81	; 129
     354:	34 d0       	rcall	.+104    	; 0x3be <spi_MasterTransmit>
     356:	07 c0       	rjmp	.+14     	; 0x366 <mcp2515_request_to_send+0x1a>
		spi_MasterTransmit(0b10000001); 
	}
	
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	19 f4       	brne	.+6      	; 0x362 <mcp2515_request_to_send+0x16>
	else if (whichBuffer == 1){ //choose TXB1
     35c:	82 e8       	ldi	r24, 0x82	; 130
     35e:	2f d0       	rcall	.+94     	; 0x3be <spi_MasterTransmit>
     360:	02 c0       	rjmp	.+4      	; 0x366 <mcp2515_request_to_send+0x1a>
		spi_MasterTransmit(0b10000010); 
	}
	else{ //choose TXB2
     362:	84 e8       	ldi	r24, 0x84	; 132
     364:	2c d0       	rcall	.+88     	; 0x3be <spi_MasterTransmit>
		spi_MasterTransmit(0b10000100);
	}
	
     366:	2f 9a       	sbi	0x05, 7	; 5
     368:	08 95       	ret

0000036a <mcp2515_read_status>:
	set_bit(PORTB,SS); //Setter SS høy
}

     36a:	cf 93       	push	r28
uint8_t mcp2515_read_status(){
     36c:	2f 98       	cbi	0x05, 7	; 5
	clear_bit(PORTB,SS); //Setter SS lav
	
	uint8_t statusRegister;
	uint8_t statusRegister2;

     36e:	80 ea       	ldi	r24, 0xA0	; 160
     370:	26 d0       	rcall	.+76     	; 0x3be <spi_MasterTransmit>
	spi_MasterTransmit(MCP_READ_STATUS);
     372:	2a d0       	rcall	.+84     	; 0x3c8 <spi_MasterRead>
     374:	c8 2f       	mov	r28, r24
	statusRegister = spi_MasterRead(); //disse to skal være like hverandre, se s. 69
     376:	28 d0       	rcall	.+80     	; 0x3c8 <spi_MasterRead>
		printf("Status registers in mcp2515_read_status() not identical.");
		return 0;
	}

	set_bit(PORTB,SS); //Setter SS høy

     378:	2f 9a       	sbi	0x05, 7	; 5
	return statusRegister;
}

     37a:	8c 2f       	mov	r24, r28
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t regAdr, uint8_t maskBits, uint8_t data){ //se s. 68
	clear_bit(PORTB,SS); //Setter SS lav
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	18 2f       	mov	r17, r24
     388:	d6 2f       	mov	r29, r22
     38a:	c4 2f       	mov	r28, r20

     38c:	2f 98       	cbi	0x05, 7	; 5
	spi_MasterTransmit(MCP_BITMOD);
	spi_MasterTransmit(regAdr);
     38e:	85 e0       	ldi	r24, 0x05	; 5
     390:	16 d0       	rcall	.+44     	; 0x3be <spi_MasterTransmit>
	spi_MasterTransmit(maskBits);
     392:	81 2f       	mov	r24, r17
     394:	14 d0       	rcall	.+40     	; 0x3be <spi_MasterTransmit>
	spi_MasterTransmit(data);
     396:	8d 2f       	mov	r24, r29
     398:	12 d0       	rcall	.+36     	; 0x3be <spi_MasterTransmit>

     39a:	8c 2f       	mov	r24, r28
     39c:	10 d0       	rcall	.+32     	; 0x3be <spi_MasterTransmit>
	set_bit(PORTB,SS); //Setter SS høy
}
     39e:	2f 9a       	sbi	0x05, 7	; 5

     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	08 95       	ret

000003a8 <spi_init>:
 #define set_bit( reg, bit ) (reg |= (1 << bit))
 #define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void spi_init(void){
    /* Set MOSI and SCK output, all others input */
    DDRB |= (1<<MOSI)|(1<<SCK);
     3a8:	84 b1       	in	r24, 0x04	; 4
     3aa:	86 60       	ori	r24, 0x06	; 6
     3ac:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << MISO);
     3ae:	23 98       	cbi	0x04, 3	; 4
    /* Enable SPI, Master, set clock rate fck/2 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X);
     3b0:	81 e5       	ldi	r24, 0x51	; 81
     3b2:	8c bd       	out	0x2c, r24	; 44
	
	set_bit(DDRB,SS); //Setter PB4 til write/output
     3b4:	27 9a       	sbi	0x04, 7	; 4
	set_bit(PORTB, SS);
     3b6:	2f 9a       	sbi	0x05, 7	; 5
	
	if(SS==7){ //Hvis vi har arduino'en, trenger å sette PB0 til output og høy
		set_bit(DDRB,PB0); //Setter PB4 til write/output
     3b8:	20 9a       	sbi	0x04, 0	; 4
		set_bit(PORTB, PB0);
     3ba:	28 9a       	sbi	0x05, 0	; 5
     3bc:	08 95       	ret

000003be <spi_MasterTransmit>:

//Med denne må vi sette SS lav/høy før/etter mastertransmit starter/slutter
void spi_MasterTransmit(char cData) { //keepLow holds the SS* signal low so the transmission continues
	
	/* Start transmission */
	SPDR = cData;
     3be:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete. Interrupt flag in SPSR is set (SPIF). */
	while(!(SPSR & (1<<SPIF)));
     3c0:	0d b4       	in	r0, 0x2d	; 45
     3c2:	07 fe       	sbrs	r0, 7
     3c4:	fd cf       	rjmp	.-6      	; 0x3c0 <spi_MasterTransmit+0x2>
}
     3c6:	08 95       	ret

000003c8 <spi_MasterRead>:

//Egentlig ikke nødvendig med denne funksjonen, fordi MasterTransmit gjør det samme, men vi beholder den for lesbarhet av koden
uint8_t spi_MasterRead(){
	//Setter SS lav utenfor funksjonen, altså setter vi SS lav inni mcp2515_read

	spi_MasterTransmit(0x00);
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	f9 df       	rcall	.-14     	; 0x3be <spi_MasterTransmit>
	
	//Setter SS høy utenfor funksjonen, altså setter vi SS høy igjen inni mcp2515_read

	return SPDR;
     3cc:	8e b5       	in	r24, 0x2e	; 46
	
}
     3ce:	08 95       	ret

000003d0 <USART_Transmit>:
 }
 
 void USART_Transmit( unsigned char data )
 {
	 /* Wait for empty transmit buffer */
	 while( !( UCSR0A & (1<<UDRE0)) );
     3d0:	e0 ec       	ldi	r30, 0xC0	; 192
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	90 81       	ld	r25, Z
     3d6:	95 ff       	sbrs	r25, 5
     3d8:	fd cf       	rjmp	.-6      	; 0x3d4 <USART_Transmit+0x4>
	 
	 /* Put data into buffer, sends the data */
	 UDR0 = data;
     3da:	80 93 c6 00 	sts	0x00C6, r24
     3de:	08 95       	ret

000003e0 <USART_Receive>:
 }

 unsigned char USART_Receive( void )
 {
	 /*Wait for data to be received*/
	 while( !(UCSR0A & (1<<RXC0)) );
     3e0:	e0 ec       	ldi	r30, 0xC0	; 192
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	88 23       	and	r24, r24
     3e8:	ec f7       	brge	.-6      	; 0x3e4 <USART_Receive+0x4>
	 
	 /* Get and return received data from buffer*/
	 return UDR0;
     3ea:	80 91 c6 00 	lds	r24, 0x00C6
 }
     3ee:	08 95       	ret

000003f0 <USART_Init>:


void USART_Init( unsigned int ubrr )
 {
	 /* Set baud rate */
	 UBRR0H = (unsigned char)(ubrr>>8);
     3f0:	90 93 c5 00 	sts	0x00C5, r25
	 UBRR0L = (unsigned char)ubrr;
     3f4:	80 93 c4 00 	sts	0x00C4, r24

	 /* Enable receiver and transmitter*/
	 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     3f8:	88 e1       	ldi	r24, 0x18	; 24
     3fa:	80 93 c1 00 	sts	0x00C1, r24
	 
	 fdevopen(*USART_Transmit, *USART_Receive);
     3fe:	60 ef       	ldi	r22, 0xF0	; 240
     400:	71 e0       	ldi	r23, 0x01	; 1
     402:	88 ee       	ldi	r24, 0xE8	; 232
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	aa c2       	rjmp	.+1364   	; 0x95c <fdevopen>
     408:	08 95       	ret

0000040a <game_isGameOver>:
#include "internalADC.h"



int game_isGameOver(void){
	uint16_t adcValue = internalADC_getResult();
     40a:	09 d0       	rcall	.+18     	; 0x41e <internalADC_getResult>
	
	if(adcValue<= 300){ //Endre denne for IR sensorsensitivity
     40c:	21 e0       	ldi	r18, 0x01	; 1
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	8d 32       	cpi	r24, 0x2D	; 45
     412:	91 40       	sbci	r25, 0x01	; 1
     414:	10 f0       	brcs	.+4      	; 0x41a <game_isGameOver+0x10>
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	}
	return 0;
     41a:	c9 01       	movw	r24, r18
     41c:	08 95       	ret

0000041e <internalADC_getResult>:
	internalADC_startConversion();//Starter første konvertering
}

uint16_t internalADC_getResult(void){
	
	uint16_t resultL = ADCL;
     41e:	20 91 78 00 	lds	r18, 0x0078
	uint16_t resultH = ADCH; //Leftshift 8 ganger
     422:	80 91 79 00 	lds	r24, 0x0079
     426:	90 e0       	ldi	r25, 0x00	; 0
	resultH = (resultH << 8);
     428:	98 2f       	mov	r25, r24
     42a:	88 27       	eor	r24, r24
	uint16_t result = resultH + resultL;
	
	return result;
	
}
     42c:	82 0f       	add	r24, r18
     42e:	91 1d       	adc	r25, r1
     430:	08 95       	ret

00000432 <internalADC_startConversion>:

void internalADC_startConversion(void){
	set_bit(ADCSRA,ADSC); //Start conversion
     432:	ea e7       	ldi	r30, 0x7A	; 122
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	80 64       	ori	r24, 0x40	; 64
     43a:	80 83       	st	Z, r24
     43c:	08 95       	ret

0000043e <internalADC_init>:
#define test_bit( reg, bit )(reg & (1 << bit))


void internalADC_init(void){
	
	clear_bit(DDRF,PF0); //Set A0 to input
     43e:	80 98       	cbi	0x10, 0	; 16
	set_bit(ADCSRA,ADEN); //ADC enable
     440:	aa e7       	ldi	r26, 0x7A	; 122
     442:	b0 e0       	ldi	r27, 0x00	; 0
     444:	8c 91       	ld	r24, X
     446:	80 68       	ori	r24, 0x80	; 128
     448:	8c 93       	st	X, r24
	
	//clear_bit(ADCSRB, MUX5);//Setter ADC til konvertering av ADCO
	clear_bit(ADMUX,MUX4);// ----||----
     44a:	ec e7       	ldi	r30, 0x7C	; 124
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	8f 7e       	andi	r24, 0xEF	; 239
     452:	80 83       	st	Z, r24
	clear_bit(ADMUX,MUX3);// ----||----
     454:	80 81       	ld	r24, Z
     456:	87 7f       	andi	r24, 0xF7	; 247
     458:	80 83       	st	Z, r24
	clear_bit(ADMUX,MUX2);// ----||----
     45a:	80 81       	ld	r24, Z
     45c:	8b 7f       	andi	r24, 0xFB	; 251
     45e:	80 83       	st	Z, r24
	clear_bit(ADMUX,MUX1);// ----||----
     460:	80 81       	ld	r24, Z
     462:	8d 7f       	andi	r24, 0xFD	; 253
     464:	80 83       	st	Z, r24
	clear_bit(ADMUX,MUX0);// ----||----
     466:	80 81       	ld	r24, Z
     468:	8e 7f       	andi	r24, 0xFE	; 254
     46a:	80 83       	st	Z, r24
	
	clear_bit(ADMUX,REFS1);// Voltage reference to AVcc
     46c:	80 81       	ld	r24, Z
     46e:	8f 77       	andi	r24, 0x7F	; 127
     470:	80 83       	st	Z, r24
	set_bit(ADMUX,REFS0); // ----||----
     472:	80 81       	ld	r24, Z
     474:	80 64       	ori	r24, 0x40	; 64
     476:	80 83       	st	Z, r24
	
	clear_bit(ADCSRA,5);  //Turn off free running mode
     478:	8c 91       	ld	r24, X
     47a:	8f 7d       	andi	r24, 0xDF	; 223
     47c:	8c 93       	st	X, r24
	
	set_bit(ADCSRA,ADIE); //Enable interrupt
     47e:	8c 91       	ld	r24, X
     480:	88 60       	ori	r24, 0x08	; 8
     482:	8c 93       	st	X, r24
	
	//setter prescaler til 4, funker ikke med 2
	clear_bit(ADCSRA, ADPS0);
     484:	8c 91       	ld	r24, X
     486:	8e 7f       	andi	r24, 0xFE	; 254
     488:	8c 93       	st	X, r24
	set_bit(ADCSRA, ADPS1);
     48a:	8c 91       	ld	r24, X
     48c:	82 60       	ori	r24, 0x02	; 2
     48e:	8c 93       	st	X, r24
	clear_bit(ADCSRA, ADPS2);
     490:	8c 91       	ld	r24, X
     492:	8b 7f       	andi	r24, 0xFB	; 251
     494:	8c 93       	st	X, r24
	
	internalADC_startConversion();//Starter første konvertering
     496:	cd cf       	rjmp	.-102    	; 0x432 <internalADC_startConversion>
     498:	08 95       	ret

0000049a <main>:
volatile int RECEIVE_BUFFER_INTERRUPT = 0;
volatile int TIMER_OVERFLOW_INTERRUPT = 0;
volatile int ADC_CONVERSION_COMPLETE_INTERRUPT = 0;

int main(void)
{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	64 97       	sbiw	r28, 0x14	; 20
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	cd bf       	out	0x3d, r28	; 61
	cli();
     4ae:	f8 94       	cli
	USART_Init(MYUBRR);
     4b0:	87 e6       	ldi	r24, 0x67	; 103
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	9d df       	rcall	.-198    	; 0x3f0 <USART_Init>
	can_init();
     4b6:	37 de       	rcall	.-914    	; 0x126 <can_init>
	timer_init();
     4b8:	60 d0       	rcall	.+192    	; 0x57a <timer_init>
	internalADC_init();
     4ba:	c1 df       	rcall	.-126    	; 0x43e <internalADC_init>
	sei(); //Global interrupt enable
     4bc:	78 94       	sei
	melding.data[6] = (uint8_t)('7');
	melding.data[7] = (uint8_t)('8');
	
	uint16_t result;
	
	int mottatt_data_char0 = 50; //startposisjon
     4be:	02 e3       	ldi	r16, 0x32	; 50
     4c0:	10 e0       	ldi	r17, 0x00	; 0
			uint8_t gameOver = game_isGameOver();
			//printf("Game Over = %i \n", gameOver);
			
			//sender can melding som har info om spillet er over
			can_msg gameInfo;
			gameInfo.id = 5;
     4c2:	0f 2e       	mov	r0, r31
     4c4:	f5 e0       	ldi	r31, 0x05	; 5
     4c6:	ef 2e       	mov	r14, r31
     4c8:	f1 2c       	mov	r15, r1
     4ca:	f0 2d       	mov	r31, r0
			gameInfo.length = 1; //skal kun sende over én verdi, som er verdien gameOver
     4cc:	dd 24       	eor	r13, r13
     4ce:	d3 94       	inc	r13
	
	
    while(1)
    {
		
		if(ADC_CONVERSION_COMPLETE_INTERRUPT){
     4d0:	20 91 38 02 	lds	r18, 0x0238
     4d4:	30 91 39 02 	lds	r19, 0x0239
     4d8:	23 2b       	or	r18, r19
     4da:	79 f0       	breq	.+30     	; 0x4fa <main+0x60>
			
			uint8_t gameOver = game_isGameOver();
     4dc:	96 df       	rcall	.-212    	; 0x40a <game_isGameOver>
			//printf("Game Over = %i \n", gameOver);
			
			//sender can melding som har info om spillet er over
			can_msg gameInfo;
			gameInfo.id = 5;
     4de:	fa 82       	std	Y+2, r15	; 0x02
     4e0:	e9 82       	std	Y+1, r14	; 0x01
			gameInfo.length = 1; //skal kun sende over én verdi, som er verdien gameOver
     4e2:	db 8a       	std	Y+19, r13	; 0x13
			gameInfo.data[0] = gameOver;
     4e4:	99 27       	eor	r25, r25
     4e6:	9c 83       	std	Y+4, r25	; 0x04
     4e8:	8b 83       	std	Y+3, r24	; 0x03
			can_send_message(&gameInfo);
     4ea:	ce 01       	movw	r24, r28
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	31 de       	rcall	.-926    	; 0x152 <can_send_message>

			
			internalADC_startConversion();
     4f0:	a0 df       	rcall	.-192    	; 0x432 <internalADC_startConversion>
			
			ADC_CONVERSION_COMPLETE_INTERRUPT = 0;
     4f2:	10 92 39 02 	sts	0x0239, r1
     4f6:	10 92 38 02 	sts	0x0238, r1
		//	can_send_message(&melding);
		can_msg mottatt;
		
		
		//sjekker om receive bufre inneholder noe. se s. 69 i mcp2515
		volatile uint8_t statusReg = mcp2515_read_status();
     4fa:	37 df       	rcall	.-402    	; 0x36a <mcp2515_read_status>
     4fc:	8c 8b       	std	Y+20, r24	; 0x14
		
		if(test_bit(statusReg, 0)){ //Mulig å lage det som en funskjon i ettertid
     4fe:	8c 89       	ldd	r24, Y+20	; 0x14
     500:	80 ff       	sbrs	r24, 0
     502:	0d c0       	rjmp	.+26     	; 0x51e <main+0x84>

			can_receive_message(&mottatt);		
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	71 de       	rcall	.-798    	; 0x1ec <can_receive_message>
			
			mottatt_data_char0 = mottatt.data[0]; //X-akse
     50a:	0b 81       	ldd	r16, Y+3	; 0x03
     50c:	1c 81       	ldd	r17, Y+4	; 0x04
			int mottatt_data_char6 = mottatt.data[6];
						
			

			//printf("ID: %i  LENGTH: %i   ALL DATA  %i    %i   %i    %i    %i    %i    %i   \n", mottatt.id , mottatt.length, mottatt_data_char0, mottatt_data_char1, mottatt_data_char2, mottatt_data_char3, mottatt_data_char4, mottatt_data_char5, mottatt_data_char6);
			RECEIVE_BUFFER_INTERRUPT = 0; //clearer interruptflagget
     50e:	10 92 3b 02 	sts	0x023B, r1
     512:	10 92 3a 02 	sts	0x023A, r1
			
			mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0b00000000); //for å kunne reenable receive buffer 0 interrupten
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	6d 2d       	mov	r22, r13
     51a:	8c e2       	ldi	r24, 0x2C	; 44
     51c:	31 df       	rcall	.-414    	; 0x380 <mcp2515_bit_modify>
			
			
			
					
		}
		servo_positionUpdate(mottatt_data_char0);
     51e:	c8 01       	movw	r24, r16
     520:	29 d0       	rcall	.+82     	; 0x574 <servo_positionUpdate>

		
	}
     522:	d6 cf       	rjmp	.-84     	; 0x4d0 <main+0x36>

00000524 <__vector_3>:
}

ISR(INT2_vect){
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
	RECEIVE_BUFFER_INTERRUPT = 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	90 93 3b 02 	sts	0x023B, r25
     53a:	80 93 3a 02 	sts	0x023A, r24
}
     53e:	9f 91       	pop	r25
     540:	8f 91       	pop	r24
     542:	0f 90       	pop	r0
     544:	0f be       	out	0x3f, r0	; 63
     546:	0f 90       	pop	r0
     548:	1f 90       	pop	r1
     54a:	18 95       	reti

0000054c <__vector_29>:
/*
ISR(TIMER1_OVF_vect){
	TIMER_OVERFLOW_INTERRUPT +=1;
}*/

ISR(ADC_vect){
     54c:	1f 92       	push	r1
     54e:	0f 92       	push	r0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	0f 92       	push	r0
     554:	11 24       	eor	r1, r1
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
	ADC_CONVERSION_COMPLETE_INTERRUPT = 1;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	90 93 39 02 	sts	0x0239, r25
     562:	80 93 38 02 	sts	0x0238, r24
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <servo_positionUpdate>:
#include "servo.h"



void servo_positionUpdate(int rawJoystickValue){
	int percent = joy_getPercent(rawJoystickValue);
     574:	aa de       	rcall	.-684    	; 0x2ca <joy_getPercent>
	
	
	timer_dutyCycleUpdate(percent);
     576:	28 c0       	rjmp	.+80     	; 0x5c8 <timer_dutyCycleUpdate>
     578:	08 95       	ret

0000057a <timer_init>:
#define test_bit( reg, bit ) (reg & (1 << bit))

void timer_init(){
	
	//Fast PWM set up. s.145 in ATmega2560 datasheet
	clear_bit(TCCR1A,WGM10);
     57a:	a0 e8       	ldi	r26, 0x80	; 128
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	8c 91       	ld	r24, X
     580:	8e 7f       	andi	r24, 0xFE	; 254
     582:	8c 93       	st	X, r24
	set_bit(TCCR1A,WGM11);
     584:	8c 91       	ld	r24, X
     586:	82 60       	ori	r24, 0x02	; 2
     588:	8c 93       	st	X, r24
	set_bit(TCCR1B,WGM12);
     58a:	e1 e8       	ldi	r30, 0x81	; 129
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	88 60       	ori	r24, 0x08	; 8
     592:	80 83       	st	Z, r24
	set_bit(TCCR1B,WGM13);
     594:	80 81       	ld	r24, Z
     596:	80 61       	ori	r24, 0x10	; 16
     598:	80 83       	st	Z, r24
	
	//Setter til non-inverted PWM, s. 155
	set_bit(TCCR1A,COM1A1);
     59a:	8c 91       	ld	r24, X
     59c:	80 68       	ori	r24, 0x80	; 128
     59e:	8c 93       	st	X, r24
	clear_bit(TCCR1A,COM1A0);
     5a0:	8c 91       	ld	r24, X
     5a2:	8f 7b       	andi	r24, 0xBF	; 191
     5a4:	8c 93       	st	X, r24
	
	//Setter prescaler til 256 s.156-157
	set_bit(TCCR1B,CS12);
     5a6:	80 81       	ld	r24, Z
     5a8:	84 60       	ori	r24, 0x04	; 4
     5aa:	80 83       	st	Z, r24
	clear_bit(TCCR1B,CS11);
     5ac:	80 81       	ld	r24, Z
     5ae:	8d 7f       	andi	r24, 0xFD	; 253
     5b0:	80 83       	st	Z, r24
	clear_bit(TCCR1B,CS10);
     5b2:	80 81       	ld	r24, Z
     5b4:	8e 7f       	andi	r24, 0xFE	; 254
     5b6:	80 83       	st	Z, r24
	
	//Setter OC1A til output (Skal være PB5 i DDRA register?)
	set_bit(DDRB, PB5);
     5b8:	25 9a       	sbi	0x04, 5	; 4
	
	//Setter maksverdi for 20ms periode
	uint16_t prescaler = 256;
	uint16_t F_OC1A = 50; // 1/(20*10^-3)
	uint16_t top = (F_CPU)/(prescaler*F_OC1A)-1; // = 1249 
	ICR1 = top;
     5ba:	81 ee       	ldi	r24, 0xE1	; 225
     5bc:	94 e0       	ldi	r25, 0x04	; 4
     5be:	90 93 87 00 	sts	0x0087, r25
     5c2:	80 93 86 00 	sts	0x0086, r24
     5c6:	08 95       	ret

000005c8 <timer_dutyCycleUpdate>:
	//sei();
}

int timer_dutyCycleUpdate(int percent){
	
	if (percent <  0 || percent > 100)
     5c8:	85 36       	cpi	r24, 0x65	; 101
     5ca:	91 05       	cpc	r25, r1
     5cc:	98 f4       	brcc	.+38     	; 0x5f4 <timer_dutyCycleUpdate+0x2c>
	{
		return -1;
	}
	uint16_t top = (percent*(131-56))/100+56;
     5ce:	4b e4       	ldi	r20, 0x4B	; 75
     5d0:	48 9f       	mul	r20, r24
     5d2:	90 01       	movw	r18, r0
     5d4:	49 9f       	mul	r20, r25
     5d6:	30 0d       	add	r19, r0
     5d8:	11 24       	eor	r1, r1
     5da:	c9 01       	movw	r24, r18
     5dc:	64 e6       	ldi	r22, 0x64	; 100
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	96 d1       	rcall	.+812    	; 0x90e <__divmodhi4>
     5e2:	68 5c       	subi	r22, 0xC8	; 200
     5e4:	7f 4f       	sbci	r23, 0xFF	; 255
	OCR1A = top;
     5e6:	70 93 89 00 	sts	0x0089, r23
     5ea:	60 93 88 00 	sts	0x0088, r22
	
	return 1;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	08 95       	ret

int timer_dutyCycleUpdate(int percent){
	
	if (percent <  0 || percent > 100)
	{
		return -1;
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	9f ef       	ldi	r25, 0xFF	; 255
	uint16_t top = (percent*(131-56))/100+56;
	OCR1A = top;
	
	return 1;
	
}
     5f8:	08 95       	ret

000005fa <__divsf3>:
     5fa:	0c d0       	rcall	.+24     	; 0x614 <__divsf3x>
     5fc:	eb c0       	rjmp	.+470    	; 0x7d4 <__fp_round>
     5fe:	e3 d0       	rcall	.+454    	; 0x7c6 <__fp_pscB>
     600:	40 f0       	brcs	.+16     	; 0x612 <__divsf3+0x18>
     602:	da d0       	rcall	.+436    	; 0x7b8 <__fp_pscA>
     604:	30 f0       	brcs	.+12     	; 0x612 <__divsf3+0x18>
     606:	21 f4       	brne	.+8      	; 0x610 <__divsf3+0x16>
     608:	5f 3f       	cpi	r21, 0xFF	; 255
     60a:	19 f0       	breq	.+6      	; 0x612 <__divsf3+0x18>
     60c:	cc c0       	rjmp	.+408    	; 0x7a6 <__fp_inf>
     60e:	51 11       	cpse	r21, r1
     610:	15 c1       	rjmp	.+554    	; 0x83c <__fp_szero>
     612:	cf c0       	rjmp	.+414    	; 0x7b2 <__fp_nan>

00000614 <__divsf3x>:
     614:	f0 d0       	rcall	.+480    	; 0x7f6 <__fp_split3>
     616:	98 f3       	brcs	.-26     	; 0x5fe <__divsf3+0x4>

00000618 <__divsf3_pse>:
     618:	99 23       	and	r25, r25
     61a:	c9 f3       	breq	.-14     	; 0x60e <__divsf3+0x14>
     61c:	55 23       	and	r21, r21
     61e:	b1 f3       	breq	.-20     	; 0x60c <__divsf3+0x12>
     620:	95 1b       	sub	r25, r21
     622:	55 0b       	sbc	r21, r21
     624:	bb 27       	eor	r27, r27
     626:	aa 27       	eor	r26, r26
     628:	62 17       	cp	r22, r18
     62a:	73 07       	cpc	r23, r19
     62c:	84 07       	cpc	r24, r20
     62e:	38 f0       	brcs	.+14     	; 0x63e <__divsf3_pse+0x26>
     630:	9f 5f       	subi	r25, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	22 0f       	add	r18, r18
     636:	33 1f       	adc	r19, r19
     638:	44 1f       	adc	r20, r20
     63a:	aa 1f       	adc	r26, r26
     63c:	a9 f3       	breq	.-22     	; 0x628 <__divsf3_pse+0x10>
     63e:	33 d0       	rcall	.+102    	; 0x6a6 <__divsf3_pse+0x8e>
     640:	0e 2e       	mov	r0, r30
     642:	3a f0       	brmi	.+14     	; 0x652 <__divsf3_pse+0x3a>
     644:	e0 e8       	ldi	r30, 0x80	; 128
     646:	30 d0       	rcall	.+96     	; 0x6a8 <__divsf3_pse+0x90>
     648:	91 50       	subi	r25, 0x01	; 1
     64a:	50 40       	sbci	r21, 0x00	; 0
     64c:	e6 95       	lsr	r30
     64e:	00 1c       	adc	r0, r0
     650:	ca f7       	brpl	.-14     	; 0x644 <__divsf3_pse+0x2c>
     652:	29 d0       	rcall	.+82     	; 0x6a6 <__divsf3_pse+0x8e>
     654:	fe 2f       	mov	r31, r30
     656:	27 d0       	rcall	.+78     	; 0x6a6 <__divsf3_pse+0x8e>
     658:	66 0f       	add	r22, r22
     65a:	77 1f       	adc	r23, r23
     65c:	88 1f       	adc	r24, r24
     65e:	bb 1f       	adc	r27, r27
     660:	26 17       	cp	r18, r22
     662:	37 07       	cpc	r19, r23
     664:	48 07       	cpc	r20, r24
     666:	ab 07       	cpc	r26, r27
     668:	b0 e8       	ldi	r27, 0x80	; 128
     66a:	09 f0       	breq	.+2      	; 0x66e <__divsf3_pse+0x56>
     66c:	bb 0b       	sbc	r27, r27
     66e:	80 2d       	mov	r24, r0
     670:	bf 01       	movw	r22, r30
     672:	ff 27       	eor	r31, r31
     674:	93 58       	subi	r25, 0x83	; 131
     676:	5f 4f       	sbci	r21, 0xFF	; 255
     678:	2a f0       	brmi	.+10     	; 0x684 <__divsf3_pse+0x6c>
     67a:	9e 3f       	cpi	r25, 0xFE	; 254
     67c:	51 05       	cpc	r21, r1
     67e:	68 f0       	brcs	.+26     	; 0x69a <__divsf3_pse+0x82>
     680:	92 c0       	rjmp	.+292    	; 0x7a6 <__fp_inf>
     682:	dc c0       	rjmp	.+440    	; 0x83c <__fp_szero>
     684:	5f 3f       	cpi	r21, 0xFF	; 255
     686:	ec f3       	brlt	.-6      	; 0x682 <__divsf3_pse+0x6a>
     688:	98 3e       	cpi	r25, 0xE8	; 232
     68a:	dc f3       	brlt	.-10     	; 0x682 <__divsf3_pse+0x6a>
     68c:	86 95       	lsr	r24
     68e:	77 95       	ror	r23
     690:	67 95       	ror	r22
     692:	b7 95       	ror	r27
     694:	f7 95       	ror	r31
     696:	9f 5f       	subi	r25, 0xFF	; 255
     698:	c9 f7       	brne	.-14     	; 0x68c <__divsf3_pse+0x74>
     69a:	88 0f       	add	r24, r24
     69c:	91 1d       	adc	r25, r1
     69e:	96 95       	lsr	r25
     6a0:	87 95       	ror	r24
     6a2:	97 f9       	bld	r25, 7
     6a4:	08 95       	ret
     6a6:	e1 e0       	ldi	r30, 0x01	; 1
     6a8:	66 0f       	add	r22, r22
     6aa:	77 1f       	adc	r23, r23
     6ac:	88 1f       	adc	r24, r24
     6ae:	bb 1f       	adc	r27, r27
     6b0:	62 17       	cp	r22, r18
     6b2:	73 07       	cpc	r23, r19
     6b4:	84 07       	cpc	r24, r20
     6b6:	ba 07       	cpc	r27, r26
     6b8:	20 f0       	brcs	.+8      	; 0x6c2 <__divsf3_pse+0xaa>
     6ba:	62 1b       	sub	r22, r18
     6bc:	73 0b       	sbc	r23, r19
     6be:	84 0b       	sbc	r24, r20
     6c0:	ba 0b       	sbc	r27, r26
     6c2:	ee 1f       	adc	r30, r30
     6c4:	88 f7       	brcc	.-30     	; 0x6a8 <__divsf3_pse+0x90>
     6c6:	e0 95       	com	r30
     6c8:	08 95       	ret

000006ca <__fixsfsi>:
     6ca:	04 d0       	rcall	.+8      	; 0x6d4 <__fixunssfsi>
     6cc:	68 94       	set
     6ce:	b1 11       	cpse	r27, r1
     6d0:	b5 c0       	rjmp	.+362    	; 0x83c <__fp_szero>
     6d2:	08 95       	ret

000006d4 <__fixunssfsi>:
     6d4:	98 d0       	rcall	.+304    	; 0x806 <__fp_splitA>
     6d6:	88 f0       	brcs	.+34     	; 0x6fa <__fixunssfsi+0x26>
     6d8:	9f 57       	subi	r25, 0x7F	; 127
     6da:	90 f0       	brcs	.+36     	; 0x700 <__fixunssfsi+0x2c>
     6dc:	b9 2f       	mov	r27, r25
     6de:	99 27       	eor	r25, r25
     6e0:	b7 51       	subi	r27, 0x17	; 23
     6e2:	a0 f0       	brcs	.+40     	; 0x70c <__fixunssfsi+0x38>
     6e4:	d1 f0       	breq	.+52     	; 0x71a <__fixunssfsi+0x46>
     6e6:	66 0f       	add	r22, r22
     6e8:	77 1f       	adc	r23, r23
     6ea:	88 1f       	adc	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	1a f0       	brmi	.+6      	; 0x6f6 <__fixunssfsi+0x22>
     6f0:	ba 95       	dec	r27
     6f2:	c9 f7       	brne	.-14     	; 0x6e6 <__fixunssfsi+0x12>
     6f4:	12 c0       	rjmp	.+36     	; 0x71a <__fixunssfsi+0x46>
     6f6:	b1 30       	cpi	r27, 0x01	; 1
     6f8:	81 f0       	breq	.+32     	; 0x71a <__fixunssfsi+0x46>
     6fa:	9f d0       	rcall	.+318    	; 0x83a <__fp_zero>
     6fc:	b1 e0       	ldi	r27, 0x01	; 1
     6fe:	08 95       	ret
     700:	9c c0       	rjmp	.+312    	; 0x83a <__fp_zero>
     702:	67 2f       	mov	r22, r23
     704:	78 2f       	mov	r23, r24
     706:	88 27       	eor	r24, r24
     708:	b8 5f       	subi	r27, 0xF8	; 248
     70a:	39 f0       	breq	.+14     	; 0x71a <__fixunssfsi+0x46>
     70c:	b9 3f       	cpi	r27, 0xF9	; 249
     70e:	cc f3       	brlt	.-14     	; 0x702 <__fixunssfsi+0x2e>
     710:	86 95       	lsr	r24
     712:	77 95       	ror	r23
     714:	67 95       	ror	r22
     716:	b3 95       	inc	r27
     718:	d9 f7       	brne	.-10     	; 0x710 <__fixunssfsi+0x3c>
     71a:	3e f4       	brtc	.+14     	; 0x72a <__fixunssfsi+0x56>
     71c:	90 95       	com	r25
     71e:	80 95       	com	r24
     720:	70 95       	com	r23
     722:	61 95       	neg	r22
     724:	7f 4f       	sbci	r23, 0xFF	; 255
     726:	8f 4f       	sbci	r24, 0xFF	; 255
     728:	9f 4f       	sbci	r25, 0xFF	; 255
     72a:	08 95       	ret

0000072c <__floatunsisf>:
     72c:	e8 94       	clt
     72e:	09 c0       	rjmp	.+18     	; 0x742 <__floatsisf+0x12>

00000730 <__floatsisf>:
     730:	97 fb       	bst	r25, 7
     732:	3e f4       	brtc	.+14     	; 0x742 <__floatsisf+0x12>
     734:	90 95       	com	r25
     736:	80 95       	com	r24
     738:	70 95       	com	r23
     73a:	61 95       	neg	r22
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	8f 4f       	sbci	r24, 0xFF	; 255
     740:	9f 4f       	sbci	r25, 0xFF	; 255
     742:	99 23       	and	r25, r25
     744:	a9 f0       	breq	.+42     	; 0x770 <__floatsisf+0x40>
     746:	f9 2f       	mov	r31, r25
     748:	96 e9       	ldi	r25, 0x96	; 150
     74a:	bb 27       	eor	r27, r27
     74c:	93 95       	inc	r25
     74e:	f6 95       	lsr	r31
     750:	87 95       	ror	r24
     752:	77 95       	ror	r23
     754:	67 95       	ror	r22
     756:	b7 95       	ror	r27
     758:	f1 11       	cpse	r31, r1
     75a:	f8 cf       	rjmp	.-16     	; 0x74c <__floatsisf+0x1c>
     75c:	fa f4       	brpl	.+62     	; 0x79c <__floatsisf+0x6c>
     75e:	bb 0f       	add	r27, r27
     760:	11 f4       	brne	.+4      	; 0x766 <__floatsisf+0x36>
     762:	60 ff       	sbrs	r22, 0
     764:	1b c0       	rjmp	.+54     	; 0x79c <__floatsisf+0x6c>
     766:	6f 5f       	subi	r22, 0xFF	; 255
     768:	7f 4f       	sbci	r23, 0xFF	; 255
     76a:	8f 4f       	sbci	r24, 0xFF	; 255
     76c:	9f 4f       	sbci	r25, 0xFF	; 255
     76e:	16 c0       	rjmp	.+44     	; 0x79c <__floatsisf+0x6c>
     770:	88 23       	and	r24, r24
     772:	11 f0       	breq	.+4      	; 0x778 <__floatsisf+0x48>
     774:	96 e9       	ldi	r25, 0x96	; 150
     776:	11 c0       	rjmp	.+34     	; 0x79a <__floatsisf+0x6a>
     778:	77 23       	and	r23, r23
     77a:	21 f0       	breq	.+8      	; 0x784 <__floatsisf+0x54>
     77c:	9e e8       	ldi	r25, 0x8E	; 142
     77e:	87 2f       	mov	r24, r23
     780:	76 2f       	mov	r23, r22
     782:	05 c0       	rjmp	.+10     	; 0x78e <__floatsisf+0x5e>
     784:	66 23       	and	r22, r22
     786:	71 f0       	breq	.+28     	; 0x7a4 <__floatsisf+0x74>
     788:	96 e8       	ldi	r25, 0x86	; 134
     78a:	86 2f       	mov	r24, r22
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	2a f0       	brmi	.+10     	; 0x79c <__floatsisf+0x6c>
     792:	9a 95       	dec	r25
     794:	66 0f       	add	r22, r22
     796:	77 1f       	adc	r23, r23
     798:	88 1f       	adc	r24, r24
     79a:	da f7       	brpl	.-10     	; 0x792 <__floatsisf+0x62>
     79c:	88 0f       	add	r24, r24
     79e:	96 95       	lsr	r25
     7a0:	87 95       	ror	r24
     7a2:	97 f9       	bld	r25, 7
     7a4:	08 95       	ret

000007a6 <__fp_inf>:
     7a6:	97 f9       	bld	r25, 7
     7a8:	9f 67       	ori	r25, 0x7F	; 127
     7aa:	80 e8       	ldi	r24, 0x80	; 128
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	08 95       	ret

000007b2 <__fp_nan>:
     7b2:	9f ef       	ldi	r25, 0xFF	; 255
     7b4:	80 ec       	ldi	r24, 0xC0	; 192
     7b6:	08 95       	ret

000007b8 <__fp_pscA>:
     7b8:	00 24       	eor	r0, r0
     7ba:	0a 94       	dec	r0
     7bc:	16 16       	cp	r1, r22
     7be:	17 06       	cpc	r1, r23
     7c0:	18 06       	cpc	r1, r24
     7c2:	09 06       	cpc	r0, r25
     7c4:	08 95       	ret

000007c6 <__fp_pscB>:
     7c6:	00 24       	eor	r0, r0
     7c8:	0a 94       	dec	r0
     7ca:	12 16       	cp	r1, r18
     7cc:	13 06       	cpc	r1, r19
     7ce:	14 06       	cpc	r1, r20
     7d0:	05 06       	cpc	r0, r21
     7d2:	08 95       	ret

000007d4 <__fp_round>:
     7d4:	09 2e       	mov	r0, r25
     7d6:	03 94       	inc	r0
     7d8:	00 0c       	add	r0, r0
     7da:	11 f4       	brne	.+4      	; 0x7e0 <__fp_round+0xc>
     7dc:	88 23       	and	r24, r24
     7de:	52 f0       	brmi	.+20     	; 0x7f4 <__fp_round+0x20>
     7e0:	bb 0f       	add	r27, r27
     7e2:	40 f4       	brcc	.+16     	; 0x7f4 <__fp_round+0x20>
     7e4:	bf 2b       	or	r27, r31
     7e6:	11 f4       	brne	.+4      	; 0x7ec <__fp_round+0x18>
     7e8:	60 ff       	sbrs	r22, 0
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__fp_round+0x20>
     7ec:	6f 5f       	subi	r22, 0xFF	; 255
     7ee:	7f 4f       	sbci	r23, 0xFF	; 255
     7f0:	8f 4f       	sbci	r24, 0xFF	; 255
     7f2:	9f 4f       	sbci	r25, 0xFF	; 255
     7f4:	08 95       	ret

000007f6 <__fp_split3>:
     7f6:	57 fd       	sbrc	r21, 7
     7f8:	90 58       	subi	r25, 0x80	; 128
     7fa:	44 0f       	add	r20, r20
     7fc:	55 1f       	adc	r21, r21
     7fe:	59 f0       	breq	.+22     	; 0x816 <__fp_splitA+0x10>
     800:	5f 3f       	cpi	r21, 0xFF	; 255
     802:	71 f0       	breq	.+28     	; 0x820 <__fp_splitA+0x1a>
     804:	47 95       	ror	r20

00000806 <__fp_splitA>:
     806:	88 0f       	add	r24, r24
     808:	97 fb       	bst	r25, 7
     80a:	99 1f       	adc	r25, r25
     80c:	61 f0       	breq	.+24     	; 0x826 <__fp_splitA+0x20>
     80e:	9f 3f       	cpi	r25, 0xFF	; 255
     810:	79 f0       	breq	.+30     	; 0x830 <__fp_splitA+0x2a>
     812:	87 95       	ror	r24
     814:	08 95       	ret
     816:	12 16       	cp	r1, r18
     818:	13 06       	cpc	r1, r19
     81a:	14 06       	cpc	r1, r20
     81c:	55 1f       	adc	r21, r21
     81e:	f2 cf       	rjmp	.-28     	; 0x804 <__fp_split3+0xe>
     820:	46 95       	lsr	r20
     822:	f1 df       	rcall	.-30     	; 0x806 <__fp_splitA>
     824:	08 c0       	rjmp	.+16     	; 0x836 <__fp_splitA+0x30>
     826:	16 16       	cp	r1, r22
     828:	17 06       	cpc	r1, r23
     82a:	18 06       	cpc	r1, r24
     82c:	99 1f       	adc	r25, r25
     82e:	f1 cf       	rjmp	.-30     	; 0x812 <__fp_splitA+0xc>
     830:	86 95       	lsr	r24
     832:	71 05       	cpc	r23, r1
     834:	61 05       	cpc	r22, r1
     836:	08 94       	sec
     838:	08 95       	ret

0000083a <__fp_zero>:
     83a:	e8 94       	clt

0000083c <__fp_szero>:
     83c:	bb 27       	eor	r27, r27
     83e:	66 27       	eor	r22, r22
     840:	77 27       	eor	r23, r23
     842:	cb 01       	movw	r24, r22
     844:	97 f9       	bld	r25, 7
     846:	08 95       	ret

00000848 <__mulsf3>:
     848:	0b d0       	rcall	.+22     	; 0x860 <__mulsf3x>
     84a:	c4 cf       	rjmp	.-120    	; 0x7d4 <__fp_round>
     84c:	b5 df       	rcall	.-150    	; 0x7b8 <__fp_pscA>
     84e:	28 f0       	brcs	.+10     	; 0x85a <__mulsf3+0x12>
     850:	ba df       	rcall	.-140    	; 0x7c6 <__fp_pscB>
     852:	18 f0       	brcs	.+6      	; 0x85a <__mulsf3+0x12>
     854:	95 23       	and	r25, r21
     856:	09 f0       	breq	.+2      	; 0x85a <__mulsf3+0x12>
     858:	a6 cf       	rjmp	.-180    	; 0x7a6 <__fp_inf>
     85a:	ab cf       	rjmp	.-170    	; 0x7b2 <__fp_nan>
     85c:	11 24       	eor	r1, r1
     85e:	ee cf       	rjmp	.-36     	; 0x83c <__fp_szero>

00000860 <__mulsf3x>:
     860:	ca df       	rcall	.-108    	; 0x7f6 <__fp_split3>
     862:	a0 f3       	brcs	.-24     	; 0x84c <__mulsf3+0x4>

00000864 <__mulsf3_pse>:
     864:	95 9f       	mul	r25, r21
     866:	d1 f3       	breq	.-12     	; 0x85c <__mulsf3+0x14>
     868:	95 0f       	add	r25, r21
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	55 1f       	adc	r21, r21
     86e:	62 9f       	mul	r22, r18
     870:	f0 01       	movw	r30, r0
     872:	72 9f       	mul	r23, r18
     874:	bb 27       	eor	r27, r27
     876:	f0 0d       	add	r31, r0
     878:	b1 1d       	adc	r27, r1
     87a:	63 9f       	mul	r22, r19
     87c:	aa 27       	eor	r26, r26
     87e:	f0 0d       	add	r31, r0
     880:	b1 1d       	adc	r27, r1
     882:	aa 1f       	adc	r26, r26
     884:	64 9f       	mul	r22, r20
     886:	66 27       	eor	r22, r22
     888:	b0 0d       	add	r27, r0
     88a:	a1 1d       	adc	r26, r1
     88c:	66 1f       	adc	r22, r22
     88e:	82 9f       	mul	r24, r18
     890:	22 27       	eor	r18, r18
     892:	b0 0d       	add	r27, r0
     894:	a1 1d       	adc	r26, r1
     896:	62 1f       	adc	r22, r18
     898:	73 9f       	mul	r23, r19
     89a:	b0 0d       	add	r27, r0
     89c:	a1 1d       	adc	r26, r1
     89e:	62 1f       	adc	r22, r18
     8a0:	83 9f       	mul	r24, r19
     8a2:	a0 0d       	add	r26, r0
     8a4:	61 1d       	adc	r22, r1
     8a6:	22 1f       	adc	r18, r18
     8a8:	74 9f       	mul	r23, r20
     8aa:	33 27       	eor	r19, r19
     8ac:	a0 0d       	add	r26, r0
     8ae:	61 1d       	adc	r22, r1
     8b0:	23 1f       	adc	r18, r19
     8b2:	84 9f       	mul	r24, r20
     8b4:	60 0d       	add	r22, r0
     8b6:	21 1d       	adc	r18, r1
     8b8:	82 2f       	mov	r24, r18
     8ba:	76 2f       	mov	r23, r22
     8bc:	6a 2f       	mov	r22, r26
     8be:	11 24       	eor	r1, r1
     8c0:	9f 57       	subi	r25, 0x7F	; 127
     8c2:	50 40       	sbci	r21, 0x00	; 0
     8c4:	8a f0       	brmi	.+34     	; 0x8e8 <__mulsf3_pse+0x84>
     8c6:	e1 f0       	breq	.+56     	; 0x900 <__mulsf3_pse+0x9c>
     8c8:	88 23       	and	r24, r24
     8ca:	4a f0       	brmi	.+18     	; 0x8de <__mulsf3_pse+0x7a>
     8cc:	ee 0f       	add	r30, r30
     8ce:	ff 1f       	adc	r31, r31
     8d0:	bb 1f       	adc	r27, r27
     8d2:	66 1f       	adc	r22, r22
     8d4:	77 1f       	adc	r23, r23
     8d6:	88 1f       	adc	r24, r24
     8d8:	91 50       	subi	r25, 0x01	; 1
     8da:	50 40       	sbci	r21, 0x00	; 0
     8dc:	a9 f7       	brne	.-22     	; 0x8c8 <__mulsf3_pse+0x64>
     8de:	9e 3f       	cpi	r25, 0xFE	; 254
     8e0:	51 05       	cpc	r21, r1
     8e2:	70 f0       	brcs	.+28     	; 0x900 <__mulsf3_pse+0x9c>
     8e4:	60 cf       	rjmp	.-320    	; 0x7a6 <__fp_inf>
     8e6:	aa cf       	rjmp	.-172    	; 0x83c <__fp_szero>
     8e8:	5f 3f       	cpi	r21, 0xFF	; 255
     8ea:	ec f3       	brlt	.-6      	; 0x8e6 <__mulsf3_pse+0x82>
     8ec:	98 3e       	cpi	r25, 0xE8	; 232
     8ee:	dc f3       	brlt	.-10     	; 0x8e6 <__mulsf3_pse+0x82>
     8f0:	86 95       	lsr	r24
     8f2:	77 95       	ror	r23
     8f4:	67 95       	ror	r22
     8f6:	b7 95       	ror	r27
     8f8:	f7 95       	ror	r31
     8fa:	e7 95       	ror	r30
     8fc:	9f 5f       	subi	r25, 0xFF	; 255
     8fe:	c1 f7       	brne	.-16     	; 0x8f0 <__mulsf3_pse+0x8c>
     900:	fe 2b       	or	r31, r30
     902:	88 0f       	add	r24, r24
     904:	91 1d       	adc	r25, r1
     906:	96 95       	lsr	r25
     908:	87 95       	ror	r24
     90a:	97 f9       	bld	r25, 7
     90c:	08 95       	ret

0000090e <__divmodhi4>:
     90e:	97 fb       	bst	r25, 7
     910:	07 2e       	mov	r0, r23
     912:	16 f4       	brtc	.+4      	; 0x918 <__divmodhi4+0xa>
     914:	00 94       	com	r0
     916:	06 d0       	rcall	.+12     	; 0x924 <__divmodhi4_neg1>
     918:	77 fd       	sbrc	r23, 7
     91a:	08 d0       	rcall	.+16     	; 0x92c <__divmodhi4_neg2>
     91c:	0b d0       	rcall	.+22     	; 0x934 <__udivmodhi4>
     91e:	07 fc       	sbrc	r0, 7
     920:	05 d0       	rcall	.+10     	; 0x92c <__divmodhi4_neg2>
     922:	3e f4       	brtc	.+14     	; 0x932 <__divmodhi4_exit>

00000924 <__divmodhi4_neg1>:
     924:	90 95       	com	r25
     926:	81 95       	neg	r24
     928:	9f 4f       	sbci	r25, 0xFF	; 255
     92a:	08 95       	ret

0000092c <__divmodhi4_neg2>:
     92c:	70 95       	com	r23
     92e:	61 95       	neg	r22
     930:	7f 4f       	sbci	r23, 0xFF	; 255

00000932 <__divmodhi4_exit>:
     932:	08 95       	ret

00000934 <__udivmodhi4>:
     934:	aa 1b       	sub	r26, r26
     936:	bb 1b       	sub	r27, r27
     938:	51 e1       	ldi	r21, 0x11	; 17
     93a:	07 c0       	rjmp	.+14     	; 0x94a <__udivmodhi4_ep>

0000093c <__udivmodhi4_loop>:
     93c:	aa 1f       	adc	r26, r26
     93e:	bb 1f       	adc	r27, r27
     940:	a6 17       	cp	r26, r22
     942:	b7 07       	cpc	r27, r23
     944:	10 f0       	brcs	.+4      	; 0x94a <__udivmodhi4_ep>
     946:	a6 1b       	sub	r26, r22
     948:	b7 0b       	sbc	r27, r23

0000094a <__udivmodhi4_ep>:
     94a:	88 1f       	adc	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	5a 95       	dec	r21
     950:	a9 f7       	brne	.-22     	; 0x93c <__udivmodhi4_loop>
     952:	80 95       	com	r24
     954:	90 95       	com	r25
     956:	bc 01       	movw	r22, r24
     958:	cd 01       	movw	r24, r26
     95a:	08 95       	ret

0000095c <fdevopen>:
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	ec 01       	movw	r28, r24
     966:	8b 01       	movw	r16, r22
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	31 f4       	brne	.+12     	; 0x978 <fdevopen+0x1c>
     96c:	61 15       	cp	r22, r1
     96e:	71 05       	cpc	r23, r1
     970:	19 f4       	brne	.+6      	; 0x978 <fdevopen+0x1c>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	37 c0       	rjmp	.+110    	; 0x9e6 <fdevopen+0x8a>
     978:	6e e0       	ldi	r22, 0x0E	; 14
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	36 d2       	rcall	.+1132   	; 0xdee <calloc>
     982:	fc 01       	movw	r30, r24
     984:	00 97       	sbiw	r24, 0x00	; 0
     986:	a9 f3       	breq	.-22     	; 0x972 <fdevopen+0x16>
     988:	80 e8       	ldi	r24, 0x80	; 128
     98a:	83 83       	std	Z+3, r24	; 0x03
     98c:	01 15       	cp	r16, r1
     98e:	11 05       	cpc	r17, r1
     990:	71 f0       	breq	.+28     	; 0x9ae <fdevopen+0x52>
     992:	13 87       	std	Z+11, r17	; 0x0b
     994:	02 87       	std	Z+10, r16	; 0x0a
     996:	81 e8       	ldi	r24, 0x81	; 129
     998:	83 83       	std	Z+3, r24	; 0x03
     99a:	80 91 3c 02 	lds	r24, 0x023C
     99e:	90 91 3d 02 	lds	r25, 0x023D
     9a2:	89 2b       	or	r24, r25
     9a4:	21 f4       	brne	.+8      	; 0x9ae <fdevopen+0x52>
     9a6:	f0 93 3d 02 	sts	0x023D, r31
     9aa:	e0 93 3c 02 	sts	0x023C, r30
     9ae:	20 97       	sbiw	r28, 0x00	; 0
     9b0:	c9 f0       	breq	.+50     	; 0x9e4 <fdevopen+0x88>
     9b2:	d1 87       	std	Z+9, r29	; 0x09
     9b4:	c0 87       	std	Z+8, r28	; 0x08
     9b6:	83 81       	ldd	r24, Z+3	; 0x03
     9b8:	82 60       	ori	r24, 0x02	; 2
     9ba:	83 83       	std	Z+3, r24	; 0x03
     9bc:	80 91 3e 02 	lds	r24, 0x023E
     9c0:	90 91 3f 02 	lds	r25, 0x023F
     9c4:	89 2b       	or	r24, r25
     9c6:	71 f4       	brne	.+28     	; 0x9e4 <fdevopen+0x88>
     9c8:	f0 93 3f 02 	sts	0x023F, r31
     9cc:	e0 93 3e 02 	sts	0x023E, r30
     9d0:	80 91 40 02 	lds	r24, 0x0240
     9d4:	90 91 41 02 	lds	r25, 0x0241
     9d8:	89 2b       	or	r24, r25
     9da:	21 f4       	brne	.+8      	; 0x9e4 <fdevopen+0x88>
     9dc:	f0 93 41 02 	sts	0x0241, r31
     9e0:	e0 93 40 02 	sts	0x0240, r30
     9e4:	cf 01       	movw	r24, r30
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	08 95       	ret

000009f0 <printf>:
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	fe 01       	movw	r30, r28
     9fa:	36 96       	adiw	r30, 0x06	; 6
     9fc:	61 91       	ld	r22, Z+
     9fe:	71 91       	ld	r23, Z+
     a00:	af 01       	movw	r20, r30
     a02:	80 91 3e 02 	lds	r24, 0x023E
     a06:	90 91 3f 02 	lds	r25, 0x023F
     a0a:	03 d0       	rcall	.+6      	; 0xa12 <vfprintf>
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <vfprintf>:
     a12:	2f 92       	push	r2
     a14:	3f 92       	push	r3
     a16:	4f 92       	push	r4
     a18:	5f 92       	push	r5
     a1a:	6f 92       	push	r6
     a1c:	7f 92       	push	r7
     a1e:	8f 92       	push	r8
     a20:	9f 92       	push	r9
     a22:	af 92       	push	r10
     a24:	bf 92       	push	r11
     a26:	cf 92       	push	r12
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	2c 97       	sbiw	r28, 0x0c	; 12
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	7c 01       	movw	r14, r24
     a48:	6b 01       	movw	r12, r22
     a4a:	8a 01       	movw	r16, r20
     a4c:	fc 01       	movw	r30, r24
     a4e:	17 82       	std	Z+7, r1	; 0x07
     a50:	16 82       	std	Z+6, r1	; 0x06
     a52:	83 81       	ldd	r24, Z+3	; 0x03
     a54:	81 ff       	sbrs	r24, 1
     a56:	b0 c1       	rjmp	.+864    	; 0xdb8 <vfprintf+0x3a6>
     a58:	ce 01       	movw	r24, r28
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	4c 01       	movw	r8, r24
     a5e:	f7 01       	movw	r30, r14
     a60:	93 81       	ldd	r25, Z+3	; 0x03
     a62:	f6 01       	movw	r30, r12
     a64:	93 fd       	sbrc	r25, 3
     a66:	85 91       	lpm	r24, Z+
     a68:	93 ff       	sbrs	r25, 3
     a6a:	81 91       	ld	r24, Z+
     a6c:	6f 01       	movw	r12, r30
     a6e:	88 23       	and	r24, r24
     a70:	09 f4       	brne	.+2      	; 0xa74 <vfprintf+0x62>
     a72:	9e c1       	rjmp	.+828    	; 0xdb0 <vfprintf+0x39e>
     a74:	85 32       	cpi	r24, 0x25	; 37
     a76:	39 f4       	brne	.+14     	; 0xa86 <vfprintf+0x74>
     a78:	93 fd       	sbrc	r25, 3
     a7a:	85 91       	lpm	r24, Z+
     a7c:	93 ff       	sbrs	r25, 3
     a7e:	81 91       	ld	r24, Z+
     a80:	6f 01       	movw	r12, r30
     a82:	85 32       	cpi	r24, 0x25	; 37
     a84:	21 f4       	brne	.+8      	; 0xa8e <vfprintf+0x7c>
     a86:	b7 01       	movw	r22, r14
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0f d3       	rcall	.+1566   	; 0x10aa <fputc>
     a8c:	e8 cf       	rjmp	.-48     	; 0xa5e <vfprintf+0x4c>
     a8e:	51 2c       	mov	r5, r1
     a90:	31 2c       	mov	r3, r1
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	20 32       	cpi	r18, 0x20	; 32
     a96:	a0 f4       	brcc	.+40     	; 0xac0 <vfprintf+0xae>
     a98:	8b 32       	cpi	r24, 0x2B	; 43
     a9a:	69 f0       	breq	.+26     	; 0xab6 <vfprintf+0xa4>
     a9c:	30 f4       	brcc	.+12     	; 0xaaa <vfprintf+0x98>
     a9e:	80 32       	cpi	r24, 0x20	; 32
     aa0:	59 f0       	breq	.+22     	; 0xab8 <vfprintf+0xa6>
     aa2:	83 32       	cpi	r24, 0x23	; 35
     aa4:	69 f4       	brne	.+26     	; 0xac0 <vfprintf+0xae>
     aa6:	20 61       	ori	r18, 0x10	; 16
     aa8:	2c c0       	rjmp	.+88     	; 0xb02 <vfprintf+0xf0>
     aaa:	8d 32       	cpi	r24, 0x2D	; 45
     aac:	39 f0       	breq	.+14     	; 0xabc <vfprintf+0xaa>
     aae:	80 33       	cpi	r24, 0x30	; 48
     ab0:	39 f4       	brne	.+14     	; 0xac0 <vfprintf+0xae>
     ab2:	21 60       	ori	r18, 0x01	; 1
     ab4:	26 c0       	rjmp	.+76     	; 0xb02 <vfprintf+0xf0>
     ab6:	22 60       	ori	r18, 0x02	; 2
     ab8:	24 60       	ori	r18, 0x04	; 4
     aba:	23 c0       	rjmp	.+70     	; 0xb02 <vfprintf+0xf0>
     abc:	28 60       	ori	r18, 0x08	; 8
     abe:	21 c0       	rjmp	.+66     	; 0xb02 <vfprintf+0xf0>
     ac0:	27 fd       	sbrc	r18, 7
     ac2:	27 c0       	rjmp	.+78     	; 0xb12 <vfprintf+0x100>
     ac4:	30 ed       	ldi	r19, 0xD0	; 208
     ac6:	38 0f       	add	r19, r24
     ac8:	3a 30       	cpi	r19, 0x0A	; 10
     aca:	78 f4       	brcc	.+30     	; 0xaea <vfprintf+0xd8>
     acc:	26 ff       	sbrs	r18, 6
     ace:	06 c0       	rjmp	.+12     	; 0xadc <vfprintf+0xca>
     ad0:	fa e0       	ldi	r31, 0x0A	; 10
     ad2:	5f 9e       	mul	r5, r31
     ad4:	30 0d       	add	r19, r0
     ad6:	11 24       	eor	r1, r1
     ad8:	53 2e       	mov	r5, r19
     ada:	13 c0       	rjmp	.+38     	; 0xb02 <vfprintf+0xf0>
     adc:	8a e0       	ldi	r24, 0x0A	; 10
     ade:	38 9e       	mul	r3, r24
     ae0:	30 0d       	add	r19, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	33 2e       	mov	r3, r19
     ae6:	20 62       	ori	r18, 0x20	; 32
     ae8:	0c c0       	rjmp	.+24     	; 0xb02 <vfprintf+0xf0>
     aea:	8e 32       	cpi	r24, 0x2E	; 46
     aec:	21 f4       	brne	.+8      	; 0xaf6 <vfprintf+0xe4>
     aee:	26 fd       	sbrc	r18, 6
     af0:	5f c1       	rjmp	.+702    	; 0xdb0 <vfprintf+0x39e>
     af2:	20 64       	ori	r18, 0x40	; 64
     af4:	06 c0       	rjmp	.+12     	; 0xb02 <vfprintf+0xf0>
     af6:	8c 36       	cpi	r24, 0x6C	; 108
     af8:	11 f4       	brne	.+4      	; 0xafe <vfprintf+0xec>
     afa:	20 68       	ori	r18, 0x80	; 128
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <vfprintf+0xf0>
     afe:	88 36       	cpi	r24, 0x68	; 104
     b00:	41 f4       	brne	.+16     	; 0xb12 <vfprintf+0x100>
     b02:	f6 01       	movw	r30, r12
     b04:	93 fd       	sbrc	r25, 3
     b06:	85 91       	lpm	r24, Z+
     b08:	93 ff       	sbrs	r25, 3
     b0a:	81 91       	ld	r24, Z+
     b0c:	6f 01       	movw	r12, r30
     b0e:	81 11       	cpse	r24, r1
     b10:	c1 cf       	rjmp	.-126    	; 0xa94 <vfprintf+0x82>
     b12:	98 2f       	mov	r25, r24
     b14:	9f 7d       	andi	r25, 0xDF	; 223
     b16:	95 54       	subi	r25, 0x45	; 69
     b18:	93 30       	cpi	r25, 0x03	; 3
     b1a:	28 f4       	brcc	.+10     	; 0xb26 <vfprintf+0x114>
     b1c:	0c 5f       	subi	r16, 0xFC	; 252
     b1e:	1f 4f       	sbci	r17, 0xFF	; 255
     b20:	ff e3       	ldi	r31, 0x3F	; 63
     b22:	f9 83       	std	Y+1, r31	; 0x01
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <vfprintf+0x12e>
     b26:	83 36       	cpi	r24, 0x63	; 99
     b28:	31 f0       	breq	.+12     	; 0xb36 <vfprintf+0x124>
     b2a:	83 37       	cpi	r24, 0x73	; 115
     b2c:	71 f0       	breq	.+28     	; 0xb4a <vfprintf+0x138>
     b2e:	83 35       	cpi	r24, 0x53	; 83
     b30:	09 f0       	breq	.+2      	; 0xb34 <vfprintf+0x122>
     b32:	57 c0       	rjmp	.+174    	; 0xbe2 <vfprintf+0x1d0>
     b34:	21 c0       	rjmp	.+66     	; 0xb78 <vfprintf+0x166>
     b36:	f8 01       	movw	r30, r16
     b38:	80 81       	ld	r24, Z
     b3a:	89 83       	std	Y+1, r24	; 0x01
     b3c:	0e 5f       	subi	r16, 0xFE	; 254
     b3e:	1f 4f       	sbci	r17, 0xFF	; 255
     b40:	44 24       	eor	r4, r4
     b42:	43 94       	inc	r4
     b44:	51 2c       	mov	r5, r1
     b46:	54 01       	movw	r10, r8
     b48:	14 c0       	rjmp	.+40     	; 0xb72 <vfprintf+0x160>
     b4a:	38 01       	movw	r6, r16
     b4c:	f2 e0       	ldi	r31, 0x02	; 2
     b4e:	6f 0e       	add	r6, r31
     b50:	71 1c       	adc	r7, r1
     b52:	f8 01       	movw	r30, r16
     b54:	a0 80       	ld	r10, Z
     b56:	b1 80       	ldd	r11, Z+1	; 0x01
     b58:	26 ff       	sbrs	r18, 6
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <vfprintf+0x150>
     b5c:	65 2d       	mov	r22, r5
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <vfprintf+0x154>
     b62:	6f ef       	ldi	r22, 0xFF	; 255
     b64:	7f ef       	ldi	r23, 0xFF	; 255
     b66:	c5 01       	movw	r24, r10
     b68:	2c 87       	std	Y+12, r18	; 0x0c
     b6a:	94 d2       	rcall	.+1320   	; 0x1094 <strnlen>
     b6c:	2c 01       	movw	r4, r24
     b6e:	83 01       	movw	r16, r6
     b70:	2c 85       	ldd	r18, Y+12	; 0x0c
     b72:	2f 77       	andi	r18, 0x7F	; 127
     b74:	22 2e       	mov	r2, r18
     b76:	16 c0       	rjmp	.+44     	; 0xba4 <vfprintf+0x192>
     b78:	38 01       	movw	r6, r16
     b7a:	f2 e0       	ldi	r31, 0x02	; 2
     b7c:	6f 0e       	add	r6, r31
     b7e:	71 1c       	adc	r7, r1
     b80:	f8 01       	movw	r30, r16
     b82:	a0 80       	ld	r10, Z
     b84:	b1 80       	ldd	r11, Z+1	; 0x01
     b86:	26 ff       	sbrs	r18, 6
     b88:	03 c0       	rjmp	.+6      	; 0xb90 <vfprintf+0x17e>
     b8a:	65 2d       	mov	r22, r5
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <vfprintf+0x182>
     b90:	6f ef       	ldi	r22, 0xFF	; 255
     b92:	7f ef       	ldi	r23, 0xFF	; 255
     b94:	c5 01       	movw	r24, r10
     b96:	2c 87       	std	Y+12, r18	; 0x0c
     b98:	6b d2       	rcall	.+1238   	; 0x1070 <strnlen_P>
     b9a:	2c 01       	movw	r4, r24
     b9c:	2c 85       	ldd	r18, Y+12	; 0x0c
     b9e:	20 68       	ori	r18, 0x80	; 128
     ba0:	22 2e       	mov	r2, r18
     ba2:	83 01       	movw	r16, r6
     ba4:	23 fc       	sbrc	r2, 3
     ba6:	19 c0       	rjmp	.+50     	; 0xbda <vfprintf+0x1c8>
     ba8:	83 2d       	mov	r24, r3
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	48 16       	cp	r4, r24
     bae:	59 06       	cpc	r5, r25
     bb0:	a0 f4       	brcc	.+40     	; 0xbda <vfprintf+0x1c8>
     bb2:	b7 01       	movw	r22, r14
     bb4:	80 e2       	ldi	r24, 0x20	; 32
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	78 d2       	rcall	.+1264   	; 0x10aa <fputc>
     bba:	3a 94       	dec	r3
     bbc:	f5 cf       	rjmp	.-22     	; 0xba8 <vfprintf+0x196>
     bbe:	f5 01       	movw	r30, r10
     bc0:	27 fc       	sbrc	r2, 7
     bc2:	85 91       	lpm	r24, Z+
     bc4:	27 fe       	sbrs	r2, 7
     bc6:	81 91       	ld	r24, Z+
     bc8:	5f 01       	movw	r10, r30
     bca:	b7 01       	movw	r22, r14
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	6d d2       	rcall	.+1242   	; 0x10aa <fputc>
     bd0:	31 10       	cpse	r3, r1
     bd2:	3a 94       	dec	r3
     bd4:	f1 e0       	ldi	r31, 0x01	; 1
     bd6:	4f 1a       	sub	r4, r31
     bd8:	51 08       	sbc	r5, r1
     bda:	41 14       	cp	r4, r1
     bdc:	51 04       	cpc	r5, r1
     bde:	79 f7       	brne	.-34     	; 0xbbe <vfprintf+0x1ac>
     be0:	de c0       	rjmp	.+444    	; 0xd9e <vfprintf+0x38c>
     be2:	84 36       	cpi	r24, 0x64	; 100
     be4:	11 f0       	breq	.+4      	; 0xbea <vfprintf+0x1d8>
     be6:	89 36       	cpi	r24, 0x69	; 105
     be8:	31 f5       	brne	.+76     	; 0xc36 <vfprintf+0x224>
     bea:	f8 01       	movw	r30, r16
     bec:	27 ff       	sbrs	r18, 7
     bee:	07 c0       	rjmp	.+14     	; 0xbfe <vfprintf+0x1ec>
     bf0:	60 81       	ld	r22, Z
     bf2:	71 81       	ldd	r23, Z+1	; 0x01
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	0c 5f       	subi	r16, 0xFC	; 252
     bfa:	1f 4f       	sbci	r17, 0xFF	; 255
     bfc:	08 c0       	rjmp	.+16     	; 0xc0e <vfprintf+0x1fc>
     bfe:	60 81       	ld	r22, Z
     c00:	71 81       	ldd	r23, Z+1	; 0x01
     c02:	88 27       	eor	r24, r24
     c04:	77 fd       	sbrc	r23, 7
     c06:	80 95       	com	r24
     c08:	98 2f       	mov	r25, r24
     c0a:	0e 5f       	subi	r16, 0xFE	; 254
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
     c0e:	2f 76       	andi	r18, 0x6F	; 111
     c10:	b2 2e       	mov	r11, r18
     c12:	97 ff       	sbrs	r25, 7
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <vfprintf+0x216>
     c16:	90 95       	com	r25
     c18:	80 95       	com	r24
     c1a:	70 95       	com	r23
     c1c:	61 95       	neg	r22
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	8f 4f       	sbci	r24, 0xFF	; 255
     c22:	9f 4f       	sbci	r25, 0xFF	; 255
     c24:	20 68       	ori	r18, 0x80	; 128
     c26:	b2 2e       	mov	r11, r18
     c28:	2a e0       	ldi	r18, 0x0A	; 10
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	a4 01       	movw	r20, r8
     c2e:	6f d2       	rcall	.+1246   	; 0x110e <__ultoa_invert>
     c30:	a8 2e       	mov	r10, r24
     c32:	a8 18       	sub	r10, r8
     c34:	43 c0       	rjmp	.+134    	; 0xcbc <vfprintf+0x2aa>
     c36:	85 37       	cpi	r24, 0x75	; 117
     c38:	29 f4       	brne	.+10     	; 0xc44 <vfprintf+0x232>
     c3a:	2f 7e       	andi	r18, 0xEF	; 239
     c3c:	b2 2e       	mov	r11, r18
     c3e:	2a e0       	ldi	r18, 0x0A	; 10
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	25 c0       	rjmp	.+74     	; 0xc8e <vfprintf+0x27c>
     c44:	f2 2f       	mov	r31, r18
     c46:	f9 7f       	andi	r31, 0xF9	; 249
     c48:	bf 2e       	mov	r11, r31
     c4a:	8f 36       	cpi	r24, 0x6F	; 111
     c4c:	c1 f0       	breq	.+48     	; 0xc7e <vfprintf+0x26c>
     c4e:	18 f4       	brcc	.+6      	; 0xc56 <vfprintf+0x244>
     c50:	88 35       	cpi	r24, 0x58	; 88
     c52:	79 f0       	breq	.+30     	; 0xc72 <vfprintf+0x260>
     c54:	ad c0       	rjmp	.+346    	; 0xdb0 <vfprintf+0x39e>
     c56:	80 37       	cpi	r24, 0x70	; 112
     c58:	19 f0       	breq	.+6      	; 0xc60 <vfprintf+0x24e>
     c5a:	88 37       	cpi	r24, 0x78	; 120
     c5c:	21 f0       	breq	.+8      	; 0xc66 <vfprintf+0x254>
     c5e:	a8 c0       	rjmp	.+336    	; 0xdb0 <vfprintf+0x39e>
     c60:	2f 2f       	mov	r18, r31
     c62:	20 61       	ori	r18, 0x10	; 16
     c64:	b2 2e       	mov	r11, r18
     c66:	b4 fe       	sbrs	r11, 4
     c68:	0d c0       	rjmp	.+26     	; 0xc84 <vfprintf+0x272>
     c6a:	8b 2d       	mov	r24, r11
     c6c:	84 60       	ori	r24, 0x04	; 4
     c6e:	b8 2e       	mov	r11, r24
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <vfprintf+0x272>
     c72:	24 ff       	sbrs	r18, 4
     c74:	0a c0       	rjmp	.+20     	; 0xc8a <vfprintf+0x278>
     c76:	9f 2f       	mov	r25, r31
     c78:	96 60       	ori	r25, 0x06	; 6
     c7a:	b9 2e       	mov	r11, r25
     c7c:	06 c0       	rjmp	.+12     	; 0xc8a <vfprintf+0x278>
     c7e:	28 e0       	ldi	r18, 0x08	; 8
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <vfprintf+0x27c>
     c84:	20 e1       	ldi	r18, 0x10	; 16
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <vfprintf+0x27c>
     c8a:	20 e1       	ldi	r18, 0x10	; 16
     c8c:	32 e0       	ldi	r19, 0x02	; 2
     c8e:	f8 01       	movw	r30, r16
     c90:	b7 fe       	sbrs	r11, 7
     c92:	07 c0       	rjmp	.+14     	; 0xca2 <vfprintf+0x290>
     c94:	60 81       	ld	r22, Z
     c96:	71 81       	ldd	r23, Z+1	; 0x01
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	93 81       	ldd	r25, Z+3	; 0x03
     c9c:	0c 5f       	subi	r16, 0xFC	; 252
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <vfprintf+0x29c>
     ca2:	60 81       	ld	r22, Z
     ca4:	71 81       	ldd	r23, Z+1	; 0x01
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 5f       	subi	r16, 0xFE	; 254
     cac:	1f 4f       	sbci	r17, 0xFF	; 255
     cae:	a4 01       	movw	r20, r8
     cb0:	2e d2       	rcall	.+1116   	; 0x110e <__ultoa_invert>
     cb2:	a8 2e       	mov	r10, r24
     cb4:	a8 18       	sub	r10, r8
     cb6:	fb 2d       	mov	r31, r11
     cb8:	ff 77       	andi	r31, 0x7F	; 127
     cba:	bf 2e       	mov	r11, r31
     cbc:	b6 fe       	sbrs	r11, 6
     cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <vfprintf+0x2c4>
     cc0:	2b 2d       	mov	r18, r11
     cc2:	2e 7f       	andi	r18, 0xFE	; 254
     cc4:	a5 14       	cp	r10, r5
     cc6:	50 f4       	brcc	.+20     	; 0xcdc <vfprintf+0x2ca>
     cc8:	b4 fe       	sbrs	r11, 4
     cca:	0a c0       	rjmp	.+20     	; 0xce0 <vfprintf+0x2ce>
     ccc:	b2 fc       	sbrc	r11, 2
     cce:	08 c0       	rjmp	.+16     	; 0xce0 <vfprintf+0x2ce>
     cd0:	2b 2d       	mov	r18, r11
     cd2:	2e 7e       	andi	r18, 0xEE	; 238
     cd4:	05 c0       	rjmp	.+10     	; 0xce0 <vfprintf+0x2ce>
     cd6:	7a 2c       	mov	r7, r10
     cd8:	2b 2d       	mov	r18, r11
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <vfprintf+0x2d0>
     cdc:	7a 2c       	mov	r7, r10
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <vfprintf+0x2d0>
     ce0:	75 2c       	mov	r7, r5
     ce2:	24 ff       	sbrs	r18, 4
     ce4:	0d c0       	rjmp	.+26     	; 0xd00 <vfprintf+0x2ee>
     ce6:	fe 01       	movw	r30, r28
     ce8:	ea 0d       	add	r30, r10
     cea:	f1 1d       	adc	r31, r1
     cec:	80 81       	ld	r24, Z
     cee:	80 33       	cpi	r24, 0x30	; 48
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <vfprintf+0x2e4>
     cf2:	29 7e       	andi	r18, 0xE9	; 233
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <vfprintf+0x2f6>
     cf6:	22 ff       	sbrs	r18, 2
     cf8:	06 c0       	rjmp	.+12     	; 0xd06 <vfprintf+0x2f4>
     cfa:	73 94       	inc	r7
     cfc:	73 94       	inc	r7
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <vfprintf+0x2f6>
     d00:	82 2f       	mov	r24, r18
     d02:	86 78       	andi	r24, 0x86	; 134
     d04:	09 f0       	breq	.+2      	; 0xd08 <vfprintf+0x2f6>
     d06:	73 94       	inc	r7
     d08:	23 fd       	sbrc	r18, 3
     d0a:	12 c0       	rjmp	.+36     	; 0xd30 <vfprintf+0x31e>
     d0c:	20 ff       	sbrs	r18, 0
     d0e:	06 c0       	rjmp	.+12     	; 0xd1c <vfprintf+0x30a>
     d10:	5a 2c       	mov	r5, r10
     d12:	73 14       	cp	r7, r3
     d14:	18 f4       	brcc	.+6      	; 0xd1c <vfprintf+0x30a>
     d16:	53 0c       	add	r5, r3
     d18:	57 18       	sub	r5, r7
     d1a:	73 2c       	mov	r7, r3
     d1c:	73 14       	cp	r7, r3
     d1e:	60 f4       	brcc	.+24     	; 0xd38 <vfprintf+0x326>
     d20:	b7 01       	movw	r22, r14
     d22:	80 e2       	ldi	r24, 0x20	; 32
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	2c 87       	std	Y+12, r18	; 0x0c
     d28:	c0 d1       	rcall	.+896    	; 0x10aa <fputc>
     d2a:	73 94       	inc	r7
     d2c:	2c 85       	ldd	r18, Y+12	; 0x0c
     d2e:	f6 cf       	rjmp	.-20     	; 0xd1c <vfprintf+0x30a>
     d30:	73 14       	cp	r7, r3
     d32:	10 f4       	brcc	.+4      	; 0xd38 <vfprintf+0x326>
     d34:	37 18       	sub	r3, r7
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <vfprintf+0x328>
     d38:	31 2c       	mov	r3, r1
     d3a:	24 ff       	sbrs	r18, 4
     d3c:	11 c0       	rjmp	.+34     	; 0xd60 <vfprintf+0x34e>
     d3e:	b7 01       	movw	r22, r14
     d40:	80 e3       	ldi	r24, 0x30	; 48
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	2c 87       	std	Y+12, r18	; 0x0c
     d46:	b1 d1       	rcall	.+866    	; 0x10aa <fputc>
     d48:	2c 85       	ldd	r18, Y+12	; 0x0c
     d4a:	22 ff       	sbrs	r18, 2
     d4c:	16 c0       	rjmp	.+44     	; 0xd7a <vfprintf+0x368>
     d4e:	21 ff       	sbrs	r18, 1
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <vfprintf+0x346>
     d52:	88 e5       	ldi	r24, 0x58	; 88
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <vfprintf+0x34a>
     d58:	88 e7       	ldi	r24, 0x78	; 120
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	b7 01       	movw	r22, r14
     d5e:	0c c0       	rjmp	.+24     	; 0xd78 <vfprintf+0x366>
     d60:	82 2f       	mov	r24, r18
     d62:	86 78       	andi	r24, 0x86	; 134
     d64:	51 f0       	breq	.+20     	; 0xd7a <vfprintf+0x368>
     d66:	21 fd       	sbrc	r18, 1
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <vfprintf+0x35c>
     d6a:	80 e2       	ldi	r24, 0x20	; 32
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <vfprintf+0x35e>
     d6e:	8b e2       	ldi	r24, 0x2B	; 43
     d70:	27 fd       	sbrc	r18, 7
     d72:	8d e2       	ldi	r24, 0x2D	; 45
     d74:	b7 01       	movw	r22, r14
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	98 d1       	rcall	.+816    	; 0x10aa <fputc>
     d7a:	a5 14       	cp	r10, r5
     d7c:	30 f4       	brcc	.+12     	; 0xd8a <vfprintf+0x378>
     d7e:	b7 01       	movw	r22, r14
     d80:	80 e3       	ldi	r24, 0x30	; 48
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	92 d1       	rcall	.+804    	; 0x10aa <fputc>
     d86:	5a 94       	dec	r5
     d88:	f8 cf       	rjmp	.-16     	; 0xd7a <vfprintf+0x368>
     d8a:	aa 94       	dec	r10
     d8c:	f4 01       	movw	r30, r8
     d8e:	ea 0d       	add	r30, r10
     d90:	f1 1d       	adc	r31, r1
     d92:	80 81       	ld	r24, Z
     d94:	b7 01       	movw	r22, r14
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	88 d1       	rcall	.+784    	; 0x10aa <fputc>
     d9a:	a1 10       	cpse	r10, r1
     d9c:	f6 cf       	rjmp	.-20     	; 0xd8a <vfprintf+0x378>
     d9e:	33 20       	and	r3, r3
     da0:	09 f4       	brne	.+2      	; 0xda4 <vfprintf+0x392>
     da2:	5d ce       	rjmp	.-838    	; 0xa5e <vfprintf+0x4c>
     da4:	b7 01       	movw	r22, r14
     da6:	80 e2       	ldi	r24, 0x20	; 32
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	7f d1       	rcall	.+766    	; 0x10aa <fputc>
     dac:	3a 94       	dec	r3
     dae:	f7 cf       	rjmp	.-18     	; 0xd9e <vfprintf+0x38c>
     db0:	f7 01       	movw	r30, r14
     db2:	86 81       	ldd	r24, Z+6	; 0x06
     db4:	97 81       	ldd	r25, Z+7	; 0x07
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <vfprintf+0x3aa>
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	9f ef       	ldi	r25, 0xFF	; 255
     dbc:	2c 96       	adiw	r28, 0x0c	; 12
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	ef 90       	pop	r14
     dd4:	df 90       	pop	r13
     dd6:	cf 90       	pop	r12
     dd8:	bf 90       	pop	r11
     dda:	af 90       	pop	r10
     ddc:	9f 90       	pop	r9
     dde:	8f 90       	pop	r8
     de0:	7f 90       	pop	r7
     de2:	6f 90       	pop	r6
     de4:	5f 90       	pop	r5
     de6:	4f 90       	pop	r4
     de8:	3f 90       	pop	r3
     dea:	2f 90       	pop	r2
     dec:	08 95       	ret

00000dee <calloc>:
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	86 9f       	mul	r24, r22
     df8:	80 01       	movw	r16, r0
     dfa:	87 9f       	mul	r24, r23
     dfc:	10 0d       	add	r17, r0
     dfe:	96 9f       	mul	r25, r22
     e00:	10 0d       	add	r17, r0
     e02:	11 24       	eor	r1, r1
     e04:	c8 01       	movw	r24, r16
     e06:	0d d0       	rcall	.+26     	; 0xe22 <malloc>
     e08:	ec 01       	movw	r28, r24
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	21 f0       	breq	.+8      	; 0xe16 <calloc+0x28>
     e0e:	a8 01       	movw	r20, r16
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	38 d1       	rcall	.+624    	; 0x1086 <memset>
     e16:	ce 01       	movw	r24, r28
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <malloc>:
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	91 05       	cpc	r25, r1
     e2a:	10 f4       	brcc	.+4      	; 0xe30 <malloc+0xe>
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	e0 91 44 02 	lds	r30, 0x0244
     e34:	f0 91 45 02 	lds	r31, 0x0245
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	a0 e0       	ldi	r26, 0x00	; 0
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	30 97       	sbiw	r30, 0x00	; 0
     e42:	39 f1       	breq	.+78     	; 0xe92 <malloc+0x70>
     e44:	40 81       	ld	r20, Z
     e46:	51 81       	ldd	r21, Z+1	; 0x01
     e48:	48 17       	cp	r20, r24
     e4a:	59 07       	cpc	r21, r25
     e4c:	b8 f0       	brcs	.+46     	; 0xe7c <malloc+0x5a>
     e4e:	48 17       	cp	r20, r24
     e50:	59 07       	cpc	r21, r25
     e52:	71 f4       	brne	.+28     	; 0xe70 <malloc+0x4e>
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	10 97       	sbiw	r26, 0x00	; 0
     e5a:	29 f0       	breq	.+10     	; 0xe66 <malloc+0x44>
     e5c:	13 96       	adiw	r26, 0x03	; 3
     e5e:	9c 93       	st	X, r25
     e60:	8e 93       	st	-X, r24
     e62:	12 97       	sbiw	r26, 0x02	; 2
     e64:	2c c0       	rjmp	.+88     	; 0xebe <malloc+0x9c>
     e66:	90 93 45 02 	sts	0x0245, r25
     e6a:	80 93 44 02 	sts	0x0244, r24
     e6e:	27 c0       	rjmp	.+78     	; 0xebe <malloc+0x9c>
     e70:	21 15       	cp	r18, r1
     e72:	31 05       	cpc	r19, r1
     e74:	31 f0       	breq	.+12     	; 0xe82 <malloc+0x60>
     e76:	42 17       	cp	r20, r18
     e78:	53 07       	cpc	r21, r19
     e7a:	18 f0       	brcs	.+6      	; 0xe82 <malloc+0x60>
     e7c:	a9 01       	movw	r20, r18
     e7e:	db 01       	movw	r26, r22
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <malloc+0x62>
     e82:	ef 01       	movw	r28, r30
     e84:	9a 01       	movw	r18, r20
     e86:	bd 01       	movw	r22, r26
     e88:	df 01       	movw	r26, r30
     e8a:	02 80       	ldd	r0, Z+2	; 0x02
     e8c:	f3 81       	ldd	r31, Z+3	; 0x03
     e8e:	e0 2d       	mov	r30, r0
     e90:	d7 cf       	rjmp	.-82     	; 0xe40 <malloc+0x1e>
     e92:	21 15       	cp	r18, r1
     e94:	31 05       	cpc	r19, r1
     e96:	f9 f0       	breq	.+62     	; 0xed6 <malloc+0xb4>
     e98:	28 1b       	sub	r18, r24
     e9a:	39 0b       	sbc	r19, r25
     e9c:	24 30       	cpi	r18, 0x04	; 4
     e9e:	31 05       	cpc	r19, r1
     ea0:	80 f4       	brcc	.+32     	; 0xec2 <malloc+0xa0>
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	9b 81       	ldd	r25, Y+3	; 0x03
     ea6:	61 15       	cp	r22, r1
     ea8:	71 05       	cpc	r23, r1
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <malloc+0x92>
     eac:	fb 01       	movw	r30, r22
     eae:	93 83       	std	Z+3, r25	; 0x03
     eb0:	82 83       	std	Z+2, r24	; 0x02
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <malloc+0x9a>
     eb4:	90 93 45 02 	sts	0x0245, r25
     eb8:	80 93 44 02 	sts	0x0244, r24
     ebc:	fe 01       	movw	r30, r28
     ebe:	32 96       	adiw	r30, 0x02	; 2
     ec0:	44 c0       	rjmp	.+136    	; 0xf4a <malloc+0x128>
     ec2:	fe 01       	movw	r30, r28
     ec4:	e2 0f       	add	r30, r18
     ec6:	f3 1f       	adc	r31, r19
     ec8:	81 93       	st	Z+, r24
     eca:	91 93       	st	Z+, r25
     ecc:	22 50       	subi	r18, 0x02	; 2
     ece:	31 09       	sbc	r19, r1
     ed0:	39 83       	std	Y+1, r19	; 0x01
     ed2:	28 83       	st	Y, r18
     ed4:	3a c0       	rjmp	.+116    	; 0xf4a <malloc+0x128>
     ed6:	20 91 42 02 	lds	r18, 0x0242
     eda:	30 91 43 02 	lds	r19, 0x0243
     ede:	23 2b       	or	r18, r19
     ee0:	41 f4       	brne	.+16     	; 0xef2 <malloc+0xd0>
     ee2:	20 91 02 02 	lds	r18, 0x0202
     ee6:	30 91 03 02 	lds	r19, 0x0203
     eea:	30 93 43 02 	sts	0x0243, r19
     eee:	20 93 42 02 	sts	0x0242, r18
     ef2:	20 91 00 02 	lds	r18, 0x0200
     ef6:	30 91 01 02 	lds	r19, 0x0201
     efa:	21 15       	cp	r18, r1
     efc:	31 05       	cpc	r19, r1
     efe:	41 f4       	brne	.+16     	; 0xf10 <malloc+0xee>
     f00:	2d b7       	in	r18, 0x3d	; 61
     f02:	3e b7       	in	r19, 0x3e	; 62
     f04:	40 91 04 02 	lds	r20, 0x0204
     f08:	50 91 05 02 	lds	r21, 0x0205
     f0c:	24 1b       	sub	r18, r20
     f0e:	35 0b       	sbc	r19, r21
     f10:	e0 91 42 02 	lds	r30, 0x0242
     f14:	f0 91 43 02 	lds	r31, 0x0243
     f18:	e2 17       	cp	r30, r18
     f1a:	f3 07       	cpc	r31, r19
     f1c:	a0 f4       	brcc	.+40     	; 0xf46 <malloc+0x124>
     f1e:	2e 1b       	sub	r18, r30
     f20:	3f 0b       	sbc	r19, r31
     f22:	28 17       	cp	r18, r24
     f24:	39 07       	cpc	r19, r25
     f26:	78 f0       	brcs	.+30     	; 0xf46 <malloc+0x124>
     f28:	ac 01       	movw	r20, r24
     f2a:	4e 5f       	subi	r20, 0xFE	; 254
     f2c:	5f 4f       	sbci	r21, 0xFF	; 255
     f2e:	24 17       	cp	r18, r20
     f30:	35 07       	cpc	r19, r21
     f32:	48 f0       	brcs	.+18     	; 0xf46 <malloc+0x124>
     f34:	4e 0f       	add	r20, r30
     f36:	5f 1f       	adc	r21, r31
     f38:	50 93 43 02 	sts	0x0243, r21
     f3c:	40 93 42 02 	sts	0x0242, r20
     f40:	81 93       	st	Z+, r24
     f42:	91 93       	st	Z+, r25
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <malloc+0x128>
     f46:	e0 e0       	ldi	r30, 0x00	; 0
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	cf 01       	movw	r24, r30
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <free>:
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	09 f4       	brne	.+2      	; 0xf5c <free+0xa>
     f5a:	87 c0       	rjmp	.+270    	; 0x106a <free+0x118>
     f5c:	fc 01       	movw	r30, r24
     f5e:	32 97       	sbiw	r30, 0x02	; 2
     f60:	13 82       	std	Z+3, r1	; 0x03
     f62:	12 82       	std	Z+2, r1	; 0x02
     f64:	c0 91 44 02 	lds	r28, 0x0244
     f68:	d0 91 45 02 	lds	r29, 0x0245
     f6c:	20 97       	sbiw	r28, 0x00	; 0
     f6e:	81 f4       	brne	.+32     	; 0xf90 <free+0x3e>
     f70:	20 81       	ld	r18, Z
     f72:	31 81       	ldd	r19, Z+1	; 0x01
     f74:	28 0f       	add	r18, r24
     f76:	39 1f       	adc	r19, r25
     f78:	80 91 42 02 	lds	r24, 0x0242
     f7c:	90 91 43 02 	lds	r25, 0x0243
     f80:	82 17       	cp	r24, r18
     f82:	93 07       	cpc	r25, r19
     f84:	79 f5       	brne	.+94     	; 0xfe4 <free+0x92>
     f86:	f0 93 43 02 	sts	0x0243, r31
     f8a:	e0 93 42 02 	sts	0x0242, r30
     f8e:	6d c0       	rjmp	.+218    	; 0x106a <free+0x118>
     f90:	de 01       	movw	r26, r28
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	ae 17       	cp	r26, r30
     f98:	bf 07       	cpc	r27, r31
     f9a:	50 f4       	brcc	.+20     	; 0xfb0 <free+0x5e>
     f9c:	12 96       	adiw	r26, 0x02	; 2
     f9e:	4d 91       	ld	r20, X+
     fa0:	5c 91       	ld	r21, X
     fa2:	13 97       	sbiw	r26, 0x03	; 3
     fa4:	9d 01       	movw	r18, r26
     fa6:	41 15       	cp	r20, r1
     fa8:	51 05       	cpc	r21, r1
     faa:	09 f1       	breq	.+66     	; 0xfee <free+0x9c>
     fac:	da 01       	movw	r26, r20
     fae:	f3 cf       	rjmp	.-26     	; 0xf96 <free+0x44>
     fb0:	b3 83       	std	Z+3, r27	; 0x03
     fb2:	a2 83       	std	Z+2, r26	; 0x02
     fb4:	40 81       	ld	r20, Z
     fb6:	51 81       	ldd	r21, Z+1	; 0x01
     fb8:	84 0f       	add	r24, r20
     fba:	95 1f       	adc	r25, r21
     fbc:	8a 17       	cp	r24, r26
     fbe:	9b 07       	cpc	r25, r27
     fc0:	71 f4       	brne	.+28     	; 0xfde <free+0x8c>
     fc2:	8d 91       	ld	r24, X+
     fc4:	9c 91       	ld	r25, X
     fc6:	11 97       	sbiw	r26, 0x01	; 1
     fc8:	84 0f       	add	r24, r20
     fca:	95 1f       	adc	r25, r21
     fcc:	02 96       	adiw	r24, 0x02	; 2
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	80 83       	st	Z, r24
     fd2:	12 96       	adiw	r26, 0x02	; 2
     fd4:	8d 91       	ld	r24, X+
     fd6:	9c 91       	ld	r25, X
     fd8:	13 97       	sbiw	r26, 0x03	; 3
     fda:	93 83       	std	Z+3, r25	; 0x03
     fdc:	82 83       	std	Z+2, r24	; 0x02
     fde:	21 15       	cp	r18, r1
     fe0:	31 05       	cpc	r19, r1
     fe2:	29 f4       	brne	.+10     	; 0xfee <free+0x9c>
     fe4:	f0 93 45 02 	sts	0x0245, r31
     fe8:	e0 93 44 02 	sts	0x0244, r30
     fec:	3e c0       	rjmp	.+124    	; 0x106a <free+0x118>
     fee:	d9 01       	movw	r26, r18
     ff0:	13 96       	adiw	r26, 0x03	; 3
     ff2:	fc 93       	st	X, r31
     ff4:	ee 93       	st	-X, r30
     ff6:	12 97       	sbiw	r26, 0x02	; 2
     ff8:	4d 91       	ld	r20, X+
     ffa:	5d 91       	ld	r21, X+
     ffc:	a4 0f       	add	r26, r20
     ffe:	b5 1f       	adc	r27, r21
    1000:	ea 17       	cp	r30, r26
    1002:	fb 07       	cpc	r31, r27
    1004:	79 f4       	brne	.+30     	; 0x1024 <free+0xd2>
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	84 0f       	add	r24, r20
    100c:	95 1f       	adc	r25, r21
    100e:	02 96       	adiw	r24, 0x02	; 2
    1010:	d9 01       	movw	r26, r18
    1012:	11 96       	adiw	r26, 0x01	; 1
    1014:	9c 93       	st	X, r25
    1016:	8e 93       	st	-X, r24
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	13 96       	adiw	r26, 0x03	; 3
    101e:	9c 93       	st	X, r25
    1020:	8e 93       	st	-X, r24
    1022:	12 97       	sbiw	r26, 0x02	; 2
    1024:	e0 e0       	ldi	r30, 0x00	; 0
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	19 f0       	breq	.+6      	; 0x1036 <free+0xe4>
    1030:	fe 01       	movw	r30, r28
    1032:	ec 01       	movw	r28, r24
    1034:	f9 cf       	rjmp	.-14     	; 0x1028 <free+0xd6>
    1036:	ce 01       	movw	r24, r28
    1038:	02 96       	adiw	r24, 0x02	; 2
    103a:	28 81       	ld	r18, Y
    103c:	39 81       	ldd	r19, Y+1	; 0x01
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	20 91 42 02 	lds	r18, 0x0242
    1046:	30 91 43 02 	lds	r19, 0x0243
    104a:	28 17       	cp	r18, r24
    104c:	39 07       	cpc	r19, r25
    104e:	69 f4       	brne	.+26     	; 0x106a <free+0x118>
    1050:	30 97       	sbiw	r30, 0x00	; 0
    1052:	29 f4       	brne	.+10     	; 0x105e <free+0x10c>
    1054:	10 92 45 02 	sts	0x0245, r1
    1058:	10 92 44 02 	sts	0x0244, r1
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <free+0x110>
    105e:	13 82       	std	Z+3, r1	; 0x03
    1060:	12 82       	std	Z+2, r1	; 0x02
    1062:	d0 93 43 02 	sts	0x0243, r29
    1066:	c0 93 42 02 	sts	0x0242, r28
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <strnlen_P>:
    1070:	fc 01       	movw	r30, r24
    1072:	05 90       	lpm	r0, Z+
    1074:	61 50       	subi	r22, 0x01	; 1
    1076:	70 40       	sbci	r23, 0x00	; 0
    1078:	01 10       	cpse	r0, r1
    107a:	d8 f7       	brcc	.-10     	; 0x1072 <strnlen_P+0x2>
    107c:	80 95       	com	r24
    107e:	90 95       	com	r25
    1080:	8e 0f       	add	r24, r30
    1082:	9f 1f       	adc	r25, r31
    1084:	08 95       	ret

00001086 <memset>:
    1086:	dc 01       	movw	r26, r24
    1088:	01 c0       	rjmp	.+2      	; 0x108c <memset+0x6>
    108a:	6d 93       	st	X+, r22
    108c:	41 50       	subi	r20, 0x01	; 1
    108e:	50 40       	sbci	r21, 0x00	; 0
    1090:	e0 f7       	brcc	.-8      	; 0x108a <memset+0x4>
    1092:	08 95       	ret

00001094 <strnlen>:
    1094:	fc 01       	movw	r30, r24
    1096:	61 50       	subi	r22, 0x01	; 1
    1098:	70 40       	sbci	r23, 0x00	; 0
    109a:	01 90       	ld	r0, Z+
    109c:	01 10       	cpse	r0, r1
    109e:	d8 f7       	brcc	.-10     	; 0x1096 <strnlen+0x2>
    10a0:	80 95       	com	r24
    10a2:	90 95       	com	r25
    10a4:	8e 0f       	add	r24, r30
    10a6:	9f 1f       	adc	r25, r31
    10a8:	08 95       	ret

000010aa <fputc>:
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	18 2f       	mov	r17, r24
    10b4:	09 2f       	mov	r16, r25
    10b6:	eb 01       	movw	r28, r22
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	81 fd       	sbrc	r24, 1
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <fputc+0x1a>
    10be:	8f ef       	ldi	r24, 0xFF	; 255
    10c0:	9f ef       	ldi	r25, 0xFF	; 255
    10c2:	20 c0       	rjmp	.+64     	; 0x1104 <fputc+0x5a>
    10c4:	82 ff       	sbrs	r24, 2
    10c6:	10 c0       	rjmp	.+32     	; 0x10e8 <fputc+0x3e>
    10c8:	4e 81       	ldd	r20, Y+6	; 0x06
    10ca:	5f 81       	ldd	r21, Y+7	; 0x07
    10cc:	2c 81       	ldd	r18, Y+4	; 0x04
    10ce:	3d 81       	ldd	r19, Y+5	; 0x05
    10d0:	42 17       	cp	r20, r18
    10d2:	53 07       	cpc	r21, r19
    10d4:	7c f4       	brge	.+30     	; 0x10f4 <fputc+0x4a>
    10d6:	e8 81       	ld	r30, Y
    10d8:	f9 81       	ldd	r31, Y+1	; 0x01
    10da:	9f 01       	movw	r18, r30
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	39 83       	std	Y+1, r19	; 0x01
    10e2:	28 83       	st	Y, r18
    10e4:	10 83       	st	Z, r17
    10e6:	06 c0       	rjmp	.+12     	; 0x10f4 <fputc+0x4a>
    10e8:	e8 85       	ldd	r30, Y+8	; 0x08
    10ea:	f9 85       	ldd	r31, Y+9	; 0x09
    10ec:	81 2f       	mov	r24, r17
    10ee:	19 95       	eicall
    10f0:	89 2b       	or	r24, r25
    10f2:	29 f7       	brne	.-54     	; 0x10be <fputc+0x14>
    10f4:	2e 81       	ldd	r18, Y+6	; 0x06
    10f6:	3f 81       	ldd	r19, Y+7	; 0x07
    10f8:	2f 5f       	subi	r18, 0xFF	; 255
    10fa:	3f 4f       	sbci	r19, 0xFF	; 255
    10fc:	3f 83       	std	Y+7, r19	; 0x07
    10fe:	2e 83       	std	Y+6, r18	; 0x06
    1100:	81 2f       	mov	r24, r17
    1102:	90 2f       	mov	r25, r16
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <__ultoa_invert>:
    110e:	fa 01       	movw	r30, r20
    1110:	aa 27       	eor	r26, r26
    1112:	28 30       	cpi	r18, 0x08	; 8
    1114:	51 f1       	breq	.+84     	; 0x116a <__ultoa_invert+0x5c>
    1116:	20 31       	cpi	r18, 0x10	; 16
    1118:	81 f1       	breq	.+96     	; 0x117a <__ultoa_invert+0x6c>
    111a:	e8 94       	clt
    111c:	6f 93       	push	r22
    111e:	6e 7f       	andi	r22, 0xFE	; 254
    1120:	6e 5f       	subi	r22, 0xFE	; 254
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	8f 4f       	sbci	r24, 0xFF	; 255
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	af 4f       	sbci	r26, 0xFF	; 255
    112a:	b1 e0       	ldi	r27, 0x01	; 1
    112c:	3e d0       	rcall	.+124    	; 0x11aa <__ultoa_invert+0x9c>
    112e:	b4 e0       	ldi	r27, 0x04	; 4
    1130:	3c d0       	rcall	.+120    	; 0x11aa <__ultoa_invert+0x9c>
    1132:	67 0f       	add	r22, r23
    1134:	78 1f       	adc	r23, r24
    1136:	89 1f       	adc	r24, r25
    1138:	9a 1f       	adc	r25, r26
    113a:	a1 1d       	adc	r26, r1
    113c:	68 0f       	add	r22, r24
    113e:	79 1f       	adc	r23, r25
    1140:	8a 1f       	adc	r24, r26
    1142:	91 1d       	adc	r25, r1
    1144:	a1 1d       	adc	r26, r1
    1146:	6a 0f       	add	r22, r26
    1148:	71 1d       	adc	r23, r1
    114a:	81 1d       	adc	r24, r1
    114c:	91 1d       	adc	r25, r1
    114e:	a1 1d       	adc	r26, r1
    1150:	20 d0       	rcall	.+64     	; 0x1192 <__ultoa_invert+0x84>
    1152:	09 f4       	brne	.+2      	; 0x1156 <__ultoa_invert+0x48>
    1154:	68 94       	set
    1156:	3f 91       	pop	r19
    1158:	2a e0       	ldi	r18, 0x0A	; 10
    115a:	26 9f       	mul	r18, r22
    115c:	11 24       	eor	r1, r1
    115e:	30 19       	sub	r19, r0
    1160:	30 5d       	subi	r19, 0xD0	; 208
    1162:	31 93       	st	Z+, r19
    1164:	de f6       	brtc	.-74     	; 0x111c <__ultoa_invert+0xe>
    1166:	cf 01       	movw	r24, r30
    1168:	08 95       	ret
    116a:	46 2f       	mov	r20, r22
    116c:	47 70       	andi	r20, 0x07	; 7
    116e:	40 5d       	subi	r20, 0xD0	; 208
    1170:	41 93       	st	Z+, r20
    1172:	b3 e0       	ldi	r27, 0x03	; 3
    1174:	0f d0       	rcall	.+30     	; 0x1194 <__ultoa_invert+0x86>
    1176:	c9 f7       	brne	.-14     	; 0x116a <__ultoa_invert+0x5c>
    1178:	f6 cf       	rjmp	.-20     	; 0x1166 <__ultoa_invert+0x58>
    117a:	46 2f       	mov	r20, r22
    117c:	4f 70       	andi	r20, 0x0F	; 15
    117e:	40 5d       	subi	r20, 0xD0	; 208
    1180:	4a 33       	cpi	r20, 0x3A	; 58
    1182:	18 f0       	brcs	.+6      	; 0x118a <__ultoa_invert+0x7c>
    1184:	49 5d       	subi	r20, 0xD9	; 217
    1186:	31 fd       	sbrc	r19, 1
    1188:	40 52       	subi	r20, 0x20	; 32
    118a:	41 93       	st	Z+, r20
    118c:	02 d0       	rcall	.+4      	; 0x1192 <__ultoa_invert+0x84>
    118e:	a9 f7       	brne	.-22     	; 0x117a <__ultoa_invert+0x6c>
    1190:	ea cf       	rjmp	.-44     	; 0x1166 <__ultoa_invert+0x58>
    1192:	b4 e0       	ldi	r27, 0x04	; 4
    1194:	a6 95       	lsr	r26
    1196:	97 95       	ror	r25
    1198:	87 95       	ror	r24
    119a:	77 95       	ror	r23
    119c:	67 95       	ror	r22
    119e:	ba 95       	dec	r27
    11a0:	c9 f7       	brne	.-14     	; 0x1194 <__ultoa_invert+0x86>
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	61 05       	cpc	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	08 95       	ret
    11aa:	9b 01       	movw	r18, r22
    11ac:	ac 01       	movw	r20, r24
    11ae:	0a 2e       	mov	r0, r26
    11b0:	06 94       	lsr	r0
    11b2:	57 95       	ror	r21
    11b4:	47 95       	ror	r20
    11b6:	37 95       	ror	r19
    11b8:	27 95       	ror	r18
    11ba:	ba 95       	dec	r27
    11bc:	c9 f7       	brne	.-14     	; 0x11b0 <__ultoa_invert+0xa2>
    11be:	62 0f       	add	r22, r18
    11c0:	73 1f       	adc	r23, r19
    11c2:	84 1f       	adc	r24, r20
    11c4:	95 1f       	adc	r25, r21
    11c6:	a0 1d       	adc	r26, r0
    11c8:	08 95       	ret

000011ca <_exit>:
    11ca:	f8 94       	cli

000011cc <__stop_program>:
    11cc:	ff cf       	rjmp	.-2      	; 0x11cc <__stop_program>
