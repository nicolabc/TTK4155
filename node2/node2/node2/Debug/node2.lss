
node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800200  00000d98  00000e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002c0  008002c0  00000eec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e2a  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074b  00000000  00000000  00001e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e6  00000000  00000000  000025cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00002eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000496  00000000  00000000  00003118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e8  00000000  00000000  000035ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003c96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e9       	ldi	r30, 0x98	; 152
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 3c       	cpi	r26, 0xC0	; 192
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 ec       	ldi	r26, 0xC0	; 192
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3c       	cpi	r26, 0xCA	; 202
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	80 d1       	rcall	.+768    	; 0x420 <main>
 120:	39 c6       	rjmp	.+3186   	; 0xd94 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <can_init>:
 #define set_bit( reg, bit ) (reg |= (1 << bit))
 #define clear_bit( reg, bit ) (reg &= ~(1 << bit))


 void can_init(){
	mcp2515_init(); //denne kaller på reset, som setter systemet i config mode
 124:	04 d1       	rcall	.+520    	; 0x32e <mcp2515_init>
	
	
	//aktiverer interrupts (interrupt enable) for transmit og receive buffers, s.51
	mcp2515_bit_modify(MCP_CANINTE, 0b00000011, 0b00000011); 
 126:	43 e0       	ldi	r20, 0x03	; 3
 128:	63 e0       	ldi	r22, 0x03	; 3
 12a:	8b e2       	ldi	r24, 0x2B	; 43
 12c:	34 d1       	rcall	.+616    	; 0x396 <mcp2515_bit_modify>
	
	//Setter alle maske-bitene i standard identifier til 0, fordi da slippes alle messages gjennom. s. 35 (register 4-14 til 4-17), og s. 32, table 4-2
	mcp2515_write(MCP_RXM0SIDH, 0b00000000);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	80 e2       	ldi	r24, 0x20	; 32
 132:	e9 d0       	rcall	.+466    	; 0x306 <mcp2515_write>
	mcp2515_write(MCP_RXM0SIDL, 0b00000000);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	81 e2       	ldi	r24, 0x21	; 33
 138:	e6 d0       	rcall	.+460    	; 0x306 <mcp2515_write>
	mcp2515_write(MCP_RXM1SIDH, 0b00000000);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	84 e2       	ldi	r24, 0x24	; 36
 13e:	e3 d0       	rcall	.+454    	; 0x306 <mcp2515_write>
	mcp2515_write(MCP_RXM1SIDL, 0b00000000);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	85 e2       	ldi	r24, 0x25	; 37
 144:	e0 d0       	rcall	.+448    	; 0x306 <mcp2515_write>
	
	//setter i loopback mode, s. 60
	mcp2515_bit_modify(MCP_CANCTRL, 0b11100000, 0b01000000);
 146:	40 e4       	ldi	r20, 0x40	; 64
 148:	60 ee       	ldi	r22, 0xE0	; 224
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	24 c1       	rjmp	.+584    	; 0x396 <mcp2515_bit_modify>
 14e:	08 95       	ret

00000150 <can_send_message>:
 }

void can_send_message(can_msg* send){//unsigned int identifier, uint8_t *message, uint8_t lengthOfData
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	7c 01       	movw	r14, r24
	
	while((mcp2515_read(MCP_TXB0CTRL) & MCP_TXREQ)){ //så lenge transfer buffer 0 er fullt, vil MCP_TXREQ være høy, og vi er stuck i whilen. Når det er tomt, vil vi gå ut av whilen
 15e:	80 e3       	ldi	r24, 0x30	; 48
 160:	c7 d0       	rcall	.+398    	; 0x2f0 <mcp2515_read>
 162:	83 fd       	sbrc	r24, 3
 164:	fc cf       	rjmp	.-8      	; 0x15e <can_send_message+0xe>
	}
	
	//Left shifter 5 ganger for å lagre riktig i SID bufferregistrene
	mcp2515_write(MCP_TXB0SIDH+1, send->id<<5); //lagrer identifieren til messagen inn i første transferbuffer. Går fint å overskrive det som ligger der fordi det er 0 som må ligge der for standard identifier (ikke extended)
 166:	f7 01       	movw	r30, r14
 168:	60 81       	ld	r22, Z
 16a:	62 95       	swap	r22
 16c:	66 0f       	add	r22, r22
 16e:	60 7e       	andi	r22, 0xE0	; 224
 170:	82 e3       	ldi	r24, 0x32	; 50
 172:	c9 d0       	rcall	.+402    	; 0x306 <mcp2515_write>
	
	 //Right shift 3 ganger for å flytte de 8 høyeste bit'ene til de 8 laveste, så de lagres i SIDH
	mcp2515_write(MCP_TXB0SIDH, send->id>>3); //lagrer identifieren til messagen inn i første transferbuffer
 174:	f7 01       	movw	r30, r14
 176:	60 81       	ld	r22, Z
 178:	71 81       	ldd	r23, Z+1	; 0x01
 17a:	76 95       	lsr	r23
 17c:	67 95       	ror	r22
 17e:	76 95       	lsr	r23
 180:	67 95       	ror	r22
 182:	76 95       	lsr	r23
 184:	67 95       	ror	r22
 186:	81 e3       	ldi	r24, 0x31	; 49
 188:	be d0       	rcall	.+380    	; 0x306 <mcp2515_write>
	
	mcp2515_write(MCP_TXB0SIDH+4, send->length); //lagrer datalengden i txb0dlc. plusser på 4 for å komme til txb0dlc (se tabell s. 63)
 18a:	f7 01       	movw	r30, r14
 18c:	62 85       	ldd	r22, Z+10	; 0x0a
 18e:	85 e3       	ldi	r24, 0x35	; 53
 190:	ba d0       	rcall	.+372    	; 0x306 <mcp2515_write>

	//lagrer nå meldinga i TXB0D0-TXB0D6 (s. 63)
	if(send->length>8){
 192:	f7 01       	movw	r30, r14
 194:	82 85       	ldd	r24, Z+10	; 0x0a
 196:	89 30       	cpi	r24, 0x09	; 9
 198:	18 f4       	brcc	.+6      	; 0x1a0 <can_send_message+0x50>
		printf("Length of data too big.");
		return;
	}
	int byte = 0;
	for (byte = 0; byte < send->length; byte++){
 19a:	81 11       	cpse	r24, r1
 19c:	09 c0       	rjmp	.+18     	; 0x1b0 <can_send_message+0x60>
 19e:	1a c0       	rjmp	.+52     	; 0x1d4 <can_send_message+0x84>
	
	mcp2515_write(MCP_TXB0SIDH+4, send->length); //lagrer datalengden i txb0dlc. plusser på 4 for å komme til txb0dlc (se tabell s. 63)

	//lagrer nå meldinga i TXB0D0-TXB0D6 (s. 63)
	if(send->length>8){
		printf("Length of data too big.");
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	92 e0       	ldi	r25, 0x02	; 2
 1a4:	9f 93       	push	r25
 1a6:	8f 93       	push	r24
 1a8:	db d1       	rcall	.+950    	; 0x560 <printf>
		return;
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	15 c0       	rjmp	.+42     	; 0x1da <can_send_message+0x8a>
 1b0:	87 01       	movw	r16, r14
 1b2:	0e 5f       	subi	r16, 0xFE	; 254
 1b4:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	int byte = 0;
	for (byte = 0; byte < send->length; byte++){
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(MCP_TXB0SIDH+5+byte, send->data[byte]);
 1ba:	f8 01       	movw	r30, r16
 1bc:	61 91       	ld	r22, Z+
 1be:	8f 01       	movw	r16, r30
 1c0:	8c 2f       	mov	r24, r28
 1c2:	8a 5c       	subi	r24, 0xCA	; 202
 1c4:	a0 d0       	rcall	.+320    	; 0x306 <mcp2515_write>
	if(send->length>8){
		printf("Length of data too big.");
		return;
	}
	int byte = 0;
	for (byte = 0; byte < send->length; byte++){
 1c6:	21 96       	adiw	r28, 0x01	; 1
 1c8:	f7 01       	movw	r30, r14
 1ca:	22 85       	ldd	r18, Z+10	; 0x0a
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	c2 17       	cp	r28, r18
 1d0:	d3 07       	cpc	r29, r19
 1d2:	9c f3       	brlt	.-26     	; 0x1ba <can_send_message+0x6a>
		mcp2515_write(MCP_TXB0SIDH+5+byte, send->data[byte]);
	}

	mcp2515_request_to_send(0); //sender RTS signal til TXB0 nå
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	b9 d0       	rcall	.+370    	; 0x34c <mcp2515_request_to_send>
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	08 95       	ret

000001e8 <can_receive_message>:

can_msg can_receive_message(){
 1e8:	8f 92       	push	r8
 1ea:	9f 92       	push	r9
 1ec:	af 92       	push	r10
 1ee:	bf 92       	push	r11
 1f0:	cf 92       	push	r12
 1f2:	df 92       	push	r13
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	2b 97       	sbiw	r28, 0x0b	; 11
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
 210:	7c 01       	movw	r14, r24
	can_msg wholeMessage;
	wholeMessage.id = 0;
	wholeMessage.length = 0;
	wholeMessage.data[0] = 0b00000000;
 212:	1b 82       	std	Y+3, r1	; 0x03
	
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF){ //om rx0if er høy, altså interrupt pinnen er høy, betyr det at receive buffer nr 0 har fått inn ny data
 214:	8c e2       	ldi	r24, 0x2C	; 44
 216:	6c d0       	rcall	.+216    	; 0x2f0 <mcp2515_read>
 218:	80 ff       	sbrs	r24, 0
 21a:	48 c0       	rjmp	.+144    	; 0x2ac <can_receive_message+0xc4>
		unsigned int idH = mcp2515_read(MCP_RXB0SIDH);
 21c:	81 e6       	ldi	r24, 0x61	; 97
 21e:	68 d0       	rcall	.+208    	; 0x2f0 <mcp2515_read>
 220:	08 2f       	mov	r16, r24
 222:	10 e0       	ldi	r17, 0x00	; 0
		unsigned int idL = mcp2515_read(MCP_RXB0SIDH+1);
 224:	82 e6       	ldi	r24, 0x62	; 98
 226:	64 d0       	rcall	.+200    	; 0x2f0 <mcp2515_read>
 228:	90 e0       	ldi	r25, 0x00	; 0
		idL = (idL >> 5); //Fordi de er idL er tre MSB i MCP_RXB0SIDL, må rightshifte 5 ganger
		idH = (idH << 3); //Må leftshifte 
 22a:	58 01       	movw	r10, r16
 22c:	aa 0c       	add	r10, r10
 22e:	bb 1c       	adc	r11, r11
 230:	aa 0c       	add	r10, r10
 232:	bb 1c       	adc	r11, r11
 234:	aa 0c       	add	r10, r10
 236:	bb 1c       	adc	r11, r11
	wholeMessage.data[0] = 0b00000000;
	
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF){ //om rx0if er høy, altså interrupt pinnen er høy, betyr det at receive buffer nr 0 har fått inn ny data
		unsigned int idH = mcp2515_read(MCP_RXB0SIDH);
		unsigned int idL = mcp2515_read(MCP_RXB0SIDH+1);
		idL = (idL >> 5); //Fordi de er idL er tre MSB i MCP_RXB0SIDL, må rightshifte 5 ganger
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	92 95       	swap	r25
 23e:	82 95       	swap	r24
 240:	8f 70       	andi	r24, 0x0F	; 15
 242:	89 27       	eor	r24, r25
 244:	9f 70       	andi	r25, 0x0F	; 15
 246:	89 27       	eor	r24, r25
		idH = (idH << 3); //Må leftshifte 
		unsigned int id = (idH | idL); //Kan evt ta +
 248:	a8 2a       	or	r10, r24
 24a:	b9 2a       	or	r11, r25
		
		
		uint8_t length = mcp2515_read(MCP_RXB0SIDH+4); //leser av rxb0dlc
 24c:	85 e6       	ldi	r24, 0x65	; 101
 24e:	50 d0       	rcall	.+160    	; 0x2f0 <mcp2515_read>
 250:	88 2e       	mov	r8, r24
		if (length > 8){
 252:	88 e0       	ldi	r24, 0x08	; 8
 254:	88 15       	cp	r24, r8
 256:	18 f0       	brcs	.+6      	; 0x25e <can_receive_message+0x76>
		}
		
		//leser nå av rxb0d0 til rxb0d7 (avhengig av hvor lang meldinga vi har mottatt er), og lagrer det i arrayet message
		int byte = 0;
		//lagrer alt i en struct
		for (byte = 0; byte < length; byte++){
 258:	81 10       	cpse	r8, r1
 25a:	14 c0       	rjmp	.+40     	; 0x284 <can_receive_message+0x9c>
 25c:	2a c0       	rjmp	.+84     	; 0x2b2 <can_receive_message+0xca>
		unsigned int id = (idH | idL); //Kan evt ta +
		
		
		uint8_t length = mcp2515_read(MCP_RXB0SIDH+4); //leser av rxb0dlc
		if (length > 8){
			printf("Length > 8, not allowed.");
 25e:	8e e1       	ldi	r24, 0x1E	; 30
 260:	92 e0       	ldi	r25, 0x02	; 2
 262:	9f 93       	push	r25
 264:	8f 93       	push	r24
 266:	7c d1       	rcall	.+760    	; 0x560 <printf>
			return wholeMessage;
 268:	1a 82       	std	Y+2, r1	; 0x02
 26a:	19 82       	std	Y+1, r1	; 0x01
 26c:	1b 86       	std	Y+11, r1	; 0x0b
 26e:	8b e0       	ldi	r24, 0x0B	; 11
 270:	fe 01       	movw	r30, r28
 272:	31 96       	adiw	r30, 0x01	; 1
 274:	d7 01       	movw	r26, r14
 276:	01 90       	ld	r0, Z+
 278:	0d 92       	st	X+, r0
 27a:	8a 95       	dec	r24
 27c:	e1 f7       	brne	.-8      	; 0x276 <can_receive_message+0x8e>
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	22 c0       	rjmp	.+68     	; 0x2c8 <can_receive_message+0xe0>
 284:	8e 01       	movw	r16, r28
 286:	0d 5f       	subi	r16, 0xFD	; 253
 288:	1f 4f       	sbci	r17, 0xFF	; 255
 28a:	68 01       	movw	r12, r16
 28c:	c8 0c       	add	r12, r8
 28e:	d1 1c       	adc	r13, r1
		}
		
		//leser nå av rxb0d0 til rxb0d7 (avhengig av hvor lang meldinga vi har mottatt er), og lagrer det i arrayet message
		int byte = 0;
		//lagrer alt i en struct
		for (byte = 0; byte < length; byte++){
 290:	0f 2e       	mov	r0, r31
 292:	f6 e6       	ldi	r31, 0x66	; 102
 294:	9f 2e       	mov	r9, r31
 296:	f0 2d       	mov	r31, r0
			wholeMessage.data[byte] = mcp2515_read(MCP_RXB0SIDH+5+byte);
 298:	89 2d       	mov	r24, r9
 29a:	2a d0       	rcall	.+84     	; 0x2f0 <mcp2515_read>
 29c:	f8 01       	movw	r30, r16
 29e:	81 93       	st	Z+, r24
 2a0:	8f 01       	movw	r16, r30
 2a2:	93 94       	inc	r9
		}
		
		//leser nå av rxb0d0 til rxb0d7 (avhengig av hvor lang meldinga vi har mottatt er), og lagrer det i arrayet message
		int byte = 0;
		//lagrer alt i en struct
		for (byte = 0; byte < length; byte++){
 2a4:	ec 15       	cp	r30, r12
 2a6:	fd 05       	cpc	r31, r13
 2a8:	b9 f7       	brne	.-18     	; 0x298 <can_receive_message+0xb0>
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <can_receive_message+0xca>
}

can_msg can_receive_message(){
	can_msg wholeMessage;
	wholeMessage.id = 0;
	wholeMessage.length = 0;
 2ac:	81 2c       	mov	r8, r1
	mcp2515_request_to_send(0); //sender RTS signal til TXB0 nå
}

can_msg can_receive_message(){
	can_msg wholeMessage;
	wholeMessage.id = 0;
 2ae:	a1 2c       	mov	r10, r1
 2b0:	b1 2c       	mov	r11, r1
		
		
		wholeMessage.id = id;
		wholeMessage.length = length;
	}
	return wholeMessage;
 2b2:	ba 82       	std	Y+2, r11	; 0x02
 2b4:	a9 82       	std	Y+1, r10	; 0x01
 2b6:	8b 86       	std	Y+11, r8	; 0x0b
 2b8:	8b e0       	ldi	r24, 0x0B	; 11
 2ba:	fe 01       	movw	r30, r28
 2bc:	31 96       	adiw	r30, 0x01	; 1
 2be:	d7 01       	movw	r26, r14
 2c0:	01 90       	ld	r0, Z+
 2c2:	0d 92       	st	X+, r0
 2c4:	8a 95       	dec	r24
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <can_receive_message+0xd8>
}
 2c8:	c7 01       	movw	r24, r14
 2ca:	2b 96       	adiw	r28, 0x0b	; 11
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	bf 90       	pop	r11
 2e8:	af 90       	pop	r10
 2ea:	9f 90       	pop	r9
 2ec:	8f 90       	pop	r8
 2ee:	08 95       	ret

000002f0 <mcp2515_read>:
#include "spi.h"

#define set_bit( reg, bit ) (reg |= (1 << bit))
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

uint8_t mcp2515_read(uint8_t address){
 2f0:	cf 93       	push	r28
 2f2:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, SS); //Setter SS lav
 2f4:	2f 98       	cbi	0x05, 7	; 5

	uint8_t result;
	spi_MasterTransmit(MCP_READ);
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	6d d0       	rcall	.+218    	; 0x3d4 <spi_MasterTransmit>
	spi_MasterTransmit(address);
 2fa:	8c 2f       	mov	r24, r28
 2fc:	6b d0       	rcall	.+214    	; 0x3d4 <spi_MasterTransmit>
	result = spi_MasterRead(); //Leser hva som var i adressen/registeret vi aksesserte
 2fe:	6f d0       	rcall	.+222    	; 0x3de <spi_MasterRead>

	set_bit(PORTB, SS); //Setter SS høy
 300:	2f 9a       	sbi	0x05, 7	; 5
	
	return result;
}
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data){
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	d8 2f       	mov	r29, r24
 30c:	c6 2f       	mov	r28, r22
	clear_bit(PORTB,SS); //Setter SS lav
 30e:	2f 98       	cbi	0x05, 7	; 5
	
	spi_MasterTransmit(MCP_WRITE); //Velger instruction
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	60 d0       	rcall	.+192    	; 0x3d4 <spi_MasterTransmit>
	
	spi_MasterTransmit(address); //Velger adresse, f.eks. 0b00110001
 314:	8d 2f       	mov	r24, r29
 316:	5e d0       	rcall	.+188    	; 0x3d4 <spi_MasterTransmit>
	
	spi_MasterTransmit(data); //Velger data som sendes
 318:	8c 2f       	mov	r24, r28
 31a:	5c d0       	rcall	.+184    	; 0x3d4 <spi_MasterTransmit>

	set_bit(PORTB,SS);
 31c:	2f 9a       	sbi	0x05, 7	; 5
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <mcp2515_reset>:

void mcp2515_reset(){
	clear_bit(PORTB,SS); //Setter SS lav
 324:	2f 98       	cbi	0x05, 7	; 5
	spi_MasterTransmit(MCP_RESET);
 326:	80 ec       	ldi	r24, 0xC0	; 192
 328:	55 d0       	rcall	.+170    	; 0x3d4 <spi_MasterTransmit>
	set_bit(PORTB,SS); //Setter SS høy
 32a:	2f 9a       	sbi	0x05, 7	; 5
 32c:	08 95       	ret

0000032e <mcp2515_init>:
}

uint8_t mcp2515_init(){
	uint8_t value;
	spi_init(); //Initialize SPI
 32e:	47 d0       	rcall	.+142    	; 0x3be <spi_init>
	mcp2515_reset(); // Send reset-command
 330:	f9 df       	rcall	.-14     	; 0x324 <mcp2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <mcp2515_init+0x6>
 338:	00 c0       	rjmp	.+0      	; 0x33a <mcp2515_init+0xc>
	_delay_us(8); //oscillatoren er i reset modus i 128 klokkesykluser. trenger derav en delay
	
	//Self-test to check if system is in config mode
	value = mcp2515_read(MCP_CANSTAT); 
 33a:	8e e0       	ldi	r24, 0x0E	; 14
 33c:	d9 df       	rcall	.-78     	; 0x2f0 <mcp2515_read>
	if((value & MODE_MASK)  != MODE_CONFIG) {
 33e:	98 2f       	mov	r25, r24
 340:	90 7e       	andi	r25, 0xE0	; 224
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 38       	cpi	r25, 0x80	; 128
 346:	09 f4       	brne	.+2      	; 0x34a <mcp2515_init+0x1c>
 348:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	// More initialization
	return 0;
}
 34a:	08 95       	ret

0000034c <mcp2515_request_to_send>:

void mcp2515_request_to_send(int whichBuffer){ //se s. 66
	clear_bit(PORTB,SS); //Setter SS lav
 34c:	2f 98       	cbi	0x05, 7	; 5

	if(whichBuffer == 0){ //choose TXB0
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	19 f4       	brne	.+6      	; 0x358 <mcp2515_request_to_send+0xc>
		spi_MasterTransmit(0b10000001); 
 352:	81 e8       	ldi	r24, 0x81	; 129
 354:	3f d0       	rcall	.+126    	; 0x3d4 <spi_MasterTransmit>
 356:	07 c0       	rjmp	.+14     	; 0x366 <mcp2515_request_to_send+0x1a>
	}
	
	else if (whichBuffer == 1){ //choose TXB1
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	19 f4       	brne	.+6      	; 0x362 <mcp2515_request_to_send+0x16>
		spi_MasterTransmit(0b10000010); 
 35c:	82 e8       	ldi	r24, 0x82	; 130
 35e:	3a d0       	rcall	.+116    	; 0x3d4 <spi_MasterTransmit>
 360:	02 c0       	rjmp	.+4      	; 0x366 <mcp2515_request_to_send+0x1a>
	}
	else{ //choose TXB2
		spi_MasterTransmit(0b10000100);
 362:	84 e8       	ldi	r24, 0x84	; 132
 364:	37 d0       	rcall	.+110    	; 0x3d4 <spi_MasterTransmit>
	}
	
	set_bit(PORTB,SS); //Setter SS høy
 366:	2f 9a       	sbi	0x05, 7	; 5
 368:	08 95       	ret

0000036a <mcp2515_read_status>:
}

uint8_t mcp2515_read_status(){
 36a:	cf 93       	push	r28
	clear_bit(PORTB,SS); //Setter SS lav
 36c:	2f 98       	cbi	0x05, 7	; 5
	
	uint8_t statusRegister;
	uint8_t statusRegister2;

	spi_MasterTransmit(MCP_READ_STATUS);
 36e:	80 ea       	ldi	r24, 0xA0	; 160
 370:	31 d0       	rcall	.+98     	; 0x3d4 <spi_MasterTransmit>
	statusRegister = spi_MasterRead(); //disse to skal være like hverandre, se s. 69
 372:	35 d0       	rcall	.+106    	; 0x3de <spi_MasterRead>
 374:	c8 2f       	mov	r28, r24
	statusRegister2 = spi_MasterRead(); //disse to skal være like hverandre, se s. 69
 376:	33 d0       	rcall	.+102    	; 0x3de <spi_MasterRead>

	if(statusRegister != statusRegister2){
 378:	c8 17       	cp	r28, r24
 37a:	49 f0       	breq	.+18     	; 0x38e <mcp2515_read_status+0x24>
		printf("Status registers in mcp2515_read_status() not identical.");
 37c:	87 e3       	ldi	r24, 0x37	; 55
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	9f 93       	push	r25
 382:	8f 93       	push	r24
 384:	ed d0       	rcall	.+474    	; 0x560 <printf>
		return 0;
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <mcp2515_read_status+0x28>
	}

	set_bit(PORTB,SS); //Setter SS høy
 38e:	2f 9a       	sbi	0x05, 7	; 5

	return statusRegister;
 390:	8c 2f       	mov	r24, r28
}
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <mcp2515_bit_modify>:


void mcp2515_bit_modify(uint8_t regAdr, uint8_t maskBits, uint8_t data){ //se s. 68
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	18 2f       	mov	r17, r24
 39e:	d6 2f       	mov	r29, r22
 3a0:	c4 2f       	mov	r28, r20
	clear_bit(PORTB,SS); //Setter SS lav
 3a2:	2f 98       	cbi	0x05, 7	; 5

	spi_MasterTransmit(MCP_BITMOD);
 3a4:	85 e0       	ldi	r24, 0x05	; 5
 3a6:	16 d0       	rcall	.+44     	; 0x3d4 <spi_MasterTransmit>
	spi_MasterTransmit(regAdr);
 3a8:	81 2f       	mov	r24, r17
 3aa:	14 d0       	rcall	.+40     	; 0x3d4 <spi_MasterTransmit>
	spi_MasterTransmit(maskBits);
 3ac:	8d 2f       	mov	r24, r29
 3ae:	12 d0       	rcall	.+36     	; 0x3d4 <spi_MasterTransmit>
	spi_MasterTransmit(data);
 3b0:	8c 2f       	mov	r24, r28
 3b2:	10 d0       	rcall	.+32     	; 0x3d4 <spi_MasterTransmit>

	set_bit(PORTB,SS); //Setter SS høy
 3b4:	2f 9a       	sbi	0x05, 7	; 5
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	08 95       	ret

000003be <spi_init>:
 #define set_bit( reg, bit ) (reg |= (1 << bit))
 #define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void spi_init(void){
    /* Set MOSI and SCK output, all others input */
    DDRB |= (1<<MOSI)|(1<<SCK);
 3be:	84 b1       	in	r24, 0x04	; 4
 3c0:	86 60       	ori	r24, 0x06	; 6
 3c2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << MISO);
 3c4:	23 98       	cbi	0x04, 3	; 4
    /* Enable SPI, Master, set clock rate fck/2 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X);
 3c6:	81 e5       	ldi	r24, 0x51	; 81
 3c8:	8c bd       	out	0x2c, r24	; 44
	
	set_bit(DDRB,SS); //Setter PB4 til write/output
 3ca:	27 9a       	sbi	0x04, 7	; 4
	set_bit(PORTB, SS);
 3cc:	2f 9a       	sbi	0x05, 7	; 5
	
	if(SS==7){ //Hvis vi har arduino'en, trenger å sette PB0 til output og høy
		set_bit(DDRB,PB0); //Setter PB4 til write/output
 3ce:	20 9a       	sbi	0x04, 0	; 4
		set_bit(PORTB, PB0);
 3d0:	28 9a       	sbi	0x05, 0	; 5
 3d2:	08 95       	ret

000003d4 <spi_MasterTransmit>:

//Med denne må vi sette SS lav/høy før/etter mastertransmit starter/slutter
void spi_MasterTransmit(char cData) { //keepLow holds the SS* signal low so the transmission continues
	
	/* Start transmission */
	SPDR = cData;
 3d4:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete. Interrupt flag in SPSR is set (SPIF). */
	while(!(SPSR & (1<<SPIF)));
 3d6:	0d b4       	in	r0, 0x2d	; 45
 3d8:	07 fe       	sbrs	r0, 7
 3da:	fd cf       	rjmp	.-6      	; 0x3d6 <spi_MasterTransmit+0x2>
}
 3dc:	08 95       	ret

000003de <spi_MasterRead>:

//Egentlig ikke nødvendig med denne funksjonen, fordi MasterTransmit gjør det samme, men vi beholder den for lesbarhet av koden
uint8_t spi_MasterRead(){
	//Setter SS lav utenfor funksjonen, altså setter vi SS lav inni mcp2515_read

	spi_MasterTransmit(0x00);
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	f9 df       	rcall	.-14     	; 0x3d4 <spi_MasterTransmit>
	
	//Setter SS høy utenfor funksjonen, altså setter vi SS høy igjen inni mcp2515_read

	return SPDR;
 3e2:	8e b5       	in	r24, 0x2e	; 46
	
}
 3e4:	08 95       	ret

000003e6 <USART_Transmit>:
 }
 
 void USART_Transmit( unsigned char data )
 {
	 /* Wait for empty transmit buffer */
	 while( !( UCSR0A & (1<<UDRE0)) );
 3e6:	e0 ec       	ldi	r30, 0xC0	; 192
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	90 81       	ld	r25, Z
 3ec:	95 ff       	sbrs	r25, 5
 3ee:	fd cf       	rjmp	.-6      	; 0x3ea <USART_Transmit+0x4>
	 
	 /* Put data into buffer, sends the data */
	 UDR0 = data;
 3f0:	80 93 c6 00 	sts	0x00C6, r24
 3f4:	08 95       	ret

000003f6 <USART_Receive>:
 }

 unsigned char USART_Receive( void )
 {
	 /*Wait for data to be received*/
	 while( !(UCSR0A & (1<<RXC0)) );
 3f6:	e0 ec       	ldi	r30, 0xC0	; 192
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	88 23       	and	r24, r24
 3fe:	ec f7       	brge	.-6      	; 0x3fa <USART_Receive+0x4>
	 
	 /* Get and return received data from buffer*/
	 return UDR0;
 400:	80 91 c6 00 	lds	r24, 0x00C6
 }
 404:	08 95       	ret

00000406 <USART_Init>:


void USART_Init( unsigned int ubrr )
 {
	 /* Set baud rate */
	 UBRR0H = (unsigned char)(ubrr>>8);
 406:	90 93 c5 00 	sts	0x00C5, r25
	 UBRR0L = (unsigned char)ubrr;
 40a:	80 93 c4 00 	sts	0x00C4, r24

	 /* Enable receiver and transmitter*/
	 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 40e:	88 e1       	ldi	r24, 0x18	; 24
 410:	80 93 c1 00 	sts	0x00C1, r24
	 
	 fdevopen(*USART_Transmit, *USART_Receive);
 414:	6b ef       	ldi	r22, 0xFB	; 251
 416:	71 e0       	ldi	r23, 0x01	; 1
 418:	83 ef       	ldi	r24, 0xF3	; 243
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	57 c0       	rjmp	.+174    	; 0x4cc <fdevopen>
 41e:	08 95       	ret

00000420 <main>:


volatile int RECEIVE_BUFFER_INTERRUPT = 0;

int main(void)
{
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	66 97       	sbiw	r28, 0x16	; 22
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MYUBRR);
 434:	87 e6       	ldi	r24, 0x67	; 103
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	e6 df       	rcall	.-52     	; 0x406 <USART_Init>
	can_init();
 43a:	74 de       	rcall	.-792    	; 0x124 <can_init>
	
	
	can_msg melding;
	melding.id = 5;
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	9a 83       	std	Y+2, r25	; 0x02
 442:	89 83       	std	Y+1, r24	; 0x01
	melding.length = 8;
 444:	88 e0       	ldi	r24, 0x08	; 8
 446:	8b 87       	std	Y+11, r24	; 0x0b
	melding.data[0] = (uint8_t)('S');
 448:	83 e5       	ldi	r24, 0x53	; 83
 44a:	8b 83       	std	Y+3, r24	; 0x03
	melding.data[1] = (uint8_t)('K');
 44c:	8b e4       	ldi	r24, 0x4B	; 75
 44e:	8c 83       	std	Y+4, r24	; 0x04
	melding.data[2] = (uint8_t)('Y');
 450:	89 e5       	ldi	r24, 0x59	; 89
 452:	8d 83       	std	Y+5, r24	; 0x05
	melding.data[3] = (uint8_t)('Y');
 454:	8e 83       	std	Y+6, r24	; 0x06
	melding.data[4] = (uint8_t)('Y');
 456:	8f 83       	std	Y+7, r24	; 0x07
	melding.data[5] = (uint8_t)('Y');
 458:	88 87       	std	Y+8, r24	; 0x08
	melding.data[6] = (uint8_t)('A');
 45a:	81 e4       	ldi	r24, 0x41	; 65
 45c:	89 87       	std	Y+9, r24	; 0x09
	melding.data[7] = (uint8_t)('A');
 45e:	8a 87       	std	Y+10, r24	; 0x0a
	
	printf("NY\n");
 460:	80 e7       	ldi	r24, 0x70	; 112
 462:	92 e0       	ldi	r25, 0x02	; 2
 464:	8e d0       	rcall	.+284    	; 0x582 <puts>
			char mottatt_data_char4 = mottatt.data[4];
			char mottatt_data_char5 = mottatt.data[5];
			char mottatt_data_char6 = mottatt.data[6];
			char mottatt_data_char7 = mottatt.data[7];
				
			printf("ID: %i  LENGTH: %i   ALL DATA  %c    %c   %c    %c    %c    %c    %c    %c\n", mottatt.id , mottatt.length, mottatt_data_char0, mottatt_data_char1, mottatt_data_char2, mottatt_data_char3, mottatt_data_char4, mottatt_data_char5, mottatt_data_char6, mottatt_data_char7);
 466:	03 e7       	ldi	r16, 0x73	; 115
 468:	12 e0       	ldi	r17, 0x02	; 2
	
	printf("NY\n");
    while(1)
    {
		
		can_send_message(&melding);
 46a:	ce 01       	movw	r24, r28
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	70 de       	rcall	.-800    	; 0x150 <can_send_message>
		can_msg mottatt;
		
		
		//sjekker om receive bufre inneholder noe. se s. 69 i mcp2515
		uint8_t statusReg = mcp2515_read_status();
 470:	7c df       	rcall	.-264    	; 0x36a <mcp2515_read_status>
		
		if (test_bit(statusReg, 0))
 472:	80 ff       	sbrs	r24, 0
 474:	fa cf       	rjmp	.-12     	; 0x46a <main+0x4a>
		{
			mottatt = can_receive_message();
 476:	ce 01       	movw	r24, r28
 478:	0c 96       	adiw	r24, 0x0c	; 12
 47a:	b6 de       	rcall	.-660    	; 0x1e8 <can_receive_message>
			char mottatt_data_char4 = mottatt.data[4];
			char mottatt_data_char5 = mottatt.data[5];
			char mottatt_data_char6 = mottatt.data[6];
			char mottatt_data_char7 = mottatt.data[7];
				
			printf("ID: %i  LENGTH: %i   ALL DATA  %c    %c   %c    %c    %c    %c    %c    %c\n", mottatt.id , mottatt.length, mottatt_data_char0, mottatt_data_char1, mottatt_data_char2, mottatt_data_char3, mottatt_data_char4, mottatt_data_char5, mottatt_data_char6, mottatt_data_char7);
 47c:	8d 89       	ldd	r24, Y+21	; 0x15
 47e:	1f 92       	push	r1
 480:	8f 93       	push	r24
 482:	8c 89       	ldd	r24, Y+20	; 0x14
 484:	1f 92       	push	r1
 486:	8f 93       	push	r24
 488:	8b 89       	ldd	r24, Y+19	; 0x13
 48a:	1f 92       	push	r1
 48c:	8f 93       	push	r24
 48e:	8a 89       	ldd	r24, Y+18	; 0x12
 490:	1f 92       	push	r1
 492:	8f 93       	push	r24
 494:	89 89       	ldd	r24, Y+17	; 0x11
 496:	1f 92       	push	r1
 498:	8f 93       	push	r24
 49a:	88 89       	ldd	r24, Y+16	; 0x10
 49c:	1f 92       	push	r1
 49e:	8f 93       	push	r24
 4a0:	8f 85       	ldd	r24, Y+15	; 0x0f
 4a2:	1f 92       	push	r1
 4a4:	8f 93       	push	r24
 4a6:	8e 85       	ldd	r24, Y+14	; 0x0e
 4a8:	1f 92       	push	r1
 4aa:	8f 93       	push	r24
 4ac:	8e 89       	ldd	r24, Y+22	; 0x16
 4ae:	1f 92       	push	r1
 4b0:	8f 93       	push	r24
 4b2:	8d 85       	ldd	r24, Y+13	; 0x0d
 4b4:	8f 93       	push	r24
 4b6:	8c 85       	ldd	r24, Y+12	; 0x0c
 4b8:	8f 93       	push	r24
 4ba:	1f 93       	push	r17
 4bc:	0f 93       	push	r16
 4be:	50 d0       	rcall	.+160    	; 0x560 <printf>
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
			printf("Mottatt melding på receive buffer 1");
		}*/
		
	
		
    }
 4ca:	cf cf       	rjmp	.-98     	; 0x46a <main+0x4a>

000004cc <fdevopen>:
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	ec 01       	movw	r28, r24
 4d6:	8b 01       	movw	r16, r22
 4d8:	00 97       	sbiw	r24, 0x00	; 0
 4da:	31 f4       	brne	.+12     	; 0x4e8 <fdevopen+0x1c>
 4dc:	61 15       	cp	r22, r1
 4de:	71 05       	cpc	r23, r1
 4e0:	19 f4       	brne	.+6      	; 0x4e8 <fdevopen+0x1c>
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	37 c0       	rjmp	.+110    	; 0x556 <fdevopen+0x8a>
 4e8:	6e e0       	ldi	r22, 0x0E	; 14
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	63 d2       	rcall	.+1222   	; 0x9b8 <calloc>
 4f2:	fc 01       	movw	r30, r24
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	a9 f3       	breq	.-22     	; 0x4e2 <fdevopen+0x16>
 4f8:	80 e8       	ldi	r24, 0x80	; 128
 4fa:	83 83       	std	Z+3, r24	; 0x03
 4fc:	01 15       	cp	r16, r1
 4fe:	11 05       	cpc	r17, r1
 500:	71 f0       	breq	.+28     	; 0x51e <fdevopen+0x52>
 502:	13 87       	std	Z+11, r17	; 0x0b
 504:	02 87       	std	Z+10, r16	; 0x0a
 506:	81 e8       	ldi	r24, 0x81	; 129
 508:	83 83       	std	Z+3, r24	; 0x03
 50a:	80 91 c0 02 	lds	r24, 0x02C0
 50e:	90 91 c1 02 	lds	r25, 0x02C1
 512:	89 2b       	or	r24, r25
 514:	21 f4       	brne	.+8      	; 0x51e <fdevopen+0x52>
 516:	f0 93 c1 02 	sts	0x02C1, r31
 51a:	e0 93 c0 02 	sts	0x02C0, r30
 51e:	20 97       	sbiw	r28, 0x00	; 0
 520:	c9 f0       	breq	.+50     	; 0x554 <fdevopen+0x88>
 522:	d1 87       	std	Z+9, r29	; 0x09
 524:	c0 87       	std	Z+8, r28	; 0x08
 526:	83 81       	ldd	r24, Z+3	; 0x03
 528:	82 60       	ori	r24, 0x02	; 2
 52a:	83 83       	std	Z+3, r24	; 0x03
 52c:	80 91 c2 02 	lds	r24, 0x02C2
 530:	90 91 c3 02 	lds	r25, 0x02C3
 534:	89 2b       	or	r24, r25
 536:	71 f4       	brne	.+28     	; 0x554 <fdevopen+0x88>
 538:	f0 93 c3 02 	sts	0x02C3, r31
 53c:	e0 93 c2 02 	sts	0x02C2, r30
 540:	80 91 c4 02 	lds	r24, 0x02C4
 544:	90 91 c5 02 	lds	r25, 0x02C5
 548:	89 2b       	or	r24, r25
 54a:	21 f4       	brne	.+8      	; 0x554 <fdevopen+0x88>
 54c:	f0 93 c5 02 	sts	0x02C5, r31
 550:	e0 93 c4 02 	sts	0x02C4, r30
 554:	cf 01       	movw	r24, r30
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	08 95       	ret

00000560 <printf>:
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	fe 01       	movw	r30, r28
 56a:	36 96       	adiw	r30, 0x06	; 6
 56c:	61 91       	ld	r22, Z+
 56e:	71 91       	ld	r23, Z+
 570:	af 01       	movw	r20, r30
 572:	80 91 c2 02 	lds	r24, 0x02C2
 576:	90 91 c3 02 	lds	r25, 0x02C3
 57a:	30 d0       	rcall	.+96     	; 0x5dc <vfprintf>
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <puts>:
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	e0 91 c2 02 	lds	r30, 0x02C2
 58e:	f0 91 c3 02 	lds	r31, 0x02C3
 592:	23 81       	ldd	r18, Z+3	; 0x03
 594:	21 ff       	sbrs	r18, 1
 596:	1b c0       	rjmp	.+54     	; 0x5ce <puts+0x4c>
 598:	ec 01       	movw	r28, r24
 59a:	00 e0       	ldi	r16, 0x00	; 0
 59c:	10 e0       	ldi	r17, 0x00	; 0
 59e:	89 91       	ld	r24, Y+
 5a0:	60 91 c2 02 	lds	r22, 0x02C2
 5a4:	70 91 c3 02 	lds	r23, 0x02C3
 5a8:	db 01       	movw	r26, r22
 5aa:	18 96       	adiw	r26, 0x08	; 8
 5ac:	ed 91       	ld	r30, X+
 5ae:	fc 91       	ld	r31, X
 5b0:	19 97       	sbiw	r26, 0x09	; 9
 5b2:	88 23       	and	r24, r24
 5b4:	31 f0       	breq	.+12     	; 0x5c2 <puts+0x40>
 5b6:	19 95       	eicall
 5b8:	89 2b       	or	r24, r25
 5ba:	89 f3       	breq	.-30     	; 0x59e <puts+0x1c>
 5bc:	0f ef       	ldi	r16, 0xFF	; 255
 5be:	1f ef       	ldi	r17, 0xFF	; 255
 5c0:	ee cf       	rjmp	.-36     	; 0x59e <puts+0x1c>
 5c2:	8a e0       	ldi	r24, 0x0A	; 10
 5c4:	19 95       	eicall
 5c6:	89 2b       	or	r24, r25
 5c8:	11 f4       	brne	.+4      	; 0x5ce <puts+0x4c>
 5ca:	c8 01       	movw	r24, r16
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <puts+0x50>
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	9f ef       	ldi	r25, 0xFF	; 255
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	08 95       	ret

000005dc <vfprintf>:
 5dc:	2f 92       	push	r2
 5de:	3f 92       	push	r3
 5e0:	4f 92       	push	r4
 5e2:	5f 92       	push	r5
 5e4:	6f 92       	push	r6
 5e6:	7f 92       	push	r7
 5e8:	8f 92       	push	r8
 5ea:	9f 92       	push	r9
 5ec:	af 92       	push	r10
 5ee:	bf 92       	push	r11
 5f0:	cf 92       	push	r12
 5f2:	df 92       	push	r13
 5f4:	ef 92       	push	r14
 5f6:	ff 92       	push	r15
 5f8:	0f 93       	push	r16
 5fa:	1f 93       	push	r17
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
 604:	2c 97       	sbiw	r28, 0x0c	; 12
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	f8 94       	cli
 60a:	de bf       	out	0x3e, r29	; 62
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	cd bf       	out	0x3d, r28	; 61
 610:	7c 01       	movw	r14, r24
 612:	6b 01       	movw	r12, r22
 614:	8a 01       	movw	r16, r20
 616:	fc 01       	movw	r30, r24
 618:	17 82       	std	Z+7, r1	; 0x07
 61a:	16 82       	std	Z+6, r1	; 0x06
 61c:	83 81       	ldd	r24, Z+3	; 0x03
 61e:	81 ff       	sbrs	r24, 1
 620:	b0 c1       	rjmp	.+864    	; 0x982 <vfprintf+0x3a6>
 622:	ce 01       	movw	r24, r28
 624:	01 96       	adiw	r24, 0x01	; 1
 626:	4c 01       	movw	r8, r24
 628:	f7 01       	movw	r30, r14
 62a:	93 81       	ldd	r25, Z+3	; 0x03
 62c:	f6 01       	movw	r30, r12
 62e:	93 fd       	sbrc	r25, 3
 630:	85 91       	lpm	r24, Z+
 632:	93 ff       	sbrs	r25, 3
 634:	81 91       	ld	r24, Z+
 636:	6f 01       	movw	r12, r30
 638:	88 23       	and	r24, r24
 63a:	09 f4       	brne	.+2      	; 0x63e <vfprintf+0x62>
 63c:	9e c1       	rjmp	.+828    	; 0x97a <vfprintf+0x39e>
 63e:	85 32       	cpi	r24, 0x25	; 37
 640:	39 f4       	brne	.+14     	; 0x650 <vfprintf+0x74>
 642:	93 fd       	sbrc	r25, 3
 644:	85 91       	lpm	r24, Z+
 646:	93 ff       	sbrs	r25, 3
 648:	81 91       	ld	r24, Z+
 64a:	6f 01       	movw	r12, r30
 64c:	85 32       	cpi	r24, 0x25	; 37
 64e:	21 f4       	brne	.+8      	; 0x658 <vfprintf+0x7c>
 650:	b7 01       	movw	r22, r14
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0f d3       	rcall	.+1566   	; 0xc74 <fputc>
 656:	e8 cf       	rjmp	.-48     	; 0x628 <vfprintf+0x4c>
 658:	51 2c       	mov	r5, r1
 65a:	31 2c       	mov	r3, r1
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	20 32       	cpi	r18, 0x20	; 32
 660:	a0 f4       	brcc	.+40     	; 0x68a <vfprintf+0xae>
 662:	8b 32       	cpi	r24, 0x2B	; 43
 664:	69 f0       	breq	.+26     	; 0x680 <vfprintf+0xa4>
 666:	30 f4       	brcc	.+12     	; 0x674 <vfprintf+0x98>
 668:	80 32       	cpi	r24, 0x20	; 32
 66a:	59 f0       	breq	.+22     	; 0x682 <vfprintf+0xa6>
 66c:	83 32       	cpi	r24, 0x23	; 35
 66e:	69 f4       	brne	.+26     	; 0x68a <vfprintf+0xae>
 670:	20 61       	ori	r18, 0x10	; 16
 672:	2c c0       	rjmp	.+88     	; 0x6cc <vfprintf+0xf0>
 674:	8d 32       	cpi	r24, 0x2D	; 45
 676:	39 f0       	breq	.+14     	; 0x686 <vfprintf+0xaa>
 678:	80 33       	cpi	r24, 0x30	; 48
 67a:	39 f4       	brne	.+14     	; 0x68a <vfprintf+0xae>
 67c:	21 60       	ori	r18, 0x01	; 1
 67e:	26 c0       	rjmp	.+76     	; 0x6cc <vfprintf+0xf0>
 680:	22 60       	ori	r18, 0x02	; 2
 682:	24 60       	ori	r18, 0x04	; 4
 684:	23 c0       	rjmp	.+70     	; 0x6cc <vfprintf+0xf0>
 686:	28 60       	ori	r18, 0x08	; 8
 688:	21 c0       	rjmp	.+66     	; 0x6cc <vfprintf+0xf0>
 68a:	27 fd       	sbrc	r18, 7
 68c:	27 c0       	rjmp	.+78     	; 0x6dc <vfprintf+0x100>
 68e:	30 ed       	ldi	r19, 0xD0	; 208
 690:	38 0f       	add	r19, r24
 692:	3a 30       	cpi	r19, 0x0A	; 10
 694:	78 f4       	brcc	.+30     	; 0x6b4 <vfprintf+0xd8>
 696:	26 ff       	sbrs	r18, 6
 698:	06 c0       	rjmp	.+12     	; 0x6a6 <vfprintf+0xca>
 69a:	fa e0       	ldi	r31, 0x0A	; 10
 69c:	5f 9e       	mul	r5, r31
 69e:	30 0d       	add	r19, r0
 6a0:	11 24       	eor	r1, r1
 6a2:	53 2e       	mov	r5, r19
 6a4:	13 c0       	rjmp	.+38     	; 0x6cc <vfprintf+0xf0>
 6a6:	8a e0       	ldi	r24, 0x0A	; 10
 6a8:	38 9e       	mul	r3, r24
 6aa:	30 0d       	add	r19, r0
 6ac:	11 24       	eor	r1, r1
 6ae:	33 2e       	mov	r3, r19
 6b0:	20 62       	ori	r18, 0x20	; 32
 6b2:	0c c0       	rjmp	.+24     	; 0x6cc <vfprintf+0xf0>
 6b4:	8e 32       	cpi	r24, 0x2E	; 46
 6b6:	21 f4       	brne	.+8      	; 0x6c0 <vfprintf+0xe4>
 6b8:	26 fd       	sbrc	r18, 6
 6ba:	5f c1       	rjmp	.+702    	; 0x97a <vfprintf+0x39e>
 6bc:	20 64       	ori	r18, 0x40	; 64
 6be:	06 c0       	rjmp	.+12     	; 0x6cc <vfprintf+0xf0>
 6c0:	8c 36       	cpi	r24, 0x6C	; 108
 6c2:	11 f4       	brne	.+4      	; 0x6c8 <vfprintf+0xec>
 6c4:	20 68       	ori	r18, 0x80	; 128
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <vfprintf+0xf0>
 6c8:	88 36       	cpi	r24, 0x68	; 104
 6ca:	41 f4       	brne	.+16     	; 0x6dc <vfprintf+0x100>
 6cc:	f6 01       	movw	r30, r12
 6ce:	93 fd       	sbrc	r25, 3
 6d0:	85 91       	lpm	r24, Z+
 6d2:	93 ff       	sbrs	r25, 3
 6d4:	81 91       	ld	r24, Z+
 6d6:	6f 01       	movw	r12, r30
 6d8:	81 11       	cpse	r24, r1
 6da:	c1 cf       	rjmp	.-126    	; 0x65e <vfprintf+0x82>
 6dc:	98 2f       	mov	r25, r24
 6de:	9f 7d       	andi	r25, 0xDF	; 223
 6e0:	95 54       	subi	r25, 0x45	; 69
 6e2:	93 30       	cpi	r25, 0x03	; 3
 6e4:	28 f4       	brcc	.+10     	; 0x6f0 <vfprintf+0x114>
 6e6:	0c 5f       	subi	r16, 0xFC	; 252
 6e8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ea:	ff e3       	ldi	r31, 0x3F	; 63
 6ec:	f9 83       	std	Y+1, r31	; 0x01
 6ee:	0d c0       	rjmp	.+26     	; 0x70a <vfprintf+0x12e>
 6f0:	83 36       	cpi	r24, 0x63	; 99
 6f2:	31 f0       	breq	.+12     	; 0x700 <vfprintf+0x124>
 6f4:	83 37       	cpi	r24, 0x73	; 115
 6f6:	71 f0       	breq	.+28     	; 0x714 <vfprintf+0x138>
 6f8:	83 35       	cpi	r24, 0x53	; 83
 6fa:	09 f0       	breq	.+2      	; 0x6fe <vfprintf+0x122>
 6fc:	57 c0       	rjmp	.+174    	; 0x7ac <vfprintf+0x1d0>
 6fe:	21 c0       	rjmp	.+66     	; 0x742 <vfprintf+0x166>
 700:	f8 01       	movw	r30, r16
 702:	80 81       	ld	r24, Z
 704:	89 83       	std	Y+1, r24	; 0x01
 706:	0e 5f       	subi	r16, 0xFE	; 254
 708:	1f 4f       	sbci	r17, 0xFF	; 255
 70a:	44 24       	eor	r4, r4
 70c:	43 94       	inc	r4
 70e:	51 2c       	mov	r5, r1
 710:	54 01       	movw	r10, r8
 712:	14 c0       	rjmp	.+40     	; 0x73c <vfprintf+0x160>
 714:	38 01       	movw	r6, r16
 716:	f2 e0       	ldi	r31, 0x02	; 2
 718:	6f 0e       	add	r6, r31
 71a:	71 1c       	adc	r7, r1
 71c:	f8 01       	movw	r30, r16
 71e:	a0 80       	ld	r10, Z
 720:	b1 80       	ldd	r11, Z+1	; 0x01
 722:	26 ff       	sbrs	r18, 6
 724:	03 c0       	rjmp	.+6      	; 0x72c <vfprintf+0x150>
 726:	65 2d       	mov	r22, r5
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <vfprintf+0x154>
 72c:	6f ef       	ldi	r22, 0xFF	; 255
 72e:	7f ef       	ldi	r23, 0xFF	; 255
 730:	c5 01       	movw	r24, r10
 732:	2c 87       	std	Y+12, r18	; 0x0c
 734:	94 d2       	rcall	.+1320   	; 0xc5e <strnlen>
 736:	2c 01       	movw	r4, r24
 738:	83 01       	movw	r16, r6
 73a:	2c 85       	ldd	r18, Y+12	; 0x0c
 73c:	2f 77       	andi	r18, 0x7F	; 127
 73e:	22 2e       	mov	r2, r18
 740:	16 c0       	rjmp	.+44     	; 0x76e <vfprintf+0x192>
 742:	38 01       	movw	r6, r16
 744:	f2 e0       	ldi	r31, 0x02	; 2
 746:	6f 0e       	add	r6, r31
 748:	71 1c       	adc	r7, r1
 74a:	f8 01       	movw	r30, r16
 74c:	a0 80       	ld	r10, Z
 74e:	b1 80       	ldd	r11, Z+1	; 0x01
 750:	26 ff       	sbrs	r18, 6
 752:	03 c0       	rjmp	.+6      	; 0x75a <vfprintf+0x17e>
 754:	65 2d       	mov	r22, r5
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	02 c0       	rjmp	.+4      	; 0x75e <vfprintf+0x182>
 75a:	6f ef       	ldi	r22, 0xFF	; 255
 75c:	7f ef       	ldi	r23, 0xFF	; 255
 75e:	c5 01       	movw	r24, r10
 760:	2c 87       	std	Y+12, r18	; 0x0c
 762:	6b d2       	rcall	.+1238   	; 0xc3a <strnlen_P>
 764:	2c 01       	movw	r4, r24
 766:	2c 85       	ldd	r18, Y+12	; 0x0c
 768:	20 68       	ori	r18, 0x80	; 128
 76a:	22 2e       	mov	r2, r18
 76c:	83 01       	movw	r16, r6
 76e:	23 fc       	sbrc	r2, 3
 770:	19 c0       	rjmp	.+50     	; 0x7a4 <vfprintf+0x1c8>
 772:	83 2d       	mov	r24, r3
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	48 16       	cp	r4, r24
 778:	59 06       	cpc	r5, r25
 77a:	a0 f4       	brcc	.+40     	; 0x7a4 <vfprintf+0x1c8>
 77c:	b7 01       	movw	r22, r14
 77e:	80 e2       	ldi	r24, 0x20	; 32
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	78 d2       	rcall	.+1264   	; 0xc74 <fputc>
 784:	3a 94       	dec	r3
 786:	f5 cf       	rjmp	.-22     	; 0x772 <vfprintf+0x196>
 788:	f5 01       	movw	r30, r10
 78a:	27 fc       	sbrc	r2, 7
 78c:	85 91       	lpm	r24, Z+
 78e:	27 fe       	sbrs	r2, 7
 790:	81 91       	ld	r24, Z+
 792:	5f 01       	movw	r10, r30
 794:	b7 01       	movw	r22, r14
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	6d d2       	rcall	.+1242   	; 0xc74 <fputc>
 79a:	31 10       	cpse	r3, r1
 79c:	3a 94       	dec	r3
 79e:	f1 e0       	ldi	r31, 0x01	; 1
 7a0:	4f 1a       	sub	r4, r31
 7a2:	51 08       	sbc	r5, r1
 7a4:	41 14       	cp	r4, r1
 7a6:	51 04       	cpc	r5, r1
 7a8:	79 f7       	brne	.-34     	; 0x788 <vfprintf+0x1ac>
 7aa:	de c0       	rjmp	.+444    	; 0x968 <vfprintf+0x38c>
 7ac:	84 36       	cpi	r24, 0x64	; 100
 7ae:	11 f0       	breq	.+4      	; 0x7b4 <vfprintf+0x1d8>
 7b0:	89 36       	cpi	r24, 0x69	; 105
 7b2:	31 f5       	brne	.+76     	; 0x800 <vfprintf+0x224>
 7b4:	f8 01       	movw	r30, r16
 7b6:	27 ff       	sbrs	r18, 7
 7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <vfprintf+0x1ec>
 7ba:	60 81       	ld	r22, Z
 7bc:	71 81       	ldd	r23, Z+1	; 0x01
 7be:	82 81       	ldd	r24, Z+2	; 0x02
 7c0:	93 81       	ldd	r25, Z+3	; 0x03
 7c2:	0c 5f       	subi	r16, 0xFC	; 252
 7c4:	1f 4f       	sbci	r17, 0xFF	; 255
 7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <vfprintf+0x1fc>
 7c8:	60 81       	ld	r22, Z
 7ca:	71 81       	ldd	r23, Z+1	; 0x01
 7cc:	88 27       	eor	r24, r24
 7ce:	77 fd       	sbrc	r23, 7
 7d0:	80 95       	com	r24
 7d2:	98 2f       	mov	r25, r24
 7d4:	0e 5f       	subi	r16, 0xFE	; 254
 7d6:	1f 4f       	sbci	r17, 0xFF	; 255
 7d8:	2f 76       	andi	r18, 0x6F	; 111
 7da:	b2 2e       	mov	r11, r18
 7dc:	97 ff       	sbrs	r25, 7
 7de:	09 c0       	rjmp	.+18     	; 0x7f2 <vfprintf+0x216>
 7e0:	90 95       	com	r25
 7e2:	80 95       	com	r24
 7e4:	70 95       	com	r23
 7e6:	61 95       	neg	r22
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ea:	8f 4f       	sbci	r24, 0xFF	; 255
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	20 68       	ori	r18, 0x80	; 128
 7f0:	b2 2e       	mov	r11, r18
 7f2:	2a e0       	ldi	r18, 0x0A	; 10
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	a4 01       	movw	r20, r8
 7f8:	6f d2       	rcall	.+1246   	; 0xcd8 <__ultoa_invert>
 7fa:	a8 2e       	mov	r10, r24
 7fc:	a8 18       	sub	r10, r8
 7fe:	43 c0       	rjmp	.+134    	; 0x886 <vfprintf+0x2aa>
 800:	85 37       	cpi	r24, 0x75	; 117
 802:	29 f4       	brne	.+10     	; 0x80e <vfprintf+0x232>
 804:	2f 7e       	andi	r18, 0xEF	; 239
 806:	b2 2e       	mov	r11, r18
 808:	2a e0       	ldi	r18, 0x0A	; 10
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	25 c0       	rjmp	.+74     	; 0x858 <vfprintf+0x27c>
 80e:	f2 2f       	mov	r31, r18
 810:	f9 7f       	andi	r31, 0xF9	; 249
 812:	bf 2e       	mov	r11, r31
 814:	8f 36       	cpi	r24, 0x6F	; 111
 816:	c1 f0       	breq	.+48     	; 0x848 <vfprintf+0x26c>
 818:	18 f4       	brcc	.+6      	; 0x820 <vfprintf+0x244>
 81a:	88 35       	cpi	r24, 0x58	; 88
 81c:	79 f0       	breq	.+30     	; 0x83c <vfprintf+0x260>
 81e:	ad c0       	rjmp	.+346    	; 0x97a <vfprintf+0x39e>
 820:	80 37       	cpi	r24, 0x70	; 112
 822:	19 f0       	breq	.+6      	; 0x82a <vfprintf+0x24e>
 824:	88 37       	cpi	r24, 0x78	; 120
 826:	21 f0       	breq	.+8      	; 0x830 <vfprintf+0x254>
 828:	a8 c0       	rjmp	.+336    	; 0x97a <vfprintf+0x39e>
 82a:	2f 2f       	mov	r18, r31
 82c:	20 61       	ori	r18, 0x10	; 16
 82e:	b2 2e       	mov	r11, r18
 830:	b4 fe       	sbrs	r11, 4
 832:	0d c0       	rjmp	.+26     	; 0x84e <vfprintf+0x272>
 834:	8b 2d       	mov	r24, r11
 836:	84 60       	ori	r24, 0x04	; 4
 838:	b8 2e       	mov	r11, r24
 83a:	09 c0       	rjmp	.+18     	; 0x84e <vfprintf+0x272>
 83c:	24 ff       	sbrs	r18, 4
 83e:	0a c0       	rjmp	.+20     	; 0x854 <vfprintf+0x278>
 840:	9f 2f       	mov	r25, r31
 842:	96 60       	ori	r25, 0x06	; 6
 844:	b9 2e       	mov	r11, r25
 846:	06 c0       	rjmp	.+12     	; 0x854 <vfprintf+0x278>
 848:	28 e0       	ldi	r18, 0x08	; 8
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	05 c0       	rjmp	.+10     	; 0x858 <vfprintf+0x27c>
 84e:	20 e1       	ldi	r18, 0x10	; 16
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	02 c0       	rjmp	.+4      	; 0x858 <vfprintf+0x27c>
 854:	20 e1       	ldi	r18, 0x10	; 16
 856:	32 e0       	ldi	r19, 0x02	; 2
 858:	f8 01       	movw	r30, r16
 85a:	b7 fe       	sbrs	r11, 7
 85c:	07 c0       	rjmp	.+14     	; 0x86c <vfprintf+0x290>
 85e:	60 81       	ld	r22, Z
 860:	71 81       	ldd	r23, Z+1	; 0x01
 862:	82 81       	ldd	r24, Z+2	; 0x02
 864:	93 81       	ldd	r25, Z+3	; 0x03
 866:	0c 5f       	subi	r16, 0xFC	; 252
 868:	1f 4f       	sbci	r17, 0xFF	; 255
 86a:	06 c0       	rjmp	.+12     	; 0x878 <vfprintf+0x29c>
 86c:	60 81       	ld	r22, Z
 86e:	71 81       	ldd	r23, Z+1	; 0x01
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 5f       	subi	r16, 0xFE	; 254
 876:	1f 4f       	sbci	r17, 0xFF	; 255
 878:	a4 01       	movw	r20, r8
 87a:	2e d2       	rcall	.+1116   	; 0xcd8 <__ultoa_invert>
 87c:	a8 2e       	mov	r10, r24
 87e:	a8 18       	sub	r10, r8
 880:	fb 2d       	mov	r31, r11
 882:	ff 77       	andi	r31, 0x7F	; 127
 884:	bf 2e       	mov	r11, r31
 886:	b6 fe       	sbrs	r11, 6
 888:	0b c0       	rjmp	.+22     	; 0x8a0 <vfprintf+0x2c4>
 88a:	2b 2d       	mov	r18, r11
 88c:	2e 7f       	andi	r18, 0xFE	; 254
 88e:	a5 14       	cp	r10, r5
 890:	50 f4       	brcc	.+20     	; 0x8a6 <vfprintf+0x2ca>
 892:	b4 fe       	sbrs	r11, 4
 894:	0a c0       	rjmp	.+20     	; 0x8aa <vfprintf+0x2ce>
 896:	b2 fc       	sbrc	r11, 2
 898:	08 c0       	rjmp	.+16     	; 0x8aa <vfprintf+0x2ce>
 89a:	2b 2d       	mov	r18, r11
 89c:	2e 7e       	andi	r18, 0xEE	; 238
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <vfprintf+0x2ce>
 8a0:	7a 2c       	mov	r7, r10
 8a2:	2b 2d       	mov	r18, r11
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <vfprintf+0x2d0>
 8a6:	7a 2c       	mov	r7, r10
 8a8:	01 c0       	rjmp	.+2      	; 0x8ac <vfprintf+0x2d0>
 8aa:	75 2c       	mov	r7, r5
 8ac:	24 ff       	sbrs	r18, 4
 8ae:	0d c0       	rjmp	.+26     	; 0x8ca <vfprintf+0x2ee>
 8b0:	fe 01       	movw	r30, r28
 8b2:	ea 0d       	add	r30, r10
 8b4:	f1 1d       	adc	r31, r1
 8b6:	80 81       	ld	r24, Z
 8b8:	80 33       	cpi	r24, 0x30	; 48
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <vfprintf+0x2e4>
 8bc:	29 7e       	andi	r18, 0xE9	; 233
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <vfprintf+0x2f6>
 8c0:	22 ff       	sbrs	r18, 2
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <vfprintf+0x2f4>
 8c4:	73 94       	inc	r7
 8c6:	73 94       	inc	r7
 8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <vfprintf+0x2f6>
 8ca:	82 2f       	mov	r24, r18
 8cc:	86 78       	andi	r24, 0x86	; 134
 8ce:	09 f0       	breq	.+2      	; 0x8d2 <vfprintf+0x2f6>
 8d0:	73 94       	inc	r7
 8d2:	23 fd       	sbrc	r18, 3
 8d4:	12 c0       	rjmp	.+36     	; 0x8fa <vfprintf+0x31e>
 8d6:	20 ff       	sbrs	r18, 0
 8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <vfprintf+0x30a>
 8da:	5a 2c       	mov	r5, r10
 8dc:	73 14       	cp	r7, r3
 8de:	18 f4       	brcc	.+6      	; 0x8e6 <vfprintf+0x30a>
 8e0:	53 0c       	add	r5, r3
 8e2:	57 18       	sub	r5, r7
 8e4:	73 2c       	mov	r7, r3
 8e6:	73 14       	cp	r7, r3
 8e8:	60 f4       	brcc	.+24     	; 0x902 <vfprintf+0x326>
 8ea:	b7 01       	movw	r22, r14
 8ec:	80 e2       	ldi	r24, 0x20	; 32
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	2c 87       	std	Y+12, r18	; 0x0c
 8f2:	c0 d1       	rcall	.+896    	; 0xc74 <fputc>
 8f4:	73 94       	inc	r7
 8f6:	2c 85       	ldd	r18, Y+12	; 0x0c
 8f8:	f6 cf       	rjmp	.-20     	; 0x8e6 <vfprintf+0x30a>
 8fa:	73 14       	cp	r7, r3
 8fc:	10 f4       	brcc	.+4      	; 0x902 <vfprintf+0x326>
 8fe:	37 18       	sub	r3, r7
 900:	01 c0       	rjmp	.+2      	; 0x904 <vfprintf+0x328>
 902:	31 2c       	mov	r3, r1
 904:	24 ff       	sbrs	r18, 4
 906:	11 c0       	rjmp	.+34     	; 0x92a <vfprintf+0x34e>
 908:	b7 01       	movw	r22, r14
 90a:	80 e3       	ldi	r24, 0x30	; 48
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	2c 87       	std	Y+12, r18	; 0x0c
 910:	b1 d1       	rcall	.+866    	; 0xc74 <fputc>
 912:	2c 85       	ldd	r18, Y+12	; 0x0c
 914:	22 ff       	sbrs	r18, 2
 916:	16 c0       	rjmp	.+44     	; 0x944 <vfprintf+0x368>
 918:	21 ff       	sbrs	r18, 1
 91a:	03 c0       	rjmp	.+6      	; 0x922 <vfprintf+0x346>
 91c:	88 e5       	ldi	r24, 0x58	; 88
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <vfprintf+0x34a>
 922:	88 e7       	ldi	r24, 0x78	; 120
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	b7 01       	movw	r22, r14
 928:	0c c0       	rjmp	.+24     	; 0x942 <vfprintf+0x366>
 92a:	82 2f       	mov	r24, r18
 92c:	86 78       	andi	r24, 0x86	; 134
 92e:	51 f0       	breq	.+20     	; 0x944 <vfprintf+0x368>
 930:	21 fd       	sbrc	r18, 1
 932:	02 c0       	rjmp	.+4      	; 0x938 <vfprintf+0x35c>
 934:	80 e2       	ldi	r24, 0x20	; 32
 936:	01 c0       	rjmp	.+2      	; 0x93a <vfprintf+0x35e>
 938:	8b e2       	ldi	r24, 0x2B	; 43
 93a:	27 fd       	sbrc	r18, 7
 93c:	8d e2       	ldi	r24, 0x2D	; 45
 93e:	b7 01       	movw	r22, r14
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	98 d1       	rcall	.+816    	; 0xc74 <fputc>
 944:	a5 14       	cp	r10, r5
 946:	30 f4       	brcc	.+12     	; 0x954 <vfprintf+0x378>
 948:	b7 01       	movw	r22, r14
 94a:	80 e3       	ldi	r24, 0x30	; 48
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	92 d1       	rcall	.+804    	; 0xc74 <fputc>
 950:	5a 94       	dec	r5
 952:	f8 cf       	rjmp	.-16     	; 0x944 <vfprintf+0x368>
 954:	aa 94       	dec	r10
 956:	f4 01       	movw	r30, r8
 958:	ea 0d       	add	r30, r10
 95a:	f1 1d       	adc	r31, r1
 95c:	80 81       	ld	r24, Z
 95e:	b7 01       	movw	r22, r14
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	88 d1       	rcall	.+784    	; 0xc74 <fputc>
 964:	a1 10       	cpse	r10, r1
 966:	f6 cf       	rjmp	.-20     	; 0x954 <vfprintf+0x378>
 968:	33 20       	and	r3, r3
 96a:	09 f4       	brne	.+2      	; 0x96e <vfprintf+0x392>
 96c:	5d ce       	rjmp	.-838    	; 0x628 <vfprintf+0x4c>
 96e:	b7 01       	movw	r22, r14
 970:	80 e2       	ldi	r24, 0x20	; 32
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	7f d1       	rcall	.+766    	; 0xc74 <fputc>
 976:	3a 94       	dec	r3
 978:	f7 cf       	rjmp	.-18     	; 0x968 <vfprintf+0x38c>
 97a:	f7 01       	movw	r30, r14
 97c:	86 81       	ldd	r24, Z+6	; 0x06
 97e:	97 81       	ldd	r25, Z+7	; 0x07
 980:	02 c0       	rjmp	.+4      	; 0x986 <vfprintf+0x3aa>
 982:	8f ef       	ldi	r24, 0xFF	; 255
 984:	9f ef       	ldi	r25, 0xFF	; 255
 986:	2c 96       	adiw	r28, 0x0c	; 12
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	f8 94       	cli
 98c:	de bf       	out	0x3e, r29	; 62
 98e:	0f be       	out	0x3f, r0	; 63
 990:	cd bf       	out	0x3d, r28	; 61
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	1f 91       	pop	r17
 998:	0f 91       	pop	r16
 99a:	ff 90       	pop	r15
 99c:	ef 90       	pop	r14
 99e:	df 90       	pop	r13
 9a0:	cf 90       	pop	r12
 9a2:	bf 90       	pop	r11
 9a4:	af 90       	pop	r10
 9a6:	9f 90       	pop	r9
 9a8:	8f 90       	pop	r8
 9aa:	7f 90       	pop	r7
 9ac:	6f 90       	pop	r6
 9ae:	5f 90       	pop	r5
 9b0:	4f 90       	pop	r4
 9b2:	3f 90       	pop	r3
 9b4:	2f 90       	pop	r2
 9b6:	08 95       	ret

000009b8 <calloc>:
 9b8:	0f 93       	push	r16
 9ba:	1f 93       	push	r17
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	86 9f       	mul	r24, r22
 9c2:	80 01       	movw	r16, r0
 9c4:	87 9f       	mul	r24, r23
 9c6:	10 0d       	add	r17, r0
 9c8:	96 9f       	mul	r25, r22
 9ca:	10 0d       	add	r17, r0
 9cc:	11 24       	eor	r1, r1
 9ce:	c8 01       	movw	r24, r16
 9d0:	0d d0       	rcall	.+26     	; 0x9ec <malloc>
 9d2:	ec 01       	movw	r28, r24
 9d4:	00 97       	sbiw	r24, 0x00	; 0
 9d6:	21 f0       	breq	.+8      	; 0x9e0 <calloc+0x28>
 9d8:	a8 01       	movw	r20, r16
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	70 e0       	ldi	r23, 0x00	; 0
 9de:	38 d1       	rcall	.+624    	; 0xc50 <memset>
 9e0:	ce 01       	movw	r24, r28
 9e2:	df 91       	pop	r29
 9e4:	cf 91       	pop	r28
 9e6:	1f 91       	pop	r17
 9e8:	0f 91       	pop	r16
 9ea:	08 95       	ret

000009ec <malloc>:
 9ec:	cf 93       	push	r28
 9ee:	df 93       	push	r29
 9f0:	82 30       	cpi	r24, 0x02	; 2
 9f2:	91 05       	cpc	r25, r1
 9f4:	10 f4       	brcc	.+4      	; 0x9fa <malloc+0xe>
 9f6:	82 e0       	ldi	r24, 0x02	; 2
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	e0 91 c8 02 	lds	r30, 0x02C8
 9fe:	f0 91 c9 02 	lds	r31, 0x02C9
 a02:	20 e0       	ldi	r18, 0x00	; 0
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	a0 e0       	ldi	r26, 0x00	; 0
 a08:	b0 e0       	ldi	r27, 0x00	; 0
 a0a:	30 97       	sbiw	r30, 0x00	; 0
 a0c:	39 f1       	breq	.+78     	; 0xa5c <malloc+0x70>
 a0e:	40 81       	ld	r20, Z
 a10:	51 81       	ldd	r21, Z+1	; 0x01
 a12:	48 17       	cp	r20, r24
 a14:	59 07       	cpc	r21, r25
 a16:	b8 f0       	brcs	.+46     	; 0xa46 <malloc+0x5a>
 a18:	48 17       	cp	r20, r24
 a1a:	59 07       	cpc	r21, r25
 a1c:	71 f4       	brne	.+28     	; 0xa3a <malloc+0x4e>
 a1e:	82 81       	ldd	r24, Z+2	; 0x02
 a20:	93 81       	ldd	r25, Z+3	; 0x03
 a22:	10 97       	sbiw	r26, 0x00	; 0
 a24:	29 f0       	breq	.+10     	; 0xa30 <malloc+0x44>
 a26:	13 96       	adiw	r26, 0x03	; 3
 a28:	9c 93       	st	X, r25
 a2a:	8e 93       	st	-X, r24
 a2c:	12 97       	sbiw	r26, 0x02	; 2
 a2e:	2c c0       	rjmp	.+88     	; 0xa88 <malloc+0x9c>
 a30:	90 93 c9 02 	sts	0x02C9, r25
 a34:	80 93 c8 02 	sts	0x02C8, r24
 a38:	27 c0       	rjmp	.+78     	; 0xa88 <malloc+0x9c>
 a3a:	21 15       	cp	r18, r1
 a3c:	31 05       	cpc	r19, r1
 a3e:	31 f0       	breq	.+12     	; 0xa4c <malloc+0x60>
 a40:	42 17       	cp	r20, r18
 a42:	53 07       	cpc	r21, r19
 a44:	18 f0       	brcs	.+6      	; 0xa4c <malloc+0x60>
 a46:	a9 01       	movw	r20, r18
 a48:	db 01       	movw	r26, r22
 a4a:	01 c0       	rjmp	.+2      	; 0xa4e <malloc+0x62>
 a4c:	ef 01       	movw	r28, r30
 a4e:	9a 01       	movw	r18, r20
 a50:	bd 01       	movw	r22, r26
 a52:	df 01       	movw	r26, r30
 a54:	02 80       	ldd	r0, Z+2	; 0x02
 a56:	f3 81       	ldd	r31, Z+3	; 0x03
 a58:	e0 2d       	mov	r30, r0
 a5a:	d7 cf       	rjmp	.-82     	; 0xa0a <malloc+0x1e>
 a5c:	21 15       	cp	r18, r1
 a5e:	31 05       	cpc	r19, r1
 a60:	f9 f0       	breq	.+62     	; 0xaa0 <malloc+0xb4>
 a62:	28 1b       	sub	r18, r24
 a64:	39 0b       	sbc	r19, r25
 a66:	24 30       	cpi	r18, 0x04	; 4
 a68:	31 05       	cpc	r19, r1
 a6a:	80 f4       	brcc	.+32     	; 0xa8c <malloc+0xa0>
 a6c:	8a 81       	ldd	r24, Y+2	; 0x02
 a6e:	9b 81       	ldd	r25, Y+3	; 0x03
 a70:	61 15       	cp	r22, r1
 a72:	71 05       	cpc	r23, r1
 a74:	21 f0       	breq	.+8      	; 0xa7e <malloc+0x92>
 a76:	fb 01       	movw	r30, r22
 a78:	93 83       	std	Z+3, r25	; 0x03
 a7a:	82 83       	std	Z+2, r24	; 0x02
 a7c:	04 c0       	rjmp	.+8      	; 0xa86 <malloc+0x9a>
 a7e:	90 93 c9 02 	sts	0x02C9, r25
 a82:	80 93 c8 02 	sts	0x02C8, r24
 a86:	fe 01       	movw	r30, r28
 a88:	32 96       	adiw	r30, 0x02	; 2
 a8a:	44 c0       	rjmp	.+136    	; 0xb14 <malloc+0x128>
 a8c:	fe 01       	movw	r30, r28
 a8e:	e2 0f       	add	r30, r18
 a90:	f3 1f       	adc	r31, r19
 a92:	81 93       	st	Z+, r24
 a94:	91 93       	st	Z+, r25
 a96:	22 50       	subi	r18, 0x02	; 2
 a98:	31 09       	sbc	r19, r1
 a9a:	39 83       	std	Y+1, r19	; 0x01
 a9c:	28 83       	st	Y, r18
 a9e:	3a c0       	rjmp	.+116    	; 0xb14 <malloc+0x128>
 aa0:	20 91 c6 02 	lds	r18, 0x02C6
 aa4:	30 91 c7 02 	lds	r19, 0x02C7
 aa8:	23 2b       	or	r18, r19
 aaa:	41 f4       	brne	.+16     	; 0xabc <malloc+0xd0>
 aac:	20 91 02 02 	lds	r18, 0x0202
 ab0:	30 91 03 02 	lds	r19, 0x0203
 ab4:	30 93 c7 02 	sts	0x02C7, r19
 ab8:	20 93 c6 02 	sts	0x02C6, r18
 abc:	20 91 00 02 	lds	r18, 0x0200
 ac0:	30 91 01 02 	lds	r19, 0x0201
 ac4:	21 15       	cp	r18, r1
 ac6:	31 05       	cpc	r19, r1
 ac8:	41 f4       	brne	.+16     	; 0xada <malloc+0xee>
 aca:	2d b7       	in	r18, 0x3d	; 61
 acc:	3e b7       	in	r19, 0x3e	; 62
 ace:	40 91 04 02 	lds	r20, 0x0204
 ad2:	50 91 05 02 	lds	r21, 0x0205
 ad6:	24 1b       	sub	r18, r20
 ad8:	35 0b       	sbc	r19, r21
 ada:	e0 91 c6 02 	lds	r30, 0x02C6
 ade:	f0 91 c7 02 	lds	r31, 0x02C7
 ae2:	e2 17       	cp	r30, r18
 ae4:	f3 07       	cpc	r31, r19
 ae6:	a0 f4       	brcc	.+40     	; 0xb10 <malloc+0x124>
 ae8:	2e 1b       	sub	r18, r30
 aea:	3f 0b       	sbc	r19, r31
 aec:	28 17       	cp	r18, r24
 aee:	39 07       	cpc	r19, r25
 af0:	78 f0       	brcs	.+30     	; 0xb10 <malloc+0x124>
 af2:	ac 01       	movw	r20, r24
 af4:	4e 5f       	subi	r20, 0xFE	; 254
 af6:	5f 4f       	sbci	r21, 0xFF	; 255
 af8:	24 17       	cp	r18, r20
 afa:	35 07       	cpc	r19, r21
 afc:	48 f0       	brcs	.+18     	; 0xb10 <malloc+0x124>
 afe:	4e 0f       	add	r20, r30
 b00:	5f 1f       	adc	r21, r31
 b02:	50 93 c7 02 	sts	0x02C7, r21
 b06:	40 93 c6 02 	sts	0x02C6, r20
 b0a:	81 93       	st	Z+, r24
 b0c:	91 93       	st	Z+, r25
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <malloc+0x128>
 b10:	e0 e0       	ldi	r30, 0x00	; 0
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	cf 01       	movw	r24, r30
 b16:	df 91       	pop	r29
 b18:	cf 91       	pop	r28
 b1a:	08 95       	ret

00000b1c <free>:
 b1c:	cf 93       	push	r28
 b1e:	df 93       	push	r29
 b20:	00 97       	sbiw	r24, 0x00	; 0
 b22:	09 f4       	brne	.+2      	; 0xb26 <free+0xa>
 b24:	87 c0       	rjmp	.+270    	; 0xc34 <free+0x118>
 b26:	fc 01       	movw	r30, r24
 b28:	32 97       	sbiw	r30, 0x02	; 2
 b2a:	13 82       	std	Z+3, r1	; 0x03
 b2c:	12 82       	std	Z+2, r1	; 0x02
 b2e:	c0 91 c8 02 	lds	r28, 0x02C8
 b32:	d0 91 c9 02 	lds	r29, 0x02C9
 b36:	20 97       	sbiw	r28, 0x00	; 0
 b38:	81 f4       	brne	.+32     	; 0xb5a <free+0x3e>
 b3a:	20 81       	ld	r18, Z
 b3c:	31 81       	ldd	r19, Z+1	; 0x01
 b3e:	28 0f       	add	r18, r24
 b40:	39 1f       	adc	r19, r25
 b42:	80 91 c6 02 	lds	r24, 0x02C6
 b46:	90 91 c7 02 	lds	r25, 0x02C7
 b4a:	82 17       	cp	r24, r18
 b4c:	93 07       	cpc	r25, r19
 b4e:	79 f5       	brne	.+94     	; 0xbae <free+0x92>
 b50:	f0 93 c7 02 	sts	0x02C7, r31
 b54:	e0 93 c6 02 	sts	0x02C6, r30
 b58:	6d c0       	rjmp	.+218    	; 0xc34 <free+0x118>
 b5a:	de 01       	movw	r26, r28
 b5c:	20 e0       	ldi	r18, 0x00	; 0
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	ae 17       	cp	r26, r30
 b62:	bf 07       	cpc	r27, r31
 b64:	50 f4       	brcc	.+20     	; 0xb7a <free+0x5e>
 b66:	12 96       	adiw	r26, 0x02	; 2
 b68:	4d 91       	ld	r20, X+
 b6a:	5c 91       	ld	r21, X
 b6c:	13 97       	sbiw	r26, 0x03	; 3
 b6e:	9d 01       	movw	r18, r26
 b70:	41 15       	cp	r20, r1
 b72:	51 05       	cpc	r21, r1
 b74:	09 f1       	breq	.+66     	; 0xbb8 <free+0x9c>
 b76:	da 01       	movw	r26, r20
 b78:	f3 cf       	rjmp	.-26     	; 0xb60 <free+0x44>
 b7a:	b3 83       	std	Z+3, r27	; 0x03
 b7c:	a2 83       	std	Z+2, r26	; 0x02
 b7e:	40 81       	ld	r20, Z
 b80:	51 81       	ldd	r21, Z+1	; 0x01
 b82:	84 0f       	add	r24, r20
 b84:	95 1f       	adc	r25, r21
 b86:	8a 17       	cp	r24, r26
 b88:	9b 07       	cpc	r25, r27
 b8a:	71 f4       	brne	.+28     	; 0xba8 <free+0x8c>
 b8c:	8d 91       	ld	r24, X+
 b8e:	9c 91       	ld	r25, X
 b90:	11 97       	sbiw	r26, 0x01	; 1
 b92:	84 0f       	add	r24, r20
 b94:	95 1f       	adc	r25, r21
 b96:	02 96       	adiw	r24, 0x02	; 2
 b98:	91 83       	std	Z+1, r25	; 0x01
 b9a:	80 83       	st	Z, r24
 b9c:	12 96       	adiw	r26, 0x02	; 2
 b9e:	8d 91       	ld	r24, X+
 ba0:	9c 91       	ld	r25, X
 ba2:	13 97       	sbiw	r26, 0x03	; 3
 ba4:	93 83       	std	Z+3, r25	; 0x03
 ba6:	82 83       	std	Z+2, r24	; 0x02
 ba8:	21 15       	cp	r18, r1
 baa:	31 05       	cpc	r19, r1
 bac:	29 f4       	brne	.+10     	; 0xbb8 <free+0x9c>
 bae:	f0 93 c9 02 	sts	0x02C9, r31
 bb2:	e0 93 c8 02 	sts	0x02C8, r30
 bb6:	3e c0       	rjmp	.+124    	; 0xc34 <free+0x118>
 bb8:	d9 01       	movw	r26, r18
 bba:	13 96       	adiw	r26, 0x03	; 3
 bbc:	fc 93       	st	X, r31
 bbe:	ee 93       	st	-X, r30
 bc0:	12 97       	sbiw	r26, 0x02	; 2
 bc2:	4d 91       	ld	r20, X+
 bc4:	5d 91       	ld	r21, X+
 bc6:	a4 0f       	add	r26, r20
 bc8:	b5 1f       	adc	r27, r21
 bca:	ea 17       	cp	r30, r26
 bcc:	fb 07       	cpc	r31, r27
 bce:	79 f4       	brne	.+30     	; 0xbee <free+0xd2>
 bd0:	80 81       	ld	r24, Z
 bd2:	91 81       	ldd	r25, Z+1	; 0x01
 bd4:	84 0f       	add	r24, r20
 bd6:	95 1f       	adc	r25, r21
 bd8:	02 96       	adiw	r24, 0x02	; 2
 bda:	d9 01       	movw	r26, r18
 bdc:	11 96       	adiw	r26, 0x01	; 1
 bde:	9c 93       	st	X, r25
 be0:	8e 93       	st	-X, r24
 be2:	82 81       	ldd	r24, Z+2	; 0x02
 be4:	93 81       	ldd	r25, Z+3	; 0x03
 be6:	13 96       	adiw	r26, 0x03	; 3
 be8:	9c 93       	st	X, r25
 bea:	8e 93       	st	-X, r24
 bec:	12 97       	sbiw	r26, 0x02	; 2
 bee:	e0 e0       	ldi	r30, 0x00	; 0
 bf0:	f0 e0       	ldi	r31, 0x00	; 0
 bf2:	8a 81       	ldd	r24, Y+2	; 0x02
 bf4:	9b 81       	ldd	r25, Y+3	; 0x03
 bf6:	00 97       	sbiw	r24, 0x00	; 0
 bf8:	19 f0       	breq	.+6      	; 0xc00 <free+0xe4>
 bfa:	fe 01       	movw	r30, r28
 bfc:	ec 01       	movw	r28, r24
 bfe:	f9 cf       	rjmp	.-14     	; 0xbf2 <free+0xd6>
 c00:	ce 01       	movw	r24, r28
 c02:	02 96       	adiw	r24, 0x02	; 2
 c04:	28 81       	ld	r18, Y
 c06:	39 81       	ldd	r19, Y+1	; 0x01
 c08:	82 0f       	add	r24, r18
 c0a:	93 1f       	adc	r25, r19
 c0c:	20 91 c6 02 	lds	r18, 0x02C6
 c10:	30 91 c7 02 	lds	r19, 0x02C7
 c14:	28 17       	cp	r18, r24
 c16:	39 07       	cpc	r19, r25
 c18:	69 f4       	brne	.+26     	; 0xc34 <free+0x118>
 c1a:	30 97       	sbiw	r30, 0x00	; 0
 c1c:	29 f4       	brne	.+10     	; 0xc28 <free+0x10c>
 c1e:	10 92 c9 02 	sts	0x02C9, r1
 c22:	10 92 c8 02 	sts	0x02C8, r1
 c26:	02 c0       	rjmp	.+4      	; 0xc2c <free+0x110>
 c28:	13 82       	std	Z+3, r1	; 0x03
 c2a:	12 82       	std	Z+2, r1	; 0x02
 c2c:	d0 93 c7 02 	sts	0x02C7, r29
 c30:	c0 93 c6 02 	sts	0x02C6, r28
 c34:	df 91       	pop	r29
 c36:	cf 91       	pop	r28
 c38:	08 95       	ret

00000c3a <strnlen_P>:
 c3a:	fc 01       	movw	r30, r24
 c3c:	05 90       	lpm	r0, Z+
 c3e:	61 50       	subi	r22, 0x01	; 1
 c40:	70 40       	sbci	r23, 0x00	; 0
 c42:	01 10       	cpse	r0, r1
 c44:	d8 f7       	brcc	.-10     	; 0xc3c <strnlen_P+0x2>
 c46:	80 95       	com	r24
 c48:	90 95       	com	r25
 c4a:	8e 0f       	add	r24, r30
 c4c:	9f 1f       	adc	r25, r31
 c4e:	08 95       	ret

00000c50 <memset>:
 c50:	dc 01       	movw	r26, r24
 c52:	01 c0       	rjmp	.+2      	; 0xc56 <memset+0x6>
 c54:	6d 93       	st	X+, r22
 c56:	41 50       	subi	r20, 0x01	; 1
 c58:	50 40       	sbci	r21, 0x00	; 0
 c5a:	e0 f7       	brcc	.-8      	; 0xc54 <memset+0x4>
 c5c:	08 95       	ret

00000c5e <strnlen>:
 c5e:	fc 01       	movw	r30, r24
 c60:	61 50       	subi	r22, 0x01	; 1
 c62:	70 40       	sbci	r23, 0x00	; 0
 c64:	01 90       	ld	r0, Z+
 c66:	01 10       	cpse	r0, r1
 c68:	d8 f7       	brcc	.-10     	; 0xc60 <strnlen+0x2>
 c6a:	80 95       	com	r24
 c6c:	90 95       	com	r25
 c6e:	8e 0f       	add	r24, r30
 c70:	9f 1f       	adc	r25, r31
 c72:	08 95       	ret

00000c74 <fputc>:
 c74:	0f 93       	push	r16
 c76:	1f 93       	push	r17
 c78:	cf 93       	push	r28
 c7a:	df 93       	push	r29
 c7c:	18 2f       	mov	r17, r24
 c7e:	09 2f       	mov	r16, r25
 c80:	eb 01       	movw	r28, r22
 c82:	8b 81       	ldd	r24, Y+3	; 0x03
 c84:	81 fd       	sbrc	r24, 1
 c86:	03 c0       	rjmp	.+6      	; 0xc8e <fputc+0x1a>
 c88:	8f ef       	ldi	r24, 0xFF	; 255
 c8a:	9f ef       	ldi	r25, 0xFF	; 255
 c8c:	20 c0       	rjmp	.+64     	; 0xcce <fputc+0x5a>
 c8e:	82 ff       	sbrs	r24, 2
 c90:	10 c0       	rjmp	.+32     	; 0xcb2 <fputc+0x3e>
 c92:	4e 81       	ldd	r20, Y+6	; 0x06
 c94:	5f 81       	ldd	r21, Y+7	; 0x07
 c96:	2c 81       	ldd	r18, Y+4	; 0x04
 c98:	3d 81       	ldd	r19, Y+5	; 0x05
 c9a:	42 17       	cp	r20, r18
 c9c:	53 07       	cpc	r21, r19
 c9e:	7c f4       	brge	.+30     	; 0xcbe <fputc+0x4a>
 ca0:	e8 81       	ld	r30, Y
 ca2:	f9 81       	ldd	r31, Y+1	; 0x01
 ca4:	9f 01       	movw	r18, r30
 ca6:	2f 5f       	subi	r18, 0xFF	; 255
 ca8:	3f 4f       	sbci	r19, 0xFF	; 255
 caa:	39 83       	std	Y+1, r19	; 0x01
 cac:	28 83       	st	Y, r18
 cae:	10 83       	st	Z, r17
 cb0:	06 c0       	rjmp	.+12     	; 0xcbe <fputc+0x4a>
 cb2:	e8 85       	ldd	r30, Y+8	; 0x08
 cb4:	f9 85       	ldd	r31, Y+9	; 0x09
 cb6:	81 2f       	mov	r24, r17
 cb8:	19 95       	eicall
 cba:	89 2b       	or	r24, r25
 cbc:	29 f7       	brne	.-54     	; 0xc88 <fputc+0x14>
 cbe:	2e 81       	ldd	r18, Y+6	; 0x06
 cc0:	3f 81       	ldd	r19, Y+7	; 0x07
 cc2:	2f 5f       	subi	r18, 0xFF	; 255
 cc4:	3f 4f       	sbci	r19, 0xFF	; 255
 cc6:	3f 83       	std	Y+7, r19	; 0x07
 cc8:	2e 83       	std	Y+6, r18	; 0x06
 cca:	81 2f       	mov	r24, r17
 ccc:	90 2f       	mov	r25, r16
 cce:	df 91       	pop	r29
 cd0:	cf 91       	pop	r28
 cd2:	1f 91       	pop	r17
 cd4:	0f 91       	pop	r16
 cd6:	08 95       	ret

00000cd8 <__ultoa_invert>:
 cd8:	fa 01       	movw	r30, r20
 cda:	aa 27       	eor	r26, r26
 cdc:	28 30       	cpi	r18, 0x08	; 8
 cde:	51 f1       	breq	.+84     	; 0xd34 <__ultoa_invert+0x5c>
 ce0:	20 31       	cpi	r18, 0x10	; 16
 ce2:	81 f1       	breq	.+96     	; 0xd44 <__ultoa_invert+0x6c>
 ce4:	e8 94       	clt
 ce6:	6f 93       	push	r22
 ce8:	6e 7f       	andi	r22, 0xFE	; 254
 cea:	6e 5f       	subi	r22, 0xFE	; 254
 cec:	7f 4f       	sbci	r23, 0xFF	; 255
 cee:	8f 4f       	sbci	r24, 0xFF	; 255
 cf0:	9f 4f       	sbci	r25, 0xFF	; 255
 cf2:	af 4f       	sbci	r26, 0xFF	; 255
 cf4:	b1 e0       	ldi	r27, 0x01	; 1
 cf6:	3e d0       	rcall	.+124    	; 0xd74 <__ultoa_invert+0x9c>
 cf8:	b4 e0       	ldi	r27, 0x04	; 4
 cfa:	3c d0       	rcall	.+120    	; 0xd74 <__ultoa_invert+0x9c>
 cfc:	67 0f       	add	r22, r23
 cfe:	78 1f       	adc	r23, r24
 d00:	89 1f       	adc	r24, r25
 d02:	9a 1f       	adc	r25, r26
 d04:	a1 1d       	adc	r26, r1
 d06:	68 0f       	add	r22, r24
 d08:	79 1f       	adc	r23, r25
 d0a:	8a 1f       	adc	r24, r26
 d0c:	91 1d       	adc	r25, r1
 d0e:	a1 1d       	adc	r26, r1
 d10:	6a 0f       	add	r22, r26
 d12:	71 1d       	adc	r23, r1
 d14:	81 1d       	adc	r24, r1
 d16:	91 1d       	adc	r25, r1
 d18:	a1 1d       	adc	r26, r1
 d1a:	20 d0       	rcall	.+64     	; 0xd5c <__ultoa_invert+0x84>
 d1c:	09 f4       	brne	.+2      	; 0xd20 <__ultoa_invert+0x48>
 d1e:	68 94       	set
 d20:	3f 91       	pop	r19
 d22:	2a e0       	ldi	r18, 0x0A	; 10
 d24:	26 9f       	mul	r18, r22
 d26:	11 24       	eor	r1, r1
 d28:	30 19       	sub	r19, r0
 d2a:	30 5d       	subi	r19, 0xD0	; 208
 d2c:	31 93       	st	Z+, r19
 d2e:	de f6       	brtc	.-74     	; 0xce6 <__ultoa_invert+0xe>
 d30:	cf 01       	movw	r24, r30
 d32:	08 95       	ret
 d34:	46 2f       	mov	r20, r22
 d36:	47 70       	andi	r20, 0x07	; 7
 d38:	40 5d       	subi	r20, 0xD0	; 208
 d3a:	41 93       	st	Z+, r20
 d3c:	b3 e0       	ldi	r27, 0x03	; 3
 d3e:	0f d0       	rcall	.+30     	; 0xd5e <__ultoa_invert+0x86>
 d40:	c9 f7       	brne	.-14     	; 0xd34 <__ultoa_invert+0x5c>
 d42:	f6 cf       	rjmp	.-20     	; 0xd30 <__ultoa_invert+0x58>
 d44:	46 2f       	mov	r20, r22
 d46:	4f 70       	andi	r20, 0x0F	; 15
 d48:	40 5d       	subi	r20, 0xD0	; 208
 d4a:	4a 33       	cpi	r20, 0x3A	; 58
 d4c:	18 f0       	brcs	.+6      	; 0xd54 <__ultoa_invert+0x7c>
 d4e:	49 5d       	subi	r20, 0xD9	; 217
 d50:	31 fd       	sbrc	r19, 1
 d52:	40 52       	subi	r20, 0x20	; 32
 d54:	41 93       	st	Z+, r20
 d56:	02 d0       	rcall	.+4      	; 0xd5c <__ultoa_invert+0x84>
 d58:	a9 f7       	brne	.-22     	; 0xd44 <__ultoa_invert+0x6c>
 d5a:	ea cf       	rjmp	.-44     	; 0xd30 <__ultoa_invert+0x58>
 d5c:	b4 e0       	ldi	r27, 0x04	; 4
 d5e:	a6 95       	lsr	r26
 d60:	97 95       	ror	r25
 d62:	87 95       	ror	r24
 d64:	77 95       	ror	r23
 d66:	67 95       	ror	r22
 d68:	ba 95       	dec	r27
 d6a:	c9 f7       	brne	.-14     	; 0xd5e <__ultoa_invert+0x86>
 d6c:	00 97       	sbiw	r24, 0x00	; 0
 d6e:	61 05       	cpc	r22, r1
 d70:	71 05       	cpc	r23, r1
 d72:	08 95       	ret
 d74:	9b 01       	movw	r18, r22
 d76:	ac 01       	movw	r20, r24
 d78:	0a 2e       	mov	r0, r26
 d7a:	06 94       	lsr	r0
 d7c:	57 95       	ror	r21
 d7e:	47 95       	ror	r20
 d80:	37 95       	ror	r19
 d82:	27 95       	ror	r18
 d84:	ba 95       	dec	r27
 d86:	c9 f7       	brne	.-14     	; 0xd7a <__ultoa_invert+0xa2>
 d88:	62 0f       	add	r22, r18
 d8a:	73 1f       	adc	r23, r19
 d8c:	84 1f       	adc	r24, r20
 d8e:	95 1f       	adc	r25, r21
 d90:	a0 1d       	adc	r26, r0
 d92:	08 95       	ret

00000d94 <_exit>:
 d94:	f8 94       	cli

00000d96 <__stop_program>:
 d96:	ff cf       	rjmp	.-2      	; 0xd96 <__stop_program>
